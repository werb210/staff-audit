name: Authentication Regression Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  auth-regression:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb" >> .env
        echo "JWT_SECRET=test-secret-key-for-ci" >> .env
        echo "NODE_ENV=test" >> .env
    
    - name: Run database migrations
      run: npm run db:push
    
    - name: Start server in background
      run: |
        npm run dev &
        sleep 10  # Give server time to start
    
    - name: Run authentication regression tests
      run: npm test -- tests/auth-regression.test.ts
    
    - name: Run smoke tests
      run: node scripts/smoke-test.js
    
    - name: Check canonical login route count
      run: |
        ROUTE_COUNT=$(curl -s http://localhost:5000/__route_dump | grep -E "POST\s+/api/auth/login" | wc -l)
        if [ "$ROUTE_COUNT" -ne 1 ]; then
          echo "❌ Expected exactly 1 login route, found: $ROUTE_COUNT"
          exit 1
        fi
        echo "✅ Canonical login route count: OK"
    
    - name: Test legacy route firewall
      run: |
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}\n" -X POST http://localhost:5000/api/login)
        if [ "$HTTP_CODE" -ne 404 ]; then
          echo "❌ Legacy route not blocked, got: $HTTP_CODE"
          exit 1
        fi
        echo "✅ Legacy route firewall: OK"
    
    - name: Test canonical login endpoint
      run: |
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}\n" \
          -X POST http://localhost:5000/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"none@none","password":"bad"}')
        if [ "$HTTP_CODE" -ne 401 ]; then
          echo "❌ Login endpoint wrong status: $HTTP_CODE (expected 401)"
          exit 1
        fi
        echo "✅ Canonical login endpoint: OK"