import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Page, Text, View, Document, StyleSheet } from "@react-pdf/renderer";
const styles = StyleSheet.create({
    page: { padding: 24 },
    h1: { fontSize: 18, marginBottom: 8 },
    h2: { fontSize: 14, marginVertical: 6 },
    row: { flexDirection: "row", justifyContent: "space-between", marginVertical: 4 },
    card: { border: "1pt solid #ddd", padding: 8, marginBottom: 6 }
});
export function AnalyticsPdf({ activity, conversion, documents, lenders }) {
    return (_jsx(Document, { children: _jsxs(Page, { size: "A4", style: styles.page, children: [_jsx(Text, { style: styles.h1, children: "Monthly Analytics Report" }), _jsx(Text, { style: styles.h2, children: "Activity" }), _jsxs(View, { style: styles.card, children: [_jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Applications (period)" }), _jsx(Text, { children: activity.apps_this_period || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Requires Docs" }), _jsx(Text, { children: activity.requires_docs || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "In Review" }), _jsx(Text, { children: activity.in_review || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Off to Lender" }), _jsx(Text, { children: activity.lenders || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Accepted" }), _jsx(Text, { children: activity.sent || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Funded (total)" }), _jsx(Text, { children: activity.funded_total || 0 })] })] }), _jsx(Text, { style: styles.h2, children: "Conversion (Funnel Totals)" }), _jsxs(View, { style: styles.card, children: [_jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Requires Docs" }), _jsx(Text, { children: conversion.requires_docs || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "In Review" }), _jsx(Text, { children: conversion.in_review || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Off to Lender" }), _jsx(Text, { children: conversion.lenders || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Accepted" }), _jsx(Text, { children: conversion.sent || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Funded" }), _jsx(Text, { children: conversion.funded || 0 })] })] }), _jsx(Text, { style: styles.h2, children: "Documents" }), _jsxs(View, { style: styles.card, children: [_jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Apps with Rejects" }), _jsx(Text, { children: documents.summary?.apps_with_rejects || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Apps Missing Docs" }), _jsx(Text, { children: documents.summary?.apps_missing_docs || 0 })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Apps All Accepted" }), _jsx(Text, { children: documents.summary?.apps_all_accepted || 0 })] })] }), _jsx(Text, { style: styles.h2, children: "Top Rejection Categories" }), _jsx(View, { style: styles.card, children: (documents.topRejects || []).slice(0, 5).map((item, i) => (_jsxs(View, { style: styles.row, children: [_jsx(Text, { children: item.category || 'Unknown' }), _jsx(Text, { children: item.rejects || 0 })] }, i))) }), _jsx(Text, { style: styles.h2, children: "Lender Performance" }), _jsx(View, { style: styles.card, children: (lenders || []).slice(0, 5).map((lender, i) => (_jsxs(View, { style: styles.row, children: [_jsx(Text, { children: lender.lender_name || 'Unknown' }), _jsxs(Text, { children: ["Funded: ", lender.funded_count || 0] })] }, i))) }), _jsx(Text, { style: styles.h2, children: "Generated" }), _jsxs(View, { style: styles.card, children: [_jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Report Date" }), _jsx(Text, { children: new Date().toLocaleDateString() })] }), _jsxs(View, { style: styles.row, children: [_jsx(Text, { children: "Time" }), _jsx(Text, { children: new Date().toLocaleTimeString() })] })] })] }) }));
}
