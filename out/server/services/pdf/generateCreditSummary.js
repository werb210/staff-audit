import { PDFDocument, rgb, StandardFonts } from "pdf-lib";
export async function generateCreditSummaryPDF(app) {
    try {
        console.log(`📝 [PDF-GEN] Generating credit summary PDF for application: ${app.id}`);
        const pdfDoc = await PDFDocument.create();
        const page = pdfDoc.addPage([600, 750]);
        const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
        const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
        const { width, height } = page.getSize();
        const drawText = (text, y, size = 12, isBold = false) => {
            page.drawText(text, {
                x: 50,
                y,
                size,
                font: isBold ? boldFont : font,
                color: rgb(0, 0, 0),
            });
        };
        const drawLine = (y) => {
            page.drawLine({
                start: { x: 50, y },
                end: { x: width - 50, y },
                thickness: 1,
                color: rgb(0.8, 0.8, 0.8),
            });
        };
        let y = height - 50;
        // Header
        drawText("CREDIT SUMMARY REPORT", y, 18, true);
        y -= 25;
        drawLine(y);
        y -= 20;
        drawText(`Generated: ${new Date().toLocaleDateString()}`, y, 10);
        y -= 30;
        // Application Details
        drawText("Application Information", y, 14, true);
        y -= 20;
        drawText(`Application ID: ${app.id}`, y);
        y -= 18;
        drawText(`Business Name: ${app.business_name || app.businessName || 'N/A'}`, y);
        y -= 18;
        drawText(`Industry: ${app.industry || 'Other'}`, y);
        y -= 18;
        drawText(`Amount Requested: $${app.amount_requested || app.requestedAmount || '0'}`, y);
        y -= 18;
        drawText(`Use of Funds: ${app.use_of_funds || app.useOfFunds || 'Not specified'}`, y);
        y -= 18;
        drawText(`Application Stage: ${app.stage || app.status || 'New'}`, y);
        y -= 30;
        // Contact Information
        drawText("Contact Information", y, 14, true);
        y -= 20;
        if (app.contact) {
            drawText(`Primary Contact: ${app.contact.name || 'N/A'}`, y);
            y -= 18;
            drawText(`Email: ${app.contact.email || 'N/A'}`, y);
            y -= 18;
            drawText(`Phone: ${app.contact.phone || 'N/A'}`, y);
            y -= 30;
        }
        else {
            drawText("No contact information available", y);
            y -= 30;
        }
        // Documents Section
        drawText("Document Status", y, 14, true);
        y -= 20;
        if (app.documents && app.documents.length > 0) {
            drawText(`Total Documents: ${app.documents.length}`, y);
            y -= 18;
            app.documents.forEach((doc, index) => {
                if (y < 100) { // Start new page if needed
                    const newPage = pdfDoc.addPage([600, 750]);
                    y = 700;
                }
                drawText(`${index + 1}. ${doc.document_type || doc.filename}: ${doc.status}`, y, 10);
                y -= 15;
            });
        }
        else {
            drawText("No documents uploaded", y);
            y -= 18;
        }
        y -= 20;
        // Credit Assessment (Mock data for now)
        drawText("Preliminary Credit Assessment", y, 14, true);
        y -= 20;
        drawText("Risk Score: 72/100 (Good)", y);
        y -= 18;
        drawText("Recommendation: Approve for underwriting review", y);
        y -= 18;
        drawText("Key Factors: Complete documentation, established business", y);
        y -= 30;
        // Footer
        drawText("This is an automated summary generated by the lending platform.", y, 8);
        drawText("For internal use only. Not for distribution to applicants.", y - 15, 8);
        console.log(`✅ [PDF-GEN] PDF generation completed for application: ${app.id}`);
        return await pdfDoc.save();
    }
    catch (error) {
        console.error('PDF generation failed:', error);
        throw new Error('Failed to generate credit summary PDF');
    }
}
