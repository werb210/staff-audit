server/boot.ts:468:    const usersRouter = (await import("./routes/users-api.ts")).default;
server/boot.ts:470:    console.log("‚úÖ Users API router mounted at /api/users");
server/boot.ts:477:    const adminUsersRouter = (await import("./routes/admin/users.ts")).default;
server/boot.ts:479:    console.log("‚úÖ Admin users router mounted at /api/admin/users");
server/boot.ts:481:    console.log("‚ùå admin/users.ts not found:", e.message); 
server/user-service.ts:176:  static async verifyUserSession(token: string): Promise<User | null> {
server/user-service.ts:181:      const decoded = jwt.default.verify(token, JWT_SECRET) as any;
server/emailAuth.ts:45:export const verifyToken = (token: string) => {
server/emailAuth.ts:47:    return jwt.verify(token, JWT_SECRET) as any;
server/emailAuth.ts:74:    const decoded = verifyToken(token);
server/communications-service.ts:106:    this.initializeTwilio();
server/communications-service.ts:109:  private initializeTwilio() {
server/communications-service.ts:110:    // Initialize Twilio client if credentials are available
server/communications-service.ts:112:      console.log('üì± Twilio integration configured');
server/communications-service.ts:114:      console.log('‚ÑπÔ∏è Twilio credentials not configured - SMS/Voice features will be limited');
server/communications-service.ts:509:  async verifyOTP(phoneNumber: string, code: string, purpose: string): Promise<{ 
server/communications-service.ts:586:      console.error('‚ùå Error verifying OTP:', error);
server/twilioService.ts:1:import { Twilio } from 'twilio';
server/twilioService.ts:8:  throw new Error('Missing Twilio credentials in environment variables');
server/twilioService.ts:11:const client = new Twilio(accountSid, authToken);
server/twilioService.ts:14:export function getTwilioPhoneNumberForSilo(silo: 'BF' | 'SLF'): string {
server/twilioService.ts:21:    const fromNumber = getTwilioPhoneNumberForSilo(silo);
server/infra/routes.ts:13:  users: "/api/users",
server/infra/routes.ts:17:  verify: "/api/verify",
server/infra/routes.ts:20:  twilioVerify: "/api/twilio/verify",
server/security/jwtOrSession.ts:31:    const payload: any = jwt.verify(token, process.env.JWT_SECRET || "dev-secret");
server/routes/communicationCenter.ts:4: * Complete Twilio Communication Center backend
server/routes/communicationCenter.ts:11:import { TwilioService } from '../utils/twilioService.js';
server/routes/communicationCenter.ts:124:    // Send SMS via Twilio
server/routes/communicationCenter.ts:125:    const result = await TwilioService.Messaging.sendSMS(to, message);
server/routes/communicationCenter.ts:310:    const result = await TwilioService.Voice.makeCallWithTwiML(to, defaultTwiML);
server/routes/communicationCenter.ts:656:    const health = await TwilioService.healthCheck();
server/security/twilioVerify.ts:4:export function verifyTwilioWebhook(req: Request, res: Response, next: NextFunction) {
server/boot.js.DISABLED:28:// ---- AUTH (dev or verify)
server/boot.js.DISABLED:33:    // registerUse(app, "/api/auth", verifyRoutes as any, "auth.verify");
server/routes/fileVerification.ts:7:import { verifyUploadedFiles, verifySingleDocument } from '../utils/fileVerificationService.js';
server/routes/fileVerification.ts:23:    const results = await verifyUploadedFiles();
server/routes/fileVerification.ts:58:    const result = await verifySingleDocument(id);
server/auth/verifyOnly.ts:20:  return res.status(410).json({ ok:false, error:"Legacy auth disabled. Twilio Verify-only." });
server/auth/verifyOnly.ts:59:    req.path.includes('/api/users') ||
server/auth/verifyOnly.ts:60:    req.path.includes('/users') ||    // Handle stripped paths
server/auth/verifyOnly.ts:88:    req.path.includes('/api/verify-admin') ||
server/auth/verifyOnly.ts:105:    req.originalUrl.includes('/api/users') ||
server/auth/verifyOnly.ts:109:    req.originalUrl.includes('/api/verify-admin') ||
server/auth/verifyOnly.ts:126:    req.url.includes('/users') ||
server/auth/verifyOnly.ts:179:    const payload:any = jwt.verify(token, JWT_SECRET);
server/auth/verifyOnly.ts:188:// Create verify router with database fallback
server/auth/verifyOnly.ts:202:        await client.verify.v2.services(process.env.TWILIO_VERIFY_SERVICE_SID)
server/auth/verifyOnly.ts:211:  r.post("/verify-otp", async (req:Request, res:Response)=>{
server/auth/verifyOnly.ts:223:        const check = await client.verify.v2.services(process.env.TWILIO_VERIFY_SERVICE_SID)
server/auth/require-auth.mjs:38:      const verify = await verifierPromise;
server/auth/require-auth.mjs:41:      const payload = await verify(token);
server/auth/require-auth.mjs:59:      const verify = await verifierPromise;
server/auth/require-auth.mjs:60:      req.user = (await verify(token));
server/booking/sendLink.ts:24:        // If Twilio fails (demo mode), still return success for testing
server/auth/routes.ts:4:import { signJwt, verifyJwt, extractBearer } from "../mw/jwt-auth";
server/auth/routes.ts:91:    console.log(`üë§ Found user: ${user.email}, verifying password...`);
server/auth/routes.ts:112:        console.error('Twilio Verify error:', error);
server/auth/routes.ts:136:      const u = verifyJwt(token);
server/auth/routes.ts:172:      console.error('Twilio Verify check error:', error);
server/mw/auth.ts:13:  '/users',          // Users management - REQUIRED for UI
server/mw/auth.ts:43:    const decoded = jwt.verify(token, process.env.JWT_SECRET!);
server/mw/security.ts:20:      // Enable CSP for Twilio SDK + Mixpanel Analytics
server/mw/jwt-auth.ts:23:export function verifyJwt(token: string): JwtUser {
server/mw/jwt-auth.ts:24:  return jwt.verify(token, SECRET, { issuer: ISS, audience: AUD }) as JwtUser;
server/mw/jwt-auth.ts:38:    try { (req as any).user = verifyJwt(token); } catch { /* ignore */ }
server/mw/jwt-auth.ts:58:    /^\/api\/voice\//i,                 // Twilio voice webhooks
server/mw/jwt-auth.ts:72:    (req as any).user = verifyJwt(token);
server/routes/pipeline.ts:3:import { requireAuth } from "../auth/verifyOnly";
server/mw/auth-required.ts:32:// For SPA HTML: redirect unauthenticated users to /login (but allow /login, /verify, /health)
server/mw/auth-required.ts:35:  if (p.startsWith("/login") || p.startsWith("/verify") || p === "/api/health") return next();
server/admin/coverageManifest.ts:13:  // OTP (Twilio Verify)
server/admin/coverageManifest.ts:15:  { label: "OTP Verify", method: "POST", path: "/api/otp/verify", uiPath: "/login", selector: "[data-testid='btn-verify']" },
server/mw/requireAuth.ts:9:      req.path.startsWith("/api/verify/") || req.path==="/api/health" || 
server/mw/requireAuth.ts:19:    const payload = jwt.verify(token, process.env.JWT_SECRET!);
server/o365/email.service.ts:27:    ? `/users/${encodeURIComponent(process.env.MS_SHARED_MAILBOX)}/sendMail`
server/o365/email.service.ts:65:    ? `/users/${encodeURIComponent(process.env.MS_SHARED_MAILBOX)}`
server/routes/voice.token.ts:19:      error: 'Missing Twilio credentials',
server/twilio/sender.ts:7:// Only initialize Twilio if we have valid credentials
server/routes/comms/sms.ts:80:// Twilio inbound webhook
server/routes/comms/sms.ts:132:    // Respond to Twilio with 200 OK (no auto-reply)
server/routes/comms/sms.ts:140:// Twilio message status callback
server/twilio/guards.ts:16:    throw new Error("Refusing to send to Twilio test number in production");
server/twilio/twilioClient.ts:10:  throw new Error("Twilio LIVE credentials required");
server/routes/admin.users.ts:2:import { requireAuth } from "../auth/verifyOnly";
server/routes/admin.users.ts:10:// GET /api/admin/users - List all users
server/routes/admin.users.ts:28:// POST /api/admin/users - Create new user
server/routes/admin.users.ts:57:// PUT /api/admin/users/:id - Update user
server/lib/twilioVerify.ts:4:const service = () => client.verify.v2.services(process.env.TWILIO_VERIFY_SERVICE_SID!);
server/routes/slf/dialer.ts:24:    // TODO: Implement actual Twilio call with SLF number enforcement
server/routes/security/compliance.ts:41:router.post("/2fa/verify", async (req: any, res) => {
server/routes/security/compliance.ts:59:  const verified = speakeasy.totp.verify({
server/routes/security/compliance.ts:96:  const verified = speakeasy.totp.verify({
server/routes/communications/incomingCall.ts:8: * Twilio webhook endpoint for handling incoming calls
server/routes/communications/incomingCall.ts:10: * This endpoint receives webhooks from multiple Twilio numbers:
server/routes/communications/incomingCall.ts:18:    // Validate required Twilio webhook data
server/routes/communications/incomingCall.ts:42:    // Respond to Twilio with TwiML (optional - for call handling)
server/routes/communications/incomingCall.ts:70: * Test endpoint for verifying the webhook functionality
server/routes/client-integration-test.ts:1:// Simple test endpoint to verify client integration routing
server/lib/graph.ts:43:  const base = fromUserPrincipal? `/users/${encodeURIComponent(fromUserPrincipal)}` : `/me`;
server/routes/auth.ts:35:    const payload = jwt.verify(token, JWT_SECRET);
server/routes/auth.ts:128:    const decoded = jwt.verify(token, JWT_SECRET) as any;
server/routes/otp_diag.ts:45:    const decoded = jwt.verify(token, JWT_SECRET) as any;
server/routes/otp_diag.ts:101:      health.likelyProblem = "missing_verify_service";
server/routes/otp_diag.ts:138:        const sms = await client.verify.v2.services(TWILIO_VERIFY_SERVICE_SID).verifications.create({ to, channel:"sms" });
server/routes/otp_diag.ts:148:      const wa = await client.verify.v2.services(TWILIO_VERIFY_SERVICE_SID).verifications.create({ to:`whatsapp:${to}`, channel:"whatsapp" });
server/routes/integrations/webhooks.ts:4:import { verifyHmac, maskPII } from "../../services/integrations/core";
server/routes/integrations/webhooks.ts:8:/** Generic webhook receiver ‚Äî HMAC verify if BANK_WEBHOOK_SECRET set */
server/routes/integrations/webhooks.ts:13:  const ok = secret ? verifyHmac(raw, String(sig), secret) : true;
server/routes/auth-verify.ts:12:const verifyServiceSid = process.env.TWILIO_VERIFY_SID!;
server/routes/auth-verify.ts:13:if (!verifyServiceSid) {
server/routes/auth-verify.ts:41:  app.post("/api/auth/verify/start", limiter, requireAuth, async (req: Request, res: Response) => {
server/routes/auth-verify.ts:45:      if (!verifyServiceSid) {
server/routes/auth-verify.ts:49:      await twilioClient.verify.v2.services(verifyServiceSid).verifications.create({ 
server/routes/auth-verify.ts:61:  app.post("/api/auth/verify/check", limiter, requireAuth, async (req: Request, res: Response) => {
server/routes/auth-verify.ts:72:      if (!verifyServiceSid) {
server/routes/auth-verify.ts:76:      const result = await twilioClient.verify.v2.services(verifyServiceSid).verificationChecks.create({ 
server/routes/auth-verify.ts:95:  app.get("/api/auth/verify/status", requireAuth, (req: Request, res: Response) => {
server/lib/twilio.ts:5:  if(!TWILIO_ACCOUNT_SID || !TWILIO_AUTH_TOKEN) throw new Error("Twilio env missing");
server/routes/crm/contacts/twilioLogs.ts:2: * CRM Twilio Logs Integration
server/routes/crm/contacts/twilioLogs.ts:137:    console.error('‚ùå Twilio Logs Fetch Error:', error);
server/routes/crm/contacts/twilioLogs.ts:140:      error: 'Failed to fetch Twilio logs',
server/routes/crm/contacts/twilioLogs.ts:176:    console.error('‚ùå Twilio Stats Fetch Error:', error);
server/routes/crm/contacts/twilioLogs.ts:179:      error: 'Failed to fetch Twilio stats',
server/routes/crm/contacts/twilioLogs.ts:198:    // Mock quick reply response since Twilio integration is in demo mode
server/routes/admin/user-toggle-endpoints.ts:8:router.post('/admin/users/:userId/2fa', async (req, res) => {
server/routes/admin/user-toggle-endpoints.ts:38:router.post('/admin/users/:userId/role', async (req, res) => {
server/routes/admin/user-toggle-endpoints.ts:69:router.post('/admin/users/:userId/permissions', async (req, res) => {
server/routes/admin/user-toggle-endpoints.ts:100:router.post('/admin/users/:userId/accounts', async (req, res) => {
server/routes/admin/users.ts:26:    // In production, verify user role from session/token
server/routes/admin/users.ts:48:// GET /api/admin/users - List all users
server/routes/admin/users.ts:49:router.get("/api/admin/users", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:92:// POST /api/admin/users - Create new user
server/routes/admin/users.ts:93:router.post("/api/admin/users", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:162:// PUT /api/admin/users/:id - Update user
server/routes/admin/users.ts:163:router.put("/api/admin/users/:id", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:270:// DELETE /api/admin/users/:id - Delete user
server/routes/admin/users.ts:271:router.delete("/api/admin/users/:id", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:317:// GET /api/admin/users/audit - Get user audit log
server/routes/admin/users.ts:318:router.get("/api/admin/users/audit", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:362:// GET /api/admin/users/roles - Get available roles
server/routes/admin/users.ts:363:router.get("/api/admin/users/roles", requireAdmin, async (req, res) => {
server/routes/reports.ts:830:router.get('/analytics/ga4/users', async (req, res) => {
server/routes/diag.ts:8:    if (!process.env.TWILIO_BF_ACCOUNT_SID) issues.push("BF Twilio missing");
server/routes/diag.ts:9:    if (!process.env.TWILIO_SLF_ACCOUNT_SID) issues.push("SLF Twilio missing");
server/routes/voice.ts:48: * Issues a short-lived Voice access token for the Twilio JS SDK (Twilio.Device).
server/routes/voice.ts:49: * Supports silo-aware token generation with separate Twilio credentials per silo.
server/routes/voice.ts:79:      return res.status(500).json({ ok: false, error: "Twilio not configured", silo });
server/routes/voice.ts:127:// ----- Outbound call (Twilio-ready; works in test mode) -----
server/routes/voice.ts:136:    console.log('üß™ [VOICE] Test mode - Twilio credentials not configured');
server/routes/voice.ts:147:  // Live Twilio: lazy import so dev env doesn't require package
server/routes/voice.ts:246:      return res.status(500).json({ ok: false, error: "Twilio not configured for silo " + silo });
server/routes/voice.ts:268:// POST from Twilio (incoming call -> return TwiML)
server/lib/sign.ts:10:export function verify(token: string): any | null {
server/routes/public/documents.ts:50:// 2) CONFIRM (record in DB, verify metadata)
server/sms/production-workaround.ts:87:export function verifyWorkaroundOTP(phoneNumber: string, inputCode: string): { valid: boolean; error?: string } {
server/routes/applications/create.ts:18:// TEST ENDPOINT: Simple test to verify routing is working
server/routes/applications/submit.ts:222:      console.error('‚ùå [CRM SUBMIT] Failed to verify/create contact:', crmError);
server/routes/twilio/voice.ts:2: * Twilio Voice Webhook Handler
server/routes/twilio/voice.ts:15:// Twilio configuration for WebRTC
server/routes/twilio/voice.ts:22: * Generate Twilio Access Token for WebRTC
server/routes/twilio/voice.ts:31:      throw new Error('Twilio API Key and Secret required for WebRTC');
server/routes/twilio/voice.ts:121: * POST /api/twilio/voice/inbound - Primary webhook endpoint for Twilio voice calls
server/routes/twilio/voice.ts:122: * Configured in Twilio Console: [Dynamic URL]/api/twilio/voice/inbound
server/routes/_int.dialerDiag.ts:41:Env: Twilio ${env.TWILIO_ACCOUNT_SID && env.TWILIO_API_KEY_SID && env.TWILIO_API_KEY_SECRET && env.TWILIO_TWIML_APP_SID ? "OK" : "missing"}.
server/routes/twilio/index.ts:2: * Main Twilio Router - Matches specification exactly
server/routes/twilio/index.ts:16:// Mount all Twilio feature routes
server/test-sms.js:2: * Test script to send real SMS via Twilio to Andrew's phone
server/test-sms.js:11:const verifySid = process.env.TWILIO_VERIFY_SERVICE_SID;
server/test-sms.js:13:console.log('Twilio Configuration Check:');
server/test-sms.js:16:console.log('TWILIO_VERIFY_SERVICE_SID:', verifySid ? verifySid.slice(0, 6) + '***' : 'MISSING');
server/test-sms.js:19:  if (!accountSid || !authToken || !verifySid) {
server/test-sms.js:20:    console.error('‚ùå Missing Twilio credentials');
server/test-sms.js:29:    console.log('Using Verify Service SID:', verifySid);
server/test-sms.js:32:    if (!verifySid.startsWith('VA')) {
server/test-sms.js:35:      console.error('   Please create a Verify Service in Twilio Console and use that SID');
server/test-sms.js:39:    const verification = await client.verify.v2
server/test-sms.js:40:      .services(verifySid)
server/routes/auth.password-reset.ts:114:// GET /api/auth/password-reset/verify - Verify token validity (public)
server/routes/auth.password-reset.ts:115:router.get('/verify', async (req, res) => {
server/routes/auth.password-reset.ts:167:    console.error('‚ùå [PASSWORD-RESET] Error verifying token:', error);
server/routes/auth.password-reset.ts:170:      error: 'Failed to verify token',
server/routes/_int/buildGuard.ts:79:router.get('/verify-build', (req, res) => {
server/routes/users-management.ts:17:// GET /api/users-management - Get all users with full profile data
server/routes/users-management.ts:63:// GET /api/users-management/:id - Get single user by ID
server/routes/users-management.ts:95:// POST /api/users-management - Create new user
server/routes/users-management.ts:118:        // Auto-verify phone if mobile provided
server/routes/users-management.ts:167:// PATCH /api/users-management/:id - Update existing user
server/routes/users-management.ts:240:// DELETE /api/users-management/:id - Soft delete user (set inactive)
server/routes/users-management.ts:286:// DELETE /api/users-management/:id/hard-delete - Permanently delete user
server/routes/users-management.ts:326:// POST /api/users-management/:id/password-reset - Send password reset email (admin-only)
server/routes/voice/outgoing.ts:9:// Twilio client
server/routes/voice/outgoing.ts:40:    // Create the call via Twilio
server/db/index.ts:2:import { usersRepo } from "./repo/users";
server/routes/_int.firstSignInDiag.ts:67:    twoFAVerify:  await head("/api/auth/2fa/verify"),
server/routes/_int.firstSignInDiag.ts:113:‚Ä¢ Messaging: email (SendGrid) and SMS (Twilio) ${
server/routes/_int.firstSignInDiag.ts:116:‚Ä¢ Routes: invite accept + 2FA start/verify ${
server/routes/_int.firstSignInDiag.ts:126:- Mount /api/auth/invite/accept, /api/auth/2fa/start, /api/auth/2fa/verify.
server/routes/user-management.js:11:// Enhanced Twilio service
server/routes/user-management.js:15:    // In production, use actual Twilio
server/routes/user-management.js:21:    // In production, use SendGrid/Twilio SendGrid
server/routes/user-management.js:59:// POST /api/user-management - Create new user with Twilio password delivery
server/routes/user-management.js:212:    // Get user and verify current password
server/routes/twilio/status.ts:2: * Twilio Webhook Receipts - Feature 8
server/routes/twilio/status.ts:70:    // Respond to Twilio webhook (always return 200)
server/routes/twilio/status.ts:85:    // Still return 200 to Twilio to prevent retries
server/db/users-shim.ts:15:  verify(email:string, pw:string){ const u=this.getByEmail(email); return u && u.pwHash===sha(pw) ? u : null; },
server/routes/twilio/sms.ts:2: * Twilio SMS Routes - Features 1 & 2
server/routes/twilio/sms.ts:12:// Initialize Twilio client
server/routes/twilio/sms.ts:91:    // Send auto-reply (only if different numbers to avoid Twilio error)
server/routes/twilio/sms.ts:100:    // Respond with TwiML (required by Twilio)
server/routes/twilio/reminders.ts:2: * Twilio Appointment Reminders - Feature 5
server/routes/twilio/reminders.ts:12:// Initialize Twilio client
server/routes/twilio/logs.ts:2: * Twilio Admin Dashboard Logs - Feature 7
server/routes/twilio/compliance.ts:2: * Twilio US/Canada Compliance - Feature 6
server/routes/api/documents.ts:155:      // Send SMS notification via Twilio
server/routes/api/documents.ts:372:    let errorMessage = "Failed to verify document";
server/services/smsService.ts:35:    // Import Twilio dynamically to avoid startup issues
server/services/smsService.ts:42:    // Send SMS via Twilio
server/services/documentAuditService.ts:13:    const { verifyUploadedFiles } = await import('../utils/fileVerificationService');
server/services/documentAuditService.ts:14:    const verificationResults = await verifyUploadedFiles();
server/services/documentAuditService.ts:39:  } catch (verifyError) {
server/services/documentAuditService.ts:40:    console.error(`‚ùå [STARTUP AUDIT] File verification failed:`, verifyError);
server/routes/api/lenders-settings.ts:123:    // In a real implementation, this would use Twilio/SendGrid
server/routes/documents.ts:120:      payload = jwt.verify(token, DOCS_JWT_SECRET) as {
server/services/pipelineAutomation.ts:132:      // Send SMS notification using Twilio
server/services/pipelineAutomation.ts:139:        // Import Twilio service dynamically for ES6 compatibility
server/services/pipelineAutomation.ts:145:        console.log(`‚ö†Ô∏è Twilio SMS failed, using development fallback: ${twilioError.message}`);
server/routes/ai-admin.ts:144:router.get('/usage/users', adminOnly, async (req, res) => {
server/routes/chat.ts:2:import { requireAuth } from "../auth/verifyOnly";
server/routes/ivr.ts:107:  // Twilio voice webhooks use x-www-form-urlencoded
server/routes/ivr.ts:111:  // Twilio optional runtime dependency (keeps build clean w/o SDK/env)
server/services/aiApplicationService.ts:385:  const mediumPriorityKeywords = ['review', 'verify', 'check', 'confirm'];
server/services/aiApplicationService.ts:458:  page.drawText('Generated by AI - Review and verify all information', {
server/services/twilioLookupService.ts:2: * Twilio Lookup Service
server/services/twilioLookupService.ts:11:// Initialize Twilio client only if credentials are available
server/services/twilioLookupService.ts:19:    console.log('üìû Twilio Lookup service initialized successfully');
server/services/twilioLookupService.ts:21:    console.error('‚ùå Failed to initialize Twilio Lookup client:', error);
server/services/twilioLookupService.ts:24:  console.warn('‚ö†Ô∏è Twilio Lookup service disabled: Missing credentials');
server/services/twilioLookupService.ts:37: * Look up phone number information using Twilio Lookup API
server/services/twilioLookupService.ts:41:    console.warn(`‚ö†Ô∏è [LOOKUP] Twilio not configured, skipping lookup for ${phoneNumber}`);
server/services/twilioLookupService.ts:121: * Check if Twilio Lookup is properly configured
server/services/twilioLookupService.ts:143:      // Test with a known good number (Twilio's test number)
server/routes/contact-actions.ts:7:// POST /api/calls/outbound - Initiate outbound call via Twilio
server/routes/contact-actions.ts:12:    // TODO: Integrate with actual Twilio calling
server/routes/contact-actions.ts:36:// POST /api/sms/send - Send SMS via Twilio  
server/routes/contact-actions.ts:211:        features: ['voice', 'sms', 'verify']
server/routes/twilio-lookup.js:23:    // TODO: Integrate with real Twilio Lookup API
server/routes/twilio-lookup.js:27:    // Mock response for now - replace with actual Twilio API call
server/jobs/lib.ts:6:  // TODO: Implement actual SMS sending when Twilio SMS is configured
server/routes/comm-sms.js:8:// SEND - Twilio SMS fa√ßade with template support
server/routes/comm-sms.js:27:  // TODO: resolve template if templateId provided, call Twilio Messages API
server/routes/comm-sms.js:55:// Webhook endpoint for delivery status (same path, detects Twilio payload)
server/services/automatedReminders.ts:9:  // TODO: Implement with Twilio service
server/services/signatures.ts:3:export function verifyTwilioSignature(opts:{ authToken:string; fullUrl:string; body: any; headerSig: string }){
server/services/signatures.ts:4:  // Per Twilio: signature = Base64(HMAC-SHA1(authToken, fullUrl + sortedBodyParams))
server/jobs/startupFixMissingPaths.ts:50:        // File found - verify and update database if needed
server/routes/users-admin.ts:1:// server/routes/users-admin.ts - Admin User Creation
server/routes/users-admin.ts:56:router.post('/verify-admin', async (req, res) => {
server/routes/users-admin.ts:83:    console.error('‚ùå [USER-VERIFY] Failed to verify admin user:', error);
server/routes/users-admin.ts:84:    res.status(500).json({ error: 'Failed to verify user' });
server/routes/slf.ts:129:  // TODO: replace with Twilio REST createCall here
server/routes/compliance/sms-consent.ts:2:import { requireAuth } from "../../auth/verifyOnly";
server/routes/compliance/sms-consent.ts:86:// Handle STOP/START keywords (called by Twilio webhook)
server/routes/linkedin/oauth.ts:2:import { requireAuth } from "../../auth/verifyOnly";
server/routes/emergency-call-stop.ts:3: * Immediately stops all active Twilio calls
server/routes/emergency-call-stop.ts:12: * Terminates all active Twilio calls immediately
server/routes/emergency-call-stop.ts:21:        error: 'Twilio credentials not configured'
server/routes/emergency-call-stop.ts:74:      return res.json({ error: 'Twilio not configured' });
server/middleware/auth.ts:14:  "/api/users",
server/middleware/auth.ts:54:    const decoded = jwt.verify(token, JWT_SECRET);
server/middleware/auth.ts:68:    const p: any = jwt.verify(tok, JWT_SECRET);
server/routes/voice-outgoing.ts:34:      message: 'Call simulated - Twilio not configured'
server/middleware/hybridAuth.ts:39:  // IVR and Voice endpoints (for Twilio webhooks)
server/middleware/hybridAuth.ts:42:  { method: 'GET', path: /^\/api\/ivr\/voice\/users$/ },
server/middleware/hybridAuth.ts:98:      const decoded = jwt.verify(token, JWT_SECRET) as any;
server/middleware/hybridAuth.ts:111:      const decoded = jwt.verify(authToken, JWT_SECRET) as any;
server/routes/settings/rbac.ts:2:import { requireAuth } from "../../auth/verifyOnly";
server/routes/settings/rbac.ts:69:r.put("/users/:userId/role", async (req: any, res) => {
server/services/pipelineSms.ts:6:  // In production, this would call Twilio
server/services/pipelineSms.ts:19:  // In production, this would call Twilio
server/routes/calls.ts:23:    // In production, would update Twilio call status
server/routes/calls.ts:54:    // In production, would end Twilio call
server/routes/pipeline/bulk-operations.ts:2:import { requireAuth } from "../../auth/verifyOnly";
server/services/twilioVoice.ts:8:// Public base URL for Twilio webhooks (configure your prod URL via env)
server/services/twilioVoice.ts:26:  // If Twilio creds aren't set, stub
server/routes/twilio-lookup.ts:2: * Twilio Lookup Routes
server/services/twilioSms.ts:15:  // If Twilio creds aren't set, do a safe stub so UI can proceed.
server/services/twilioSvc.ts:8:  if (!client) throw new Error("Twilio not configured");
server/services/twilioSvc.ts:17:  if (!client) throw new Error("Twilio not configured");
server/routes/twilio-diagnostics.ts:2: * Twilio Comprehensive Diagnostics Test Suite
server/routes/twilio-diagnostics.ts:3: * Tests all Twilio features: SMS, Voice, Verify, Lookup, Webhooks
server/routes/twilio-diagnostics.ts:15:interface TwilioTestResult {
server/routes/twilio-diagnostics.ts:25:  console.log('üîç [TWILIO-DIAGNOSTICS] Starting comprehensive Twilio feature audit...');
server/routes/twilio-diagnostics.ts:27:  const results: TwilioTestResult[] = [];
server/routes/twilio-diagnostics.ts:31:    testTarget: process.env.TEST_PHONE_NUMBER || '+15878881837' // Default Twilio test number
server/routes/twilio-diagnostics.ts:39:        body: 'Test SMS from Staff App Twilio system - Diagnostic Test',
server/routes/twilio-diagnostics.ts:90:    // 3. Twilio Verify (2FA) Test
server/routes/twilio-diagnostics.ts:91:    console.log('üîê [TEST 3] Testing Twilio Verify (OTP)...');
server/routes/twilio-diagnostics.ts:93:      const verification = await twilioClient.verify.v2
server/routes/twilio-diagnostics.ts:102:        feature: 'Twilio Verify (OTP)',
server/routes/twilio-diagnostics.ts:110:        feature: 'Twilio Verify (OTP)',
server/routes/twilio-diagnostics.ts:119:    // 4. Twilio Lookup Test
server/routes/twilio-diagnostics.ts:120:    console.log('üîç [TEST 4] Testing Twilio Lookup...');
server/routes/twilio-diagnostics.ts:127:        feature: 'Twilio Lookup',
server/routes/twilio-diagnostics.ts:138:        feature: 'Twilio Lookup',
server/routes/twilio-diagnostics.ts:186:    console.log('üîß [TEST 6] Checking Advanced Twilio Features...');
server/routes/twilio-diagnostics.ts:195:        notes: 'Twilio SDK supports conferences but not implemented in current system'
server/routes/twilio-diagnostics.ts:208:      'Twilio TaskRouter',
server/routes/twilio-diagnostics.ts:209:      'Twilio Flex',
server/routes/twilio-diagnostics.ts:210:      'Twilio Programmable Chat (deprecated)',
server/routes/twilio-diagnostics.ts:211:      'Twilio Conversations API',
server/routes/twilio-diagnostics.ts:212:      'Twilio Media Streams (voice AI)',
server/routes/twilio-diagnostics.ts:213:      'Twilio Video',
server/routes/twilio-diagnostics.ts:214:      'Twilio Sync'
server/routes/twilio-diagnostics.ts:257:      <Say voice="alice">This is a Twilio diagnostic test call from the Staff Application. The voice calling system is working correctly.</Say>
server/services/twilio.ts:2:import Twilio from "twilio";
server/services/twilio.ts:9:  throw new Error("[TwilioInit] Missing TWILIO_ACCOUNT_SID or TWILIO_AUTH_TOKEN");
server/services/twilio.ts:12:export const twilioClient = Twilio(sid, token);
server/services/twilio.ts:17:  if (!svc) throw new Error("[TwilioInit] Missing TWILIO_VERIFY_SERVICE_SID");
server/routes/marketing/experiments.ts:2:import { requireAuth } from "../../auth/verifyOnly";
server/routes/application-pdf.ts:7:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/application-pdf.ts:563:        <p>üß™ This is a test document to verify PDF creation functionality.</p>
server/routes/marketing/automation.ts:2:import { requireAuth } from "../../auth/verifyOnly";
server/routes/marketing/automation.ts:65:            // Queue SMS (would integrate with Twilio)
server/middleware/rbac.ts:32: * Extract and verify JWT token from request
server/middleware/rbac.ts:57:    const decoded = jwt.verify(token, JWT_SECRET) as any;
server/middleware/rbac.ts:188:      const decoded = jwt.verify(token, JWT_SECRET) as any;
server/routes/integrations-api.ts:71:      name: 'Twilio',
server/routes/integrations-api.ts:77:      features: ['sms', 'voice', 'verify'],
server/routes/integrations-api.ts:287:// Twilio Integration (API key based)
server/routes/integrations-api.ts:294:      error: 'Twilio Account SID and Auth Token are required'
server/routes/integrations-api.ts:301:    message: 'Twilio connected successfully',
server/routes/integrations-api.ts:314:    message: 'Twilio disconnected successfully'
server/middleware/lenderAuth.ts:46:    const decoded = jwt.verify(token, process.env.JWT_SECRET) as any;
server/services/partnerReferralService.ts:7: * Handles incoming calls from dedicated Twilio lines and creates contact cards
server/services/partnerReferralService.ts:11:// Configuration for Twilio number to source mapping
server/services/partnerReferralService.ts:16:  '+17758889999': 'partner_referral', // This will be configured with actual Twilio number
server/services/partnerReferralService.ts:20:  To: string; // Destination Twilio number
server/services/partnerReferralService.ts:22:  CallSid: string; // Twilio Call ID
server/services/partnerReferralService.ts:29: * Process incoming call webhook from Twilio
server/middleware/deletionProtection.ts:28:        const decoded = jwt.verify(token, jwtSecret) as any;
server/middleware/deletionProtection.ts:104:                               req.originalUrl.match(/^\/api\/rbac\/users\/[a-f0-9\-]{36}$/) || 
server/middleware/deletionProtection.ts:105:                               req.originalUrl.match(/^\/api\/rbac\/auth\/users\/[a-f0-9\-]{36}$/) ||
server/middleware/deletionProtection.ts:106:                               req.originalUrl.match(/^\/api\/rbac\/users\/[a-f0-9\-]{36}\/hard-delete$/) ||
server/middleware/deletionProtection.ts:107:                               req.originalUrl.match(/^\/api\/settings\/users\/[a-f0-9\-]{36}$/) ||
server/services/otpService.ts:77:    // Production environment validation - temporarily skip Twilio check
server/services/otpService.ts:79:      console.log('üö® PRODUCTION MODE: Twilio validation temporarily bypassed for debugging');
server/services/otpService.ts:80:      // Skip Twilio validation for now to debug other issues
server/services/otpService.ts:165:    // Production: Use Twilio Verify Service for both generation and delivery
server/services/otpService.ts:175:      const { TwilioVerifyService } = await import('./twilioVerify');
server/services/otpService.ts:176:      const twilioResponse = await TwilioVerifyService.sendOTP(String(user.phone));
server/services/otpService.ts:204:      console.error('[Twilio SMS Error]', error);
server/services/otpService.ts:216:      otp: undefined, // Never return OTP - it's handled by Twilio
server/services/otpService.ts:239:export async function verifyOTP(email: string, providedOTP: string): Promise<{
server/services/otpService.ts:248:    console.log(`üîç [OTP-VERIFY] Using direct OTP verification instead of Twilio Verify API`);
server/routes/documents/quarantine.ts:2:import { requireAuth } from "../../auth/verifyOnly";
server/services/twilioVerify.ts:2: * Twilio Verify Service for 2FA
server/services/twilioVerify.ts:3: * Handles OTP sending and verification using Twilio's Verify API
server/services/twilioVerify.ts:10:const verifySid = process.env.TWILIO_VERIFY_SERVICE_SID;
server/services/twilioVerify.ts:12:// Initialize Twilio client only if all credentials are available
server/services/twilioVerify.ts:17:console.log('[DEBUG] Twilio Configuration Check:', {
server/services/twilioVerify.ts:20:  TWILIO_VERIFY_SERVICE_SID: verifySid ? verifySid.slice(0, 6) + '***' : 'MISSING',
server/services/twilioVerify.ts:24:if (accountSid && authToken && verifySid) {
server/services/twilioVerify.ts:28:    console.log('üîê Twilio Verify service initialized successfully');
server/services/twilioVerify.ts:30:    console.error('‚ùå Failed to initialize Twilio client:', error);
server/services/twilioVerify.ts:36:  if (!verifySid) missing.push('TWILIO_VERIFY_SERVICE_SID');
server/services/twilioVerify.ts:38:  console.warn(`‚ö†Ô∏è Twilio configuration incomplete. Missing: ${missing.join(', ')}`);
server/services/twilioVerify.ts:39:  console.error('‚ùå PRODUCTION OTP WILL FAIL - Missing Twilio credentials');
server/services/twilioVerify.ts:45:  // ChatGPT's explanation: Dev bypasses Twilio, Prod requires valid config
server/services/twilioVerify.ts:47:    console.error('üö® PRODUCTION ALERT: Configure Twilio secrets in Replit deployment');
server/services/twilioVerify.ts:48:    console.error('   üìã Dev works (bypasses Twilio), Prod fails (needs real config)');
server/services/twilioVerify.ts:54:export class TwilioVerifyService {
server/services/twilioVerify.ts:60:      // All environments require proper Twilio configuration
server/services/twilioVerify.ts:63:      // Check if Twilio is properly configured
server/services/twilioVerify.ts:65:        console.error('‚ùå Twilio not configured properly');
server/services/twilioVerify.ts:66:        console.error('[Twilio SMS Error] Missing credentials or configuration');
server/services/twilioVerify.ts:70:          error: 'Failed to send OTP via SMS - Twilio service not available'
server/services/twilioVerify.ts:97:      console.log(`Attempting to send OTP to ${formattedPhone} using service ${verifySid}`);
server/services/twilioVerify.ts:120:      console.error('‚ùå Twilio OTP Generation Error:');
server/services/twilioVerify.ts:125:      console.error('   Verify Service SID:', verifySid);
server/services/twilioVerify.ts:128:      // Specific Twilio error handling
server/services/twilioVerify.ts:141:        error: `OTP service failed: ${error.message || 'Unknown Twilio error'}`
server/services/twilioVerify.ts:149:  static async verifyOTP(phoneNumber: string, code: string): Promise<{ success: boolean; status?: string; error?: string }> {
server/services/twilioVerify.ts:153:      // Always use real Twilio verification - no fallbacks
server/services/twilioVerify.ts:155:        console.error('‚ùå Twilio not configured properly for verification');
server/services/twilioVerify.ts:165:      const verificationCheck = await client.verify.v2
server/services/twilioVerify.ts:166:        .services(verifySid)
server/services/twilioVerify.ts:186:        error: error.message || 'Failed to verify OTP'
server/routes/lender.portal.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/lender.portal.ts:21:    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback_secret') as any;
server/middleware/otpRateLimiter.ts:136:  const ipKey = `otp_verify_ip_${clientIP}`;
server/middleware/otpRateLimiter.ts:170:  const ipKey = `otp_verify_ip_${clientIP}`;
server/middleware/otpRateLimiter.ts:196:  const ipKey = `otp_verify_ip_${clientIP}`;
server/routes/lenders-match.ts:2:import { requireAuth } from "../auth/verifyOnly";
server/middleware/optionalAuth.ts:63:    const decoded = jwt.verify(token, JWT_SECRET) as any;
server/services/smsNotificationService.ts:91:    // Send SMS via Twilio
server/services/smsNotificationService.ts:92:    const smsResult = await sendTwilioSMS(phoneNumber, message);
server/services/smsNotificationService.ts:164: * Send SMS via Twilio
server/services/smsNotificationService.ts:166:async function sendTwilioSMS(to: string, body: string): Promise<{ success: boolean; sid?: string; error?: string }> {
server/services/smsNotificationService.ts:168:    // Check if Twilio credentials are available
server/services/smsNotificationService.ts:174:      console.error('‚ùå [SMS-NOTIFICATION] Missing Twilio credentials');
server/services/smsNotificationService.ts:175:      return { success: false, error: 'Twilio credentials not configured' };
server/services/smsNotificationService.ts:178:    // Import Twilio dynamically
server/services/smsNotificationService.ts:189:    console.log(`‚úÖ [SMS-NOTIFICATION] Twilio SMS sent. SID: ${message.sid}`);
server/services/smsNotificationService.ts:193:    console.error('‚ùå [SMS-NOTIFICATION] Twilio error:', error);
server/services/smsNotificationService.ts:196:      error: error instanceof Error ? error.message : 'Twilio SMS failed' 
server/routes/issues.ts:2:import { requireAuth } from "../auth/verifyOnly";
server/services/lender2FA.ts:3: * Integrates mobile phone field with Twilio for lender authentication
server/services/lender2FA.ts:28:  static async verifyLender2FA(lenderId: string, code: string): Promise<Lender2FAResult> {
server/routes/email.ts:2:import { requireAuth } from "../auth/verifyOnly";
server/middleware/requireAuth.ts:32:    const payload = jwt.verify(token, JWT_SECRET) as any;
server/middleware/twilioWebhookAuth.ts:4:export function requireTwilioSignature(req:Request,res:Response,next:NextFunction){
server/middleware/twilioWebhookAuth.ts:5:  const sig=req.get("X-Twilio-Signature"); 
server/routes/health.ts:118:  // Count data by tenant to verify separation
server/middleware/authMiddleware.ts:37:    const decoded = jwt.verify(token, JWT_SECRET) as any;
server/middleware/authMiddleware.ts:107:      const decoded = jwt.verify(token, JWT_SECRET) as any;
server/routes/crud.ts:116:r.get("/users", scopeByTenant, async (req: TenantRequest, res) => {
server/services/auth/password.ts:3:export async function verifyPassword(pw:string, hash:string|null){ return !!hash && await bcrypt.compare(pw, hash); }
server/routes/voice_calls.ts:10:// Inbound: record entire call; Twilio posts RecordingStatusCallback later.
server/routes/voice_calls.ts:49:// Twilio RecordingStatusCallback -> store recording URL; trigger transcription
server/routes/voice_calls.ts:53:  const recordingUrl = (req.body.RecordingUrl as string) + ".mp3"; // Twilio provides base; add extension
server/middleware/lender.ts:3:import { verifyShareToken } from "../services/lender/jwt";
server/middleware/lender.ts:8:  const data:any = verifyShareToken(token);
server/routes/users-api.ts:26:// GET /api/users - List all users
server/routes/users-api.ts:27:router.get("/users", async (req, res) => {
server/routes/users-api.ts:103:// GET /api/users/me - Get current user
server/routes/users-api.ts:104:router.get("/users/me", async (req, res) => {
server/routes/users-api.ts:151:// GET /api/users/:id - Get user by ID
server/routes/users-api.ts:152:router.get("/users/:id", async (req, res) => {
server/routes/users-api.ts:182:// POST /api/users - Create new user
server/routes/users-api.ts:183:router.post("/users", async (req, res) => {
server/routes/users-api.ts:241:// PATCH /api/users/:id - Partial update user (for status toggles, etc.)
server/routes/users-api.ts:242:router.patch("/users/:id", async (req, res) => {
server/routes/users-api.ts:297:// PUT /api/users/:id - Full update user  
server/routes/users-api.ts:298:router.put("/users/:id", async (req, res) => {
server/routes/users-api.ts:352:// DELETE /api/users/:id - Soft delete user (set inactive)
server/routes/users-api.ts:353:router.delete("/users/:id", async (req, res) => {
server/routes/users-api.ts:376:// DELETE /api/users/:id/hard-delete - Permanently delete user
server/routes/users-api.ts:377:router.delete("/users/:id/hard-delete", async (req, res) => {
server/routes/transcribe.ts:9:// Securely fetch Twilio media
server/routes/transcribe.ts:10:async function fetchTwilioMedia(url: string) {
server/routes/transcribe.ts:76:    // 1) get media from Twilio
server/routes/transcribe.ts:77:    const buf = await fetchTwilioMedia(call.recordingUrl);
server/middleware/authBearer.js:6:  // TODO: verify JWT; attach req.user = { id, role, lenderId?, tenant }
server/middleware/auth.js:23:        const p = jsonwebtoken_1.default.verify(tok, JWT_SECRET);
server/routes/ai_ads.ts:5:import { sign, verify } from "../lib/sign.js";
server/routes/ai_ads.ts:151:  const payload = verify(req.params.token);
server/routes/approvals.ts:73:// Validate Twilio signature (optional in dev)
server/routes/approvals.ts:74:function validateTwilio(req: any): boolean {
server/routes/approvals.ts:92:    if (!validateTwilio(req)) {
server/routes/approvals_sms_inbound.ts:11:// Validate Twilio signature (optional in dev)
server/routes/approvals_sms_inbound.ts:12:function validateTwilio(req: any): boolean {
server/routes/approvals_sms_inbound.ts:30:    if (!validateTwilio(req)) {
server/services/integrations/core.ts:14:export function verifyHmac(raw: string, signature: string, secret: string){
server/config/security.ts:98:      warnings.push('Twilio credentials recommended for production SMS delivery');
server/services/lender/jwt.ts:9:export function verifyShareToken(token: string): { shareId: string; applicationId: string; partnerId: string; perms: string[] } | null {
server/services/lender/jwt.ts:11:    const d:any = jwt.verify(token, secret, { algorithms: ["HS256"] });
server/routes/voice-real.ts:3:const { jwt: TwilioJWT } = twilio;
server/routes/voice-real.ts:28:      return res.json({ ok: false, error: "Twilio credentials not configured" });
server/routes/voice-real.ts:31:    const token = new TwilioJWT.AccessToken(
server/routes/voice-real.ts:35:    const grant = new TwilioJWT.AccessToken.VoiceGrant({ 
server/routes/dialer.ts:91:/* ---- Incoming ring (Twilio webhook or test) -> broadcast ---- */
server/routes/dialer.ts:101:/* Developer test helper (no Twilio needed) */
server/test-crm-twilio-integration.js:2: * CRM Twilio Integration Test Script
server/test-crm-twilio-integration.js:3: * Tests the new Twilio logs endpoints for CRM integration
server/test-crm-twilio-integration.js:18:async function testCrmTwilioEndpoints() {
server/test-crm-twilio-integration.js:19:  console.log('üß™ Testing CRM Twilio Integration Endpoints');
server/test-crm-twilio-integration.js:28:  // Test 1: Get contact Twilio logs
server/test-crm-twilio-integration.js:45:    results.tests.push({ name: 'Contact Twilio logs', status: 'PASS', response: response.status });
server/test-crm-twilio-integration.js:49:    results.tests.push({ name: 'Contact Twilio logs', status: 'FAIL', error: error.message });
server/test-crm-twilio-integration.js:52:  // Test 2: Get contact Twilio stats
server/test-crm-twilio-integration.js:69:    results.tests.push({ name: 'Contact Twilio stats', status: 'PASS', response: response.status });
server/test-crm-twilio-integration.js:73:    results.tests.push({ name: 'Contact Twilio stats', status: 'FAIL', error: error.message });
server/test-crm-twilio-integration.js:103:  // Test 4: Search Twilio logs
server/test-crm-twilio-integration.js:120:    results.tests.push({ name: 'Search Twilio logs', status: 'PASS', response: response.status });
server/test-crm-twilio-integration.js:124:    results.tests.push({ name: 'Search Twilio logs', status: 'FAIL', error: error.message });
server/test-crm-twilio-integration.js:167:    console.log('   ‚úÖ CRM Twilio integration is OPERATIONAL');
server/test-crm-twilio-integration.js:177:testCrmTwilioEndpoints()
server/test-crm-twilio-integration.js:186:export { testCrmTwilioEndpoints };
server/utils/sms.ts:10:let twilioClient: twilio.Twilio | null = null;
server/utils/sms.ts:12:function getTwilioClient(): twilio.Twilio {
server/utils/sms.ts:33:  const client = getTwilioClient();
server/utils/sms.ts:35:  // In development mode, use test phone number for Twilio test mode
server/routes/twilio.verify.ts:1:// server/routes/twilio.verify.ts
server/routes/twilio.verify.ts:4:const hasTwilio = !!process.env.TWILIO_VERIFY_SERVICE_SID && !!process.env.TWILIO_ACCOUNT_SID && !!process.env.TWILIO_AUTH_TOKEN;
server/routes/twilio.verify.ts:21:  // In production, call Twilio Verify here and store returned SID.
server/routes/twilio.verify.ts:22:  return res.json({ ok:true, sid: memory[userId].sid, mode: hasTwilio ? "live" : "safe" });
server/routes/twilio.verify.ts:29:  // In safe mode, accept 000000 only; in live, call Twilio Verify.
server/routes/twilio.verify.ts:30:  const ok = hasTwilio ? true : code === "000000";
server/routes/twilio.verify.ts:35:  try { await req.app.locals.db?.run?.("update users set verify_status = ? where id = ?", [memory[userId].status, userId]); } catch {}
server/utils/hardenedDocumentStorage.ts:53:async function verifyFileIntegrity(filePath: string, expectedChecksum: string): Promise<boolean> {
server/utils/hardenedDocumentStorage.ts:169:    const verifyExists = await fs.access(targetFilePath).then(() => true).catch(() => false);
server/utils/hardenedDocumentStorage.ts:170:    if (!verifyExists) {
server/utils/hardenedDocumentStorage.ts:174:    const verifyChecksum = await verifyFileIntegrity(targetFilePath, originalChecksum);
server/utils/hardenedDocumentStorage.ts:175:    if (!verifyChecksum) {
server/utils/standardAuth.ts:68:export function verifyStandardToken(token: string): StandardTokenPayload {
server/utils/standardAuth.ts:70:    const decoded = jwt.verify(token, JWT_SECRET_SAFE) as any;
server/routes/verify.ts:7:r.post('/api/verify/start', async (req,res)=>{
server/routes/verify.ts:12:  await client.verify.v2.services(process.env.TWILIO_VERIFY_SERVICE_SID!).verifications.create({ to, channel:'sms' });
server/routes/verify.ts:16:r.post('/api/verify/check', async (req,res)=>{
server/routes/verify.ts:20:  const out = await client.verify.v2.services(process.env.TWILIO_VERIFY_SERVICE_SID!).verificationChecks.create({ to, code });
server/utils/jwt.ts:29:export function verifyAuthToken(token: string): TokenPayload {
server/utils/jwt.ts:30:  return jwt.verify(token, JWT_SECRET, {
server/routes/applicationMetadata.ts:14:// Simple test endpoint to verify this router works
server/utils/twilioService.ts:4: * Integrates 6 Twilio products for Staff Application:
server/utils/twilioService.ts:17:// Initialize Twilio client
server/utils/twilioService.ts:35:export function getTwilioPhoneNumberForSilo(silo: 'BF' | 'SLF'): string {
server/utils/twilioService.ts:48:export class TwilioVerifyService {
server/utils/twilioService.ts:53:      const verification = await twilioClient.verify.v2
server/utils/twilioService.ts:80:  static async verifyOTP(phoneNumber: string, code: string) {
server/utils/twilioService.ts:84:      const verificationCheck = await twilioClient.verify.v2
server/utils/twilioService.ts:116:export class TwilioMessagingService {
server/utils/twilioService.ts:119:      const fromNumber = getTwilioPhoneNumberForSilo(silo);
server/utils/twilioService.ts:182:export class TwilioVoiceService {
server/utils/twilioService.ts:185:      const fromNumber = getTwilioPhoneNumberForSilo(silo);
server/utils/twilioService.ts:220:      const fromNumber = getTwilioPhoneNumberForSilo(silo);
server/utils/twilioService.ts:303:export class TwilioEmailService {
server/utils/twilioService.ts:364:export class TwilioNotifyService {
server/utils/twilioService.ts:437:export class TwilioLookupService {
server/utils/twilioService.ts:507:export const TwilioService = {
server/utils/twilioService.ts:508:  Verify: TwilioVerifyService,
server/utils/twilioService.ts:509:  Messaging: TwilioMessagingService,
server/utils/twilioService.ts:510:  Voice: TwilioVoiceService,
server/utils/twilioService.ts:511:  Email: TwilioEmailService,
server/utils/twilioService.ts:512:  Notify: TwilioNotifyService,
server/utils/twilioService.ts:513:  Lookup: TwilioLookupService,
server/utils/twilioService.ts:521:      verify: !!TWILIO_CONFIG.VERIFY_SERVICE_SID,
server/routes/ai-reports.disabled.ts:12:  // For now, allow unauthenticated logging - in production you'd verify client tokens
server/routes/twilio.lookup.ts:7:  // TODO real Twilio Lookup; mock for now:
server/routes/adminReassignment.ts:28:    const decoded = jwt.verify(token, JWT_SECRET) as any;
server/routes/adminReassignment.ts:165:    message: 'This is a test endpoint to verify API availability'
server/utils/s3Test.ts:27:    // Test 2: List bucket contents (to verify permissions)
server/utils/s3Test.ts:98:      guidance = 'General S3 error. Please verify all credentials and permissions.';
server/routes/admin.disabled.ts:16:router.get('/users/stats', async (req, res) => {
server/routes/admin.disabled.ts:42:router.get('/users', async (req, res) => {
server/routes/admin.disabled.ts:112:router.get('/users/:userId', async (req, res) => {
server/routes/admin.disabled.ts:149:router.patch('/users/:userId/status', async (req, res) => {
server/routes/admin.disabled.ts:211:router.get('/users/:userId/sessions', async (req, res) => {
server/routes/admin.disabled.ts:229:router.post('/users/:userId/sessions/:sessionId/revoke', async (req, res) => {
server/routes/admin.disabled.ts:260:router.post('/users/:userId/sessions/revoke-all', async (req, res) => {
server/routes/admin.disabled.ts:288:router.get('/users/:userId/login-attempts', async (req, res) => {
server/routes/admin.disabled.ts:314:router.post('/users/:userId/reset-password', async (req, res) => {
server/routes/admin.disabled.ts:362:router.post('/users', async (req, res) => {
server/routes/admin.disabled.ts:453:router.patch('/users/:userId', async (req, res) => {
server/routes/admin.disabled.ts:513:router.delete('/users/:userId', async (req, res) => {
server/routes/admin.disabled.ts:567:router.get('/users/:userId/audit-log', async (req, res) => {
server/routes/twilio.voice.ts:43:function verifyTwilioSignature(req: any) {
server/routes/twilio.voice.ts:56:  if (!verifyTwilioSignature(req)) {
server/routes/standardizedAuth.ts:147:    const { verifyStandardToken } = await import('../utils/standardAuth');
server/routes/standardizedAuth.ts:148:    const payload = verifyStandardToken(token);
server/utils/documentStorage.ts:201:export async function verifyDocumentOnDisk(filePath: string): Promise<boolean> {
server/routes/publicApi.ts:124:// Simplified test endpoint to verify routing
server/routes/publicApi.ts:867:      // For UUID format, verify application exists
server/routes/rbacSimple.ts:16:// Add a test route to verify the router is working
server/routes/ops.fullAudit.ts:82:        { key:"Twilio Verify-only path live", check: need(["TWILIO_ACCOUNT_SID","TWILIO_AUTH_TOKEN","TWILIO_VERIFY_SERVICE_SID"], "Twilio") },
server/routes/ops.fullAudit.ts:122:        { key:"Twilio env present", check: need(["TWILIO_ACCOUNT_SID","TWILIO_AUTH_TOKEN","TWILIO_VERIFY_SERVICE_SID"], "Twilio") },
server/routes/auth.mode.ts:17:      "/api/auth/verify/send",
server/routes/auth.mode.ts:18:      "/api/auth/verify/check",
server/routes/auth.test.ts:51:    const payload = jwt.verify(token, JWT_SECRET) as any;
server/utils/secureS3Client.ts:95: * This function helps verify that direct S3 URLs return 403 Forbidden
server/routes/documentReassignment.ts:29:      decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;
server/routes/ops.healthFull.ts:48:  // 3) Twilio Verify (optional: WARN on missing creds)
server/routes/ops.healthFull.ts:49:  out.push(await tryCatch("Twilio Verify creds", async()=>{
server/routes/ops.healthFull.ts:52:    const rsp = await fetch(`https://verify.twilio.com/v2/Services/${vsid}`,{
server/routes/ops.healthFull.ts:55:    if (!rsp.ok) throw new Error(`Twilio status ${rsp.status}`);
server/utils/fileVerificationService.ts:15:export async function verifyUploadedFiles(): Promise<{
server/utils/fileVerificationService.ts:131:export async function verifySingleDocument(documentId: string): Promise<{
server/routes/scheduling.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/utils/uploadPersistenceValidator.ts:47:    // Step 3: Read file and verify checksum
server/routes/o365.todo.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/debugSMS.ts:3: * Temporary route to test Twilio SMS functionality
server/routes/debugSMS.ts:7:import { TwilioService } from '../utils/twilioService';
server/routes/debugSMS.ts:12: * POST /api/debug/send-test-sms - Send test SMS to verify Twilio setup
server/routes/debugSMS.ts:17:    console.log('üì± [DEBUG SMS] Twilio Account SID:', process.env.TWILIO_ACCOUNT_SID ? 'SET' : 'MISSING');
server/routes/debugSMS.ts:18:    console.log('üîë [DEBUG SMS] Twilio Auth Token:', process.env.TWILIO_AUTH_TOKEN ? 'SET' : 'MISSING');
server/routes/debugSMS.ts:19:    console.log('üìû [DEBUG SMS] Twilio Phone Number:', process.env.TWILIO_PHONE_NUMBER || 'MISSING');
server/routes/debugSMS.ts:22:    const testMessage = 'üîê Test SMS from Staff App - Twilio is working!';
server/routes/debugSMS.ts:26:    const result = await TwilioService.MessagingService.sendSMS(testPhoneNumber, testMessage);
server/routes/debugSMS.ts:51: * GET /api/debug/twilio-config - Check Twilio configuration
server/routes/debugSMS.ts:71:      error: 'Failed to check Twilio configuration',
server/utils/awsCredentialValidator.ts:168:    result.guidance = 'Please verify your AWS credentials and try again';
server/routes/marketing.programmatic.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/documentManagement.ts:436:    // For local files, verify checksum if available
server/utils/environmentValidator.ts:25:  { name: 'TWILIO_ACCOUNT_SID', required: false, description: 'Twilio account SID', category: 'external' },
server/utils/environmentValidator.ts:26:  { name: 'TWILIO_AUTH_TOKEN', required: false, description: 'Twilio auth token', category: 'external' },
server/utils/environmentValidator.ts:27:  { name: 'TWILIO_VERIFY_SERVICE_SID', required: false, description: 'Twilio verify service SID', category: 'external' },
server/routes/marketing.audience.ts:5:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/marketing.budget.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/utils/securityValidator.ts:86:    const payload = jwt.verify(token, JWT_SECRET);
server/routes/ai.ocr.ui.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/crmContactCard.ts:3: * Implements timeline-centric contact management with Twilio and Microsoft Graph integration
server/routes/communicationCalls.ts:3:// Note: Twilio service would be imported here when fully configured
server/routes/communicationCalls.ts:25:    // Simulate call for now (actual Twilio integration would go here)
server/routes/coverage.harness.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/templates.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/communication.ts:120:    // For now, return mock data - integrate with Twilio call logs later
server/routes/communication.ts:166:    // For now, return mock data - integrate with Twilio call logs later
server/routes/pipeline.bulk.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/rbacUsers.ts:35: * GET /api/rbac/users - List all users with pagination and search
server/routes/rbacUsers.ts:140: * POST /api/rbac/users - Create new user
server/routes/rbacUsers.ts:258: * PATCH /api/rbac/users/:id - Update user
server/routes/rbacUsers.ts:433: * DELETE /api/rbac/users/:id - Deactivate user (soft delete)
server/routes/rbacUsers.ts:511: * DELETE /api/rbac/users/:id/hard-delete - Permanently delete user (ADMIN ONLY)
server/routes/rbacUsers.ts:627: * GET /api/rbac/users/roles - Get available roles
server/routes/audit.export.ts:5:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/rbac.ts:15:// Add a test route to verify the router is working
server/routes/rbac.ts:27:router.use('/users', rbacUsersRouter);
server/routes/rbac.ts:30:console.log('üîß [RBAC] All routes mounted: /auth, /users, /lender-products, /test');
server/routes/o365.mailbox.ts:3:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/conference.ts:13:function verify(req:any, path:string) {
server/routes/conference.ts:21:  if (!verify(req, '/api/conference/enter')) return res.status(403).send('Forbidden');
server/routes/conference.ts:29:  if (!verify(req, '/api/conference/role')) return res.status(403).send('Forbidden');
server/routes/marketing.csv.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/reports.pdf.ts:5:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/twilio.disabled.ts:4: * Staff Application endpoints for all Twilio communications:
server/routes/twilio.disabled.ts:16:import { TwilioService, getTwilioPhoneNumberForSilo } from '../utils/twilioService.js';
server/routes/twilio.disabled.ts:26:    const health = await TwilioService.healthCheck();
server/routes/twilio.disabled.ts:43:    const config = TwilioService.getConfig();
server/routes/twilio.disabled.ts:50:        verifyConfigured: !!config.VERIFY_SERVICE_SID,
server/routes/twilio.disabled.ts:67:router.post('/verify/request-otp', async (req, res) => {
server/routes/twilio.disabled.ts:80:    const result = await TwilioService.Verify.requestOTP(phoneNumber, channel);
server/routes/twilio.disabled.ts:106:router.post('/verify/check-otp', async (req, res) => {
server/routes/twilio.disabled.ts:119:    const result = await TwilioService.Verify.verifyOTP(phoneNumber, code);
server/routes/twilio.disabled.ts:161:    const result = await TwilioService.Messaging.sendSMS(to, message, mediaUrl);
server/routes/twilio.disabled.ts:194:    const result = await TwilioService.Messaging.getMessageStatus(messageSid);
server/routes/twilio.disabled.ts:234:    const twiml = TwilioService.Voice.generateTwiML(message, gatherInput);
server/routes/twilio.disabled.ts:243:    const result = await TwilioService.Voice.makeCall(to, twimlUrl);
server/routes/twilio.disabled.ts:274:    const twiml = TwilioService.Voice.generateTwiML(message, false);
server/routes/twilio.disabled.ts:302:    const twiml = TwilioService.Voice.generateTwiML(response, false);
server/routes/twilio.disabled.ts:318:    const result = await TwilioService.Voice.getCallRecordings(callSid);
server/routes/twilio.disabled.ts:364:    const result = await TwilioService.Email.sendEmail(to, subject, htmlContent, templateId, dynamicData);
server/routes/twilio.disabled.ts:413:    const result = await TwilioService.Notify.sendNotification(identities, message, title);
server/routes/twilio.disabled.ts:451:    const result = await TwilioService.Notify.createBinding(identity, bindingType, address);
server/routes/twilio.disabled.ts:494:    const result = await TwilioService.Lookup.validatePhone(phoneNumber, includeCarrier === 'true');
server/routes/twilio.disabled.ts:530:    const result = await TwilioService.Lookup.checkLineType(phoneNumber);
server/routes/twilio.disabled.ts:631:    const phoneNumber = getTwilioPhoneNumberForSilo(silo.toUpperCase() as 'BF' | 'SLF');
server/routes/passwordRecovery.ts:139:      decoded = jwt.verify(token, JWT_SECRET);
server/routes/passwordRecovery.ts:154:    // Find user and verify reset token
server/routes/passwordRecovery.ts:256:      decoded = jwt.verify(token, JWT_SECRET);
server/routes/webhooks.twilio.ts:3:import { verifyTwilioSignature } from "../services/signatures.js";
server/routes/webhooks.twilio.ts:9:  const ok = verifyTwilioSignature({
server/routes/webhooks.twilio.ts:21:  const ok = verifyTwilioSignature({
server/routes/twilioDebug.ts:2: * Twilio Environment Diagnostic Endpoint
server/routes/twilioDebug.ts:3: * Provides real-time Twilio configuration status for production debugging
server/routes/twilioDebug.ts:11:// Diagnostic endpoint to check Twilio configuration
server/routes/twilioDebug.ts:15:  const verifyServiceSid = process.env.TWILIO_VERIFY_SERVICE_SID;
server/routes/twilioDebug.ts:41:      verifyServiceSid: verifyServiceSid ? {
server/routes/twilioDebug.ts:43:        value: verifyServiceSid.slice(0, 6) + '***',
server/routes/twilioDebug.ts:44:        length: verifyServiceSid.length
server/routes/twilioDebug.ts:57:    configuration.twilio.verifyServiceSid.configured
server/routes/twilioDebug.ts:69:  // Test Twilio connection if fully configured
server/routes/twilioDebug.ts:73:      const { TwilioVerifyService } = await import('../services/twilioVerify');
server/routes/twilioDebug.ts:99:    action: configuredCount < 3 ? 'Configure missing Twilio secrets in production deployment' : 'Twilio fully configured',
server/routes/twilioDebug.ts:111:    service: 'Twilio Configuration Diagnostic',
server/routes/twilioDebug.ts:120:        'Missing Twilio environment variables',
server/routes/twilioDebug.ts:131:      'Twilio configuration is complete',
server/routes/twilioDebug.ts:164:    const { TwilioVerifyService } = await import('../services/twilioVerify');
server/routes/twilioDebug.ts:175:    const result = await TwilioVerifyService.sendOTP(phone);
server/routes/twilioDebug.ts:179:      service: 'Twilio OTP Test',
server/routes/marketing.costs.ts:2:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/templateSend.ts:40:      throw new Error("Refusing to send to Twilio test number in production");
server/routes/schedule.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/twilioContactCard.ts:2: * Twilio Integration for CRM Contact Card
server/routes/twilioContactCard.ts:15:// Initialize Twilio client
server/routes/twilioContactCard.ts:41:    // Create call using Twilio
server/routes/twilioContactCard.ts:216:    // Send SMS using Twilio
server/routes/twilioContactCard.ts:434:    service: 'Twilio Contact Card Integration',
server/routes/settingsUsers.ts:45: * GET /api/settings/users - List all users
server/routes/settingsUsers.ts:84: * POST /api/settings/users - Create new user
server/routes/settingsUsers.ts:165: * PATCH /api/settings/users/:id - Update user
server/routes/settingsUsers.ts:231: * DELETE /api/settings/users/:id - Delete user
server/routes/views.ts:4:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/smsStageNotifications.ts:13:// Initialize Twilio client
server/routes/smsStageNotifications.ts:74:    // Send SMS via Twilio using dedicated number
server/routes/analytics.ga4.ts:3:import { requireAuth } from "../auth/verifyOnly.js";
server/routes/dbdebug.ts:1:// Debug route to verify tenant isolation system
server/routes/contacts.deals.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/verify-only.ts:45:    const verifySid = process.env.TWILIO_VERIFY_SERVICE_SID;
server/routes/verify-only.ts:46:    if(!verifySid) return res.status(500).json({error:"verify_service_missing"});
server/routes/verify-only.ts:48:    const r = await client.verify.v2.services(verifySid).verifications.create({ to: phone, channel: "sms" });
server/routes/verify-only.ts:59:    const verifySid = process.env.TWILIO_VERIFY_SERVICE_SID;
server/routes/verify-only.ts:60:    if(!verifySid) return res.status(500).json({error:"verify_service_missing"});
server/routes/verify-only.ts:62:    const r = await client.verify.v2.services(verifySid).verificationChecks.create({ to: phone, code });
server/routes/integrations.ts:48:        // Test Twilio connection
server/routes/integrations.ts:49:        res.json({ success: true, message: "Twilio connection successful" });
server/routes/marketing.linkedin.ts:3:import { requireAuth } from "../auth/verifyOnly";
server/routes/s3ProductionTest.ts:4: * Test endpoints to verify S3 integration works correctly
server/routes/marketing.reports.ts:5:import { requireAuth } from "../auth/verifyOnly";
server/routes/s3Management.ts:74:        ? 'AWS Access Key ID is invalid. Please verify your credentials.' 
server/routes/s3Management.ts:76:        ? 'AWS Secret Access Key is invalid. Please verify your credentials.'
server/routes/s3Management.ts:79:        : 'General S3 error. Please verify all credentials and permissions.'
server/routes/s3Management.ts:113:        ? 'AWS Access Key ID is invalid. Please verify your credentials.' 
server/routes/s3Management.ts:115:        ? 'AWS Secret Access Key is invalid. Please verify your credentials.'
server/routes/s3Management.ts:116:        : 'General S3 error. Please verify all credentials and permissions.'
server/routes/marketing.sequences.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/inbox.ts:2:import { requireAuth } from "../auth/verifyOnly";
server/routes/ops.status.ts:31:    // Twilio: lightweight auth check
server/routes/rbac-users.ts:7:r.get("/auth/users", async (req, res) => {
server/routes/rbac-users.ts:75:r.patch("/auth/users/:id", async (req, res) => {
server/routes/rbac-users.ts:122:r.delete("/auth/users/:id", async (req, res) => {
server/routes/s3BucketTest.ts:36:      // Test 2: List objects to verify access
server/routes/o365.meeting.ts:3:import { requireAuth } from "../auth/verifyOnly";
server/routes/contacts.notes.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/lender2FA.ts:48:router.post('/verify-2fa/:lenderId', async (req: any, res: any) => {
server/routes/lender2FA.ts:60:    const result = await Lender2FAService.verifyLender2FA(lenderId, code);
server/routes/lender2FA.ts:78:      error: 'Failed to verify 2FA code'
server/routes/admin.system-status.ts:2:import { requireAuth } from "../auth/verifyOnly";
server/routes/admin.system-status.ts:62:      'Twilio': !!process.env.TWILIO_ACCOUNT_SID,
server/routes/admin.system-status.ts:95:      'Twilio Voice': '/webhooks/twilio/voice',
server/routes/admin.system-status.ts:96:      'Twilio SMS': '/webhooks/twilio/sms',
server/routes/userManagement.ts:20: * POST /api/users - Create user with optional temporary password
server/routes/userManagement.ts:116: * PATCH /api/users/:id - Update user with optional temporary password
server/routes/userManagement.ts:205: * GET /api/users - List all users with filtering (Admin only)
server/routes/userManagement.ts:263: * DELETE /api/users/:id - Delete user (Admin only)
server/routes/userManagement.ts:321: * POST /api/users/password-reset - Initiate password reset
server/routes/userManagement.ts:393: * POST /api/users/password-reset/verify - Complete password reset
server/routes/userManagement.ts:395:router.post('/password-reset/verify', async (req: Request, res: Response) => {
server/routes/tasks.todo.ts:3:import { requireAuth } from "../auth/verifyOnly";
server/routes/appDetail.ts:138:// 2c) Call (Twilio) + record activity
server/routes/appDetail.ts:162:// 2d) SMS (Twilio) + record activity
server/routes/realtime.ts:3:import { requireAuth } from "../auth/verifyOnly";
server/routes/canonicalAuth.ts:5:import { verifyAuthToken, signAuthToken } from '../utils/jwt';
server/routes/canonicalAuth.ts:103:    const decoded = verifyAuthToken(authCookie);
server/routes/twilioTesting.disabled.ts:4: * Comprehensive test suite for all Twilio services:
server/routes/twilioTesting.disabled.ts:14:import { TwilioService } from '../utils/twilioService.js';
server/routes/twilioTesting.disabled.ts:26:    const health = await TwilioService.healthCheck();
server/routes/twilioTesting.disabled.ts:27:    const config = TwilioService.getConfig();
server/routes/twilioTesting.disabled.ts:33:        verify: {
server/routes/twilioTesting.disabled.ts:81:router.get('/test-verify', async (req, res) => {
server/routes/twilioTesting.disabled.ts:83:    const config = TwilioService.getConfig();
server/routes/twilioTesting.disabled.ts:87:        service: 'verify',
server/routes/twilioTesting.disabled.ts:95:      service: 'verify',
server/routes/twilioTesting.disabled.ts:100:        'POST /api/twilio/verify/request-otp',
server/routes/twilioTesting.disabled.ts:101:        'POST /api/twilio/verify/check-otp'
server/routes/twilioTesting.disabled.ts:107:      service: 'verify',
server/routes/twilioTesting.disabled.ts:116:    const config = TwilioService.getConfig();
server/routes/twilioTesting.disabled.ts:150:    const config = TwilioService.getConfig();
server/routes/twilioTesting.disabled.ts:185:    const config = TwilioService.getConfig();
server/routes/twilioTesting.disabled.ts:218:    const config = TwilioService.getConfig();
server/routes/twilioTesting.disabled.ts:301:        const lookupResult = await TwilioService.Lookup.validatePhone(testPhone);
server/routes/twilioTesting.disabled.ts:323:    if (testEmail && TwilioService.getConfig().SENDGRID_API_KEY) {
server/routes/twilioTesting.disabled.ts:326:        const emailResult = await TwilioService.Email.sendEmail(
server/routes/twilioTesting.disabled.ts:328:          'Twilio Integration Test',
server/routes/twilioTesting.disabled.ts:329:          '<html><body><h2>Test Email</h2><p>This is a test email from the Twilio integration test suite.</p></body></html>'
server/routes/twilioTesting.disabled.ts:383:      message: 'Sample API requests for Twilio services',
server/routes/twilioTesting.disabled.ts:385:        verify: {
server/routes/twilioTesting.disabled.ts:388:            url: `${baseUrl}/api/twilio/verify/request-otp`,
server/routes/twilioTesting.disabled.ts:396:            url: `${baseUrl}/api/twilio/verify/check-otp`,
server/routes/ops.coverage.ts:6:    { area:"Auth", routes:["/auth/request-otp","/auth/verify-otp"] },
server/routes/twilioStatus.ts:15:// Twilio delivery status webhook
server/routes/twilioStatus.ts:58:    res.sendStatus(204); // Always return 204 to Twilio
server/routes/settings-lite.ts:25:r.get("/users", (_req,res)=>{ const d=load(); res.json(d.users); });
server/routes/settings-lite.ts:26:r.post("/users", (req,res)=>{ const d=load(); const {email,name} = req.body||{}; if(!email) return res.status(400).json({error:"email required"});
server/routes/settings-lite.ts:30:r.patch("/users/:id", (req,res)=>{ const d=load(); const i=d.users.findIndex((x:User)=>x.id===req.params.id);
server/routes/settings-lite.ts:34:r.delete("/users/:id", (req,res)=>{ const d=load(); const i=d.users.findIndex((x:User)=>x.id===req.params.id);
server/routes/settingsMem.ts:59:  r.get("/users", (_req, res) => {
server/routes/settingsMem.ts:63:  r.post("/users", requireAny(["admin","manager"]), (req, res) => {
server/routes/settingsMem.ts:73:  r.patch("/users/:id", requireAny(["admin","manager"]), (req, res) => {
server/routes/settingsMem.ts:88:  r.delete("/users/:id", requireAny(["admin"]), (req, res) => {
server/routes/training.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/twilio-lite.ts:4:/** POST /api/twilio/verify/request  { phone } */
server/routes/twilio-lite.ts:5:router.post("/verify/request", (req, res) => {
server/routes/twilio-lite.ts:8:  // TODO: integrate Twilio Verify ‚Äî this is a stub to unblock UI
server/routes/twilio-lite.ts:12:/** POST /api/twilio/verify/check  { phone, code } */
server/routes/twilio-lite.ts:13:router.post("/verify/check", (req, res) => {
server/routes/twilio-lite.ts:30:  // TODO: integrate Twilio Notify; stub success
server/routes/users-db.ts:8:// GET /api/users - List all users from database
server/routes/users-db.ts:57:// GET /api/users/:id - Get single user
server/routes/users-db.ts:101:// POST /api/users - Create new user
server/routes/users-db.ts:143:// PATCH /api/users/:id - Update user
server/routes/users-db.ts:185:// DELETE /api/users/:id - Delete user (soft delete)
server/routes/crm.ts:4:import { requireAuth } from '../auth/verifyOnly';
server/routes/crm.ts:9:// Mount Twilio logs routes for CRM integration
server/routes/settings.ts:35:r.get("/users", (_req,res)=>{ res.json(loadDb().users); });
server/routes/settings.ts:37:r.post("/users", requireAnyRole(["admin","manager"]), (req,res)=>{
server/routes/settings.ts:47:r.patch("/users/:id", requireAnyRole(["admin","manager"]), (req,res)=>{
server/routes/settings.ts:56:r.delete("/users/:id", requireAdmin, (req,res)=>{
server/routes/comms-calls.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/comms-templates.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/documents-versioning.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/feature-test.ts:4:import { requireAuth } from "../auth/verifyOnly";
server/routes/auth.verify.ts:1:import { createVerifyRouter } from "../auth/verifyOnly";
server/routes/twilio-health.ts:12:      verify: !!process.env.TWILIO_VERIFY_SERVICE_SID, 
server/routes/pipeline.stage.ts:2:import { requireAuth } from "../auth/verifyOnly";
