server/boot.ts:45:  app.use(requestId());
server/boot.ts:51:  app.use(express.json({ limit: '50mb' }));
server/boot.ts:52:  app.use(express.urlencoded({ extended: true, limit: '50mb' }));
server/boot.ts:55:  app.use(diagProvenance());
server/boot.ts:58:  app.use(healthRoutes());
server/boot.ts:63:    app.use("/", simpleTest);
server/boot.ts:68:  app.use(catalogExport);
server/boot.ts:74:    app.use("/api/public", publicApplications);
server/boot.ts:81:    app.use("/api/public/chat", chatRoutes);
server/boot.ts:88:    app.use(googleAds);
server/boot.ts:95:    app.use(catalogDedupe);
server/boot.ts:103:    app.use(rawProductsFallback);
server/boot.ts:111:    app.use(routeDump);
server/boot.ts:119:    app.use(pushProductsRouter);
server/boot.ts:127:    app.use(geoCheck);
server/boot.ts:135:  //   app.use(v1Parity);
server/boot.ts:143:    app.use(pushProducts);
server/boot.ts:151:    app.use(catalogSanity);
server/boot.ts:159:  //   app.use(lenderProductsShim);
server/boot.ts:184:  app.use("/assets", express.static(path.join(clientDir, "assets")));
server/boot.ts:185:  app.use("/brand", express.static(path.join(clientDir, "brand")));
server/boot.ts:200:  app.use((req, res, next) => {
server/boot.ts:214:  app.use(cookieParser());
server/boot.ts:220:  app.use(
server/boot.ts:235:  app.use(express.json({ limit: "50mb" }));
server/boot.ts:236:  app.use(express.urlencoded({ extended: true, limit: "50mb" }));
server/boot.ts:244:    app.use("/api/applications/validate-intake", requireSharedToken, applicationsValidateRouter());
server/boot.ts:253:  //   app.use("/api", appValidate);
server/boot.ts:261:    app.use(appSubmit);
server/boot.ts:269:    app.use(simpleAppCreate);
server/boot.ts:277:    app.use(v1AppDocs);
server/boot.ts:285:    app.use(documentWorkflow);
server/boot.ts:294:    app.use("/api/uploads", uploadRoutes);
server/boot.ts:323:    app.use("/api/v1/applications/validate-intake", requireSharedToken, applicationsValidateRouter());
server/boot.ts:335:    app.use(srcApiMount);
server/boot.ts:343:    app.use("/api", alignedApiRoutes);
server/boot.ts:351:    app.use("/public/api", alignedApiRoutesPublic);
server/boot.ts:359:    app.use("/api/public", publicApplications);
server/boot.ts:368:  app.use(attachUserIfPresent);
server/boot.ts:373:    app.use("/api/applications", applicationsRouter);
server/boot.ts:381:    app.use("/api", documentsApiRouter);
server/boot.ts:389:  //   app.use(v1ProductsCrud);
server/boot.ts:397:    app.use("/api", lendersApiRouter);
server/boot.ts:405:  app.use("/api", (req, res, next) => {
server/boot.ts:425:  app.use("/api", userManagementRouter);
server/boot.ts:426:  app.use("/api", crmDynamicRouter);
server/boot.ts:427:  app.use("/api", catalogRouter);
server/boot.ts:428:  app.use("/api", catalogSanityRouter);
server/boot.ts:433:    app.use("/api/contacts", contactsRouter);
server/boot.ts:441:    app.use("/api", dashboardRouter);
server/boot.ts:446:    app.use("/api/voice", voiceRouter);
server/boot.ts:452:    app.use("/api", diagDupes);
server/boot.ts:457:    app.use("/api/contacts", contactsDedup);
server/boot.ts:462:    app.use("/api/admin", duplicateOverride);
server/boot.ts:469:    app.use("/api", usersRouter);
server/boot.ts:478:    app.use(adminUsersRouter);  // Admin routes already include /api/admin prefix
server/boot.ts:486:    app.use("/api", applicationsRouter);
server/boot.ts:500:    app.use("/api", staffContactsRouter);
server/boot.ts:506:    app.use("/api/staff", staffLenderProductsRouter);
server/boot.ts:514:    app.use("/api", dashboardRouter);
server/boot.ts:519:    app.use("/api", analyticsRouter);
server/boot.ts:524:    app.use("/api", applicationDetailRouter);
server/boot.ts:529:    app.use("/api", dialer);
server/boot.ts:534:    app.use("/api", marketingRouter);
server/boot.ts:539:    app.use("/api", aiHelpersRouter);
server/boot.ts:546:    app.use("/api", slfContactsRouter);
server/boot.ts:551:    app.use("/api", voiceRouter);
server/boot.ts:556:    app.use("/api", notificationsRouter);
server/boot.ts:561:    app.use("/api/pipeline", pipelineRouter);
server/boot.ts:569:    app.use("/api", hubspotRouter);
server/boot.ts:574:    app.use("/api", globalSearchRouter);
server/boot.ts:579:    app.use("/api", billingRouter);
server/boot.ts:584:    app.use("/api", featureFlagsRouter);
server/boot.ts:589:    app.use("/api", buildGuardRouter);
server/boot.ts:595:    app.use(adminCatalog);
server/index.ts:18:app.use((req, res, next) => { 
server/index.ts:27:app.use(cors(corsOptions));
server/index.ts:38:app.use("/api/v1/products", requireSharedToken, productsV1Router());
server/index.ts:39:app.use("/api/_int/state", requireSharedToken, stateRouter());
server/index.ts:40:app.use("/api/lenders", requireSharedToken, lendersRouter());
server/index.ts:41:app.use("/api/required-docs", requireSharedToken, requiredDocsDynamicRouter());
server/api/analytics/recommendationLogger.ts:12:router.post('/recommendation-log', async (req, res) => {
server/api/analytics/recommendationLogger.ts:57:router.get('/recommendation-logs/:applicantId', async (req, res) => {
server/api/analytics/recommendationLogger.ts:126:router.get('/recommendation-dashboard', async (req, res) => {
server/static-nocache.mjs:6:  app.use((req,res,next)=>{
server/static-nocache.mjs:14:  app.use(express.static(pub, { maxAge: "1d", extensions: ["html"] }));
server/routes/documentUpload.ts:43:router.post('/public/applications/:applicationId/documents', upload.single('document'), async (req, res) => {
server/routes/documentUpload.ts:146:router.get('/public/applications/:applicationId/documents', async (req, res) => {
server/routes/communicationCenter.ts:25:router.get('/sms', async (req, res) => {
server/routes/communicationCenter.ts:71:router.get('/sms/:threadId', async (req, res) => {
server/routes/communicationCenter.ts:113:router.post('/sms/send', async (req, res) => {
server/routes/communicationCenter.ts:184:router.get('/sms/messages', async (req, res) => {
server/routes/communicationCenter.ts:237:router.get('/calls', async (req, res) => {
server/routes/communicationCenter.ts:290:router.post('/voice/call', async (req, res) => {
server/routes/communicationCenter.ts:367:router.get('/voice/calls', async (req, res) => {
server/routes/communicationCenter.ts:421:router.post('/voice/twiml/voicemail', (req, res) => {
server/routes/communicationCenter.ts:433:router.post('/voice/transcribe', async (req, res) => {
server/routes/communicationCenter.ts:460:router.post('/webhooks/inbound-sms', async (req, res) => {
server/routes/communicationCenter.ts:505:router.post('/webhooks/inbound-call', async (req, res) => {
server/routes/communicationCenter.ts:559:router.post('/webhooks/sms-status', async (req, res) => {
server/routes/communicationCenter.ts:581:router.post('/webhooks/call-events', async (req, res) => {
server/routes/communicationCenter.ts:606:router.get('/templates', async (req, res) => {
server/routes/communicationCenter.ts:654:router.get('/health', async (req, res) => {
server/replitAuth.ts:36:  app.use(getSession());
server/routes/documentAuditApi.ts:18:router.get('/documents/:documentId/logs', async (req, res) => {
server/routes/documentAuditApi.ts:46:router.get('/documents/orphaned', async (req, res) => {
server/routes/documentAuditApi.ts:73:router.get('/uploads/recent', async (req, res) => {
server/routes/documentAuditApi.ts:136:router.post('/recovery/attempt/:documentId', async (req, res) => {
server/routes/documentReliabilityPhase3.ts:58:router.get('/validate/:documentId', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:81:router.post('/validate/batch', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:115:router.get('/versions/:documentId', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:137:router.post('/versions/:documentId/upload', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:188:router.post('/versions/:documentId/restore/:versionNumber', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:224:router.post('/versions/:documentId/cleanup', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:254:router.get('/recovery-events/:documentId?', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:300:router.get('/retry-queue', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:321:router.post('/retry-queue/process', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:343:router.post('/retry-queue/:queueId/retry', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:372:router.post('/retry-queue/clear-completed', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:400:router.get('/health/report', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:422:router.get('/health/application/:applicationId', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:445:router.get('/health/report/export', async (req: any, res: any) => {
server/routes/documentReliabilityPhase3.ts:470:router.post('/preview-status/:documentId', async (req: any, res: any) => {
server/routes/documentCleanup.ts:11:router.post('/remove-all', async (req, res) => {
server/routes/documentCleanup.ts:97:router.get('/status', async (req, res) => {
server/boot.js.DISABLED:22:app.use((0, cookie_parser_1.default)());
server/boot.js.DISABLED:23:app.use(express_1.default.json());
server/boot.js.DISABLED:24:app.use((0, cors_1.default)({ origin: true, credentials: true }));
server/routes/fileVerification.ts:19:router.get('/status', async (req, res) => {
server/routes/fileVerification.ts:53:router.get('/document/:id', async (req, res) => {
server/routes/fileVerification.ts:81:router.post('/repair', async (req, res) => {
server/routes/documentUploadFixed.ts:42:router.post('/public/applications/:applicationId/documents', upload.single('document'), async (req, res) => {
server/routes/documentUploadFixed.ts:150:router.get('/public/applications/:applicationId/documents', async (req, res) => {
server/app.ts:9:app.use(cors());
server/app.ts:10:app.use(express.json({ limit: '50mb' }));
server/app.ts:11:app.use(express.urlencoded({ extended: true, limit: '50mb' }));
server/boot-clean.ts:12:  app.use(p, r as any);
server/boot-clean.ts:60:  // app.use("/assets", express.static(path.join(CLIENT_DIR, "assets"), { immutable: true, maxAge: "1y" }));
server/boot-clean.ts:61:  // app.use("/favicon.ico", express.static(path.join(CLIENT_DIR, "favicon.ico"), { maxAge: "1d" }));
server/boot-clean.ts:63:  app.use((req, res, next) => {
server/boot-clean.ts:145:app.use((err: any, _req: any, res: any, _next: any) => {
server/routes/api-applications-aligned.ts:49:router.post("/applications", async (req: Request, res: Response) => {
server/routes/api-applications-aligned.ts:174:router.get("/applications/list", async (req: Request, res: Response) => {
server/routes/api-applications-aligned.ts:226:router.get("/applications/health", async (req: Request, res: Response) => {
server/routes/api-applications-aligned.ts:247:router.get("/applications/:id", async (req: Request, res: Response) => {
server/routes/api-applications-aligned.ts:316:router.post("/applications/:id/documents/upload", upload.single("file"), async (req: Request, res: Response) => {
server/routes/staff-verification.ts:12:router.get("/db-status/:applicationId", async (req, res) => {
server/routes/applications.ts:14:router.get("/", async (req, res) => {
server/routes/applications.ts:34:router.get("/health", async (req, res) => {
server/routes/applications.ts:84:router.post("/", async (req, res) => {
server/routes/applications.ts:146:router.post("/:id/documents", upload.single('document'), async (req, res) => {
server/routes/applications.ts:223:router.post("/:id/submit", async (req, res) => {
server/routes/applications.ts:270:router.get("/list", async (req, res) => {
server/routes/applications.ts:290:router.get("/:id", async (req, res) => {
server/routes/applications.ts:317:router.post("/legacy", async (req, res) => {
server/routes/applications.ts:362:router.post('/validate', async (req, res) => {
server/routes/applications.ts:390:router.post('/submit', async (req, res) => {
server/routes/staffLenderProducts.ts:17:router.get('/lender-products', async (req: Request, res: Response) => {
server/routes/staffLenderProducts.ts:51:router.patch('/:id', async (req: Request, res: Response) => {
server/routes/bulletproof.ts:18:router.get('/health', async (req, res) => {
server/routes/bulletproof.ts:82:router.post('/audit', async (req, res) => {
server/spa-serve.ts:12:  app.use(require("express").static(FRONTEND_DIST, { immutable:true, maxAge:"1y" }));
server/routes/awsCredentialCheck.ts:7:router.get('/validate-credentials', async (req, res) => {
server/routes/autoRestore.ts:11:router.post('/restore-orphaned/:applicationId', async (req, res) => {
server/routes/autoRecovery.ts:16:router.post('/trigger-detection', async (req, res) => {
server/routes/autoRecovery.ts:56:router.get('/application/:id/missing', async (req, res) => {
server/routes/autoRecovery.ts:82:router.get('/stats', async (req, res) => {
server/routes/autoRecovery.ts:105:router.post('/log-recovery', async (req, res) => {
server/routes/autoRecovery.ts:158:router.get('/validate/:documentId', async (req, res) => {
server/routes/autoRecovery.ts:182:router.get('/validate/application/:id', async (req, res) => {
server/routes/autoRecovery.ts:207:router.get('/validate/all', async (req, res) => {
server/routes/autoRecovery.ts:230:router.post('/run-complete-recovery/:applicationId', async (req, res) => {
server/routes/autoRecovery.ts:287:router.get('/status', async (req, res) => {
server/routes/autoRecovery.ts:340:router.post('/recover-document/:documentId', async (req, res) => {
server/routes/autoRecovery.ts:379:router.post('/recover-batch', async (req, res) => {
server/routes/autoRecovery.ts:419:router.post('/recover-application/:applicationId', async (req, res) => {
server/routes/autoRecovery.ts:505:router.get('/missing-documents', async (req, res) => {
server/routes/applicationReprocessing.ts:18:router.post('/request-resync', async (req, res) => {
server/routes/applicationReprocessing.ts:113:router.get('/status/:applicationId', async (req, res) => {
server/middleware/mountSpa.ts:21:    app.use((req: Request, res: Response, next) => {
server/middleware/mountSpa.ts:29:    app.use(rootPath, express.static(distDir, { 
server/routes/chatRoutes-secure.ts:52:router.post('/start', chatStartLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:135:router.post('/message', chatMessageLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:271:router.get('/history/:sessionId', chatHistoryLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:336:router.post('/leads', leadsLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:418:router.post('/escalate', escalationLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:506:router.post('/report', reportLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:608:router.get('/escalations', dashboardLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:651:router.get('/issue-reports', dashboardLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:709:router.patch('/escalations/:id/status', generalLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:794:router.get('/handoff-queue', dashboardLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:837:router.post('/request-staff', escalationLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:911:router.post('/log-contact', generalLimiter, async (req, res) => {
server/routes/chatRoutes-secure.ts:958:router.post('/user-message', chatMessageLimiter, async (req, res) => {
server/vite.ts:43:  app.use(vite.middlewares);
server/vite.ts:44:  app.use("*", async (req, res, next) => {
server/vite.ts:79:  app.use(express.static(distPath));
server/vite.ts:82:  app.use("*", (_req, res) => {
server/routes/chatRoutes.ts:15:router.post('/start', async (req, res) => {
server/routes/chatRoutes.ts:73:router.post('/message', async (req, res) => {
server/routes/chatRoutes.ts:173:router.get('/history/:sessionId', async (req, res) => {
server/routes/chatRoutes.ts:214:router.post('/leads', async (req, res) => {
server/routes/chatRoutes.ts:277:router.post('/escalate', async (req, res) => {
server/routes/chatRoutes.ts:362:router.post('/report', async (req, res) => {
server/routes/chatRoutes.ts:436:router.get('/escalations', async (req, res) => {
server/routes/chatRoutes.ts:474:router.get('/issue-reports', async (req, res) => {
server/routes/chatRoutes.ts:524:router.patch('/escalations/:id/status', async (req, res) => {
server/routes/chatRoutes.ts:579:router.get('/handoff-queue', async (req, res) => {
server/routes/chatRoutes.ts:619:router.post('/request-staff', async (req, res) => {
server/routes/chatRoutes.ts:674:router.post('/log-contact', async (req, res) => {
server/routes/chatRoutes.ts:702:router.post('/user-message', async (req, res) => {
server/routes/public-applications.ts:35:router.post("/applications", express.json(), async (req, res) => {
server/routes/public-applications.ts:121:router.post("/applications/:id/documents", upload.single('document'), async (req, res) => {
server/routes/public-applications.ts:192:router.get("/applications/:id/documents", async (req, res) => {
server/routes/public-applications.ts:239:router.get("/applications/:id/status", async (req, res) => {
server/routes/public-applications.ts:289:router.post("/applications/:id/submit", async (req, res) => {
server/routes/simple-application-create.ts:14:router.post("/public/applications", async (req, res) => {
server/routes/simple-test.ts:6:router.get('/test-bypass', (req, res) => {
server/routes/simple-test.ts:16:router.post('/public-applications', async (req, res) => {
server/routes/applications-minimal.ts:6:router.get('/', async (req: Request, res: Response) => {
server/middleware/serveDist.ts:6:  // app.use(express.static(dist));
server/middleware/serveDist.ts:7:  // app.use((req: Request, res: Response, next: NextFunction) => {
server/routes/dashboard.ts:6:router.get('/dashboard', (req, res) => {
server/routes/dashboard.ts:10:router.get('/dashboard/stats', (req, res) => {
server/routes/v1-applications-docs.ts:28:router.post("/api/v1/applications/:id/docs", upload.single("file"), async (req: Request, res: Response) => {
server/routes/v1-applications-docs.ts:125:router.get("/api/v1/applications/:id/docs", async (req: Request, res: Response) => {
server/routes/v1-applications-docs.ts:154:router.post("/api/v1/applications/:id/docs/presigned", async (req: Request, res: Response) => {
server/routes/client-integration-test.ts:18:router.get("/test", (req, res) => {
server/routes/client-integration-test.ts:27:router.post("/", async (req, res) => {
server/routes/client-integration-test.ts:112:router.get("/:id/recommendations", async (req, res) => {
server/routes/client-integration-test.ts:144:router.get("/:id/required-documents", async (req, res) => {
server/routes/auth.ts:21:router.post('/auth/dev-token', (_req, res) => {
server/routes/auth.ts:31:router.get('/whoami', (req, res) => {
server/routes/auth.ts:43:router.post('/login', async (req, res) => {
server/routes/auth.ts:114:router.get('/me', async (req, res) => {
server/routes/auth.ts:164:router.post('/logout', (req, res) => {
server/routes/auth.ts:175:router.post('/register', async (req, res) => {
server/routes/auth.ts:230:router.post('/dev/ensure-admin', async (req, res) => {
server/routes/otp_diag.ts:63:router.get("/health", requireDiag, async (req, res) => {
server/routes/otp_diag.ts:114:router.post("/send", requireDiag, async (req, res) => {
server/routes/otp_diag.ts:161:router.get("/last", requireDiag, async (req, res) => {
server/booking/sendLink.ts:11:router.post("/contacts/:id/send-booking-link", async (req,res)=>{
server/ops/staticMount.ts:39:  app.use((req, res, next) => {
server/ops/staticMount.ts:71:  // app.use(express.static(clientDir, {
server/booking/routes.ts:8:router.get("/staff/:id/booking-link", (req,res)=>{
server/booking/routes.ts:15:router.get("/booking/:username/availability", (req,res)=>{
server/booking/routes.ts:23:router.post("/booking/:username/book", async (req,res)=>{
server/ops/routeRegistry.ts:20:  app.use(path, router);
server/routes/drawerAPI.ts:8:router.get('/pipeline/cards/:id/application', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:8:router.get('/applications/:id/documents', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:33:router.post('/applications/:id/documents', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:55:router.get('/documents/:docId/view', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:81:router.put('/documents/:docId/status', bearerAuth, async (req, res) => {
server/ops/spaMount.ts.disabled:20:  const deny = (p:string) => app.use(p, (_req,res)=>res.status(410).send('Gone'));
server/ops/spaMount.ts.disabled:39:  app.use((req, res, next) => {
server/ops/spaMount.ts.disabled:49:  app.use("/assets", express.static(path.join(clientDir, "assets"), { maxAge: "1y", etag: true }));
server/ops/spaMount.js:19:    app.use((0, connect_history_api_fallback_1.default)({
server/ops/spaMount.js:24:    app.use((req, res, next) => {
server/ops/spaMount.js:29:    app.use(require("express").static(clientDir, {
server/routes/reports.ts:7:router.get('/pipeline-activity', async (req, res) => {
server/routes/reports.ts:97:router.get('/document-status', async (req, res) => {
server/routes/reports.ts:189:router.get('/conversion', async (req, res) => {
server/routes/reports.ts:294:router.get('/dashboard-summary', async (req, res) => {
server/routes/reports.ts:377:router.get("/reports/summary", async (req, res) => {
server/routes/reports.ts:403:router.get("/reports/monthly", async (req, res) => {
server/routes/reports.ts:423:router.get("/reports/lenders", async (req,res)=>{
server/routes/reports.ts:444:router.get('/conversions', async (req, res) => {
server/routes/reports.ts:495:router.get('/documents', async (req, res) => {
server/routes/reports.ts:590:router.get('/applications', async (req, res) => {
server/routes/reports.ts:702:router.get('/exports', async (req, res) => {
server/routes/reports.ts:753:router.post('/generate-export', async (req, res) => {
server/routes/reports.ts:782:router.get('/download/:exportId', async (req, res) => {
server/routes/reports.ts:808:router.get('/analytics/ga4', async (req, res) => {
server/routes/reports.ts:819:router.get('/analytics/ga4/pageviews', async (req, res) => {
server/routes/reports.ts:830:router.get('/analytics/ga4/users', async (req, res) => {
server/routes/reports.ts:842:router.get('/analytics/funnel', async (req, res) => {
server/routes/reports.ts:853:router.get('/analytics/conversion', async (req, res) => {
server/routes/reports.ts:864:router.get('/analytics/revenue', async (req, res) => {
server/routes/reports.ts:876:router.get('/analytics/events', async (req, res) => {
server/routes/reports.ts:928:router.get('/analytics/dashboard', async (req, res) => {
server/admin/coverage.ts:5:coverageRouter.get("/routes", (req, res) => {
server/admin/coverage.ts:9:coverageRouter.get("/manifest", (_req, res) => {
server/ops/routeRegistry.js:17:    app.use(path, router);
server/routes/auth.ws-token.ts:7:router.get('/api/auth/ws-token', (req, res) => {
server/o365/router.email.ts:9:router.post("/send", async (req, res) => {
server/o365/router.email.ts:43:router.post("/sync-inbox", async (req, res) => {
server/o365/router.email.ts:61:router.get("/status", async (req, res) => {
server/lib/routeGuard.ts:50:  app.use(path, router);
server/lib/registerUse.ts:19:  app.use(path, tagger, router);
server/routes/application-details.ts:8:router.get("/api/pipeline/cards/:id/application", async (req, res) => {
server/routes/application-details.ts:60:router.get("/api/pipeline/cards/:id/documents", async (req, res) => {
server/o365/router.auth.ts:7:router.get("/auth", async (req, res) => {
server/o365/router.auth.ts:19:router.get("/auth/callback", async (req, res) => {
server/o365/router.auth.ts:48:router.post("/auth/disconnect", async (req, res) => {
server/o365/router.auth.ts:67:router.get("/auth/status", async (req, res) => {
server/lib/mountOnce.ts:10:  app.use(path, router);
server/routes/auth.password-reset.ts:11:router.post('/', async (req, res) => {
server/routes/auth.password-reset.ts:115:router.get('/verify', async (req, res) => {
server/routes/users-management.ts:18:router.get('/', async (req, res) => {
server/routes/users-management.ts:64:router.get('/:id', async (req, res) => {
server/routes/users-management.ts:96:router.post('/', async (req, res) => {
server/routes/users-management.ts:168:router.patch('/:id', async (req, res) => {
server/routes/users-management.ts:241:router.delete('/:id', async (req, res) => {
server/routes/users-management.ts:287:router.delete('/:id/hard-delete', async (req, res) => {
server/routes/users-management.ts:327:router.post('/:id/password-reset', async (req, res) => {
server/mw/security.ts:18:  app.use(
server/routes/googleAdsUpload.ts:54:router.post("/offline-conversion", async (req, res) => {
server/routes/googleAdsUpload.ts:156:router.post("/batch-conversions", async (req, res) => {
server/routes/googleAds.ts:64:router.get("/auth/url", async (_req, res) => {
server/routes/googleAds.ts:79:router.get("/callback", async (req, res) => {
server/routes/googleAds.ts:96:router.get("/auth/status", async (_req, res) => {
server/routes/googleAds.ts:113:router.get("/accounts", async (_req, res) => {
server/routes/googleAds.ts:145:router.post("/conversion-actions", async (_req, res) => {
server/spa/mountSpa.ts:9:  app.use(
server/routes/email-test.ts:7:router.post("/test", async (req: Request, res: Response) => {
server/spa/earlyStatic.ts:12:  app.use("/assets", (req, res, next) => {
server/routes/objectsRouter.ts:12:objectsRouter.get("/sign", async (req, res) => {
server/routes/objectsRouter.ts:20:objectsRouter.get("/list", async (req, res) => {
server/spa/forceProd.ts:18:  // app.use("/assets", (req, res, next) => {
server/spa/cacheBust.ts:9:  // app.use(PREFIX, express.static(ASSETS,{fallthrough:false,immutable:true,maxAge:"1y",index:false}));
server/spa/cacheBust.ts:10:  // app.use(/^\/assets(?:-[^/]+)?\//, express.static(ASSETS,{fallthrough:false,immutable:true,maxAge:"1y",index:false}));
server/routes/billing/index.ts:8:router.get("/plans", async (_req,res)=>{
server/routes/billing/index.ts:13:router.post("/plans", async (req,res)=>{
server/routes/billing/index.ts:24:router.get("/subscription", async (_req,res)=>{
server/routes/billing/index.ts:28:router.post("/subscription", async (req,res)=>{
server/routes/billing/index.ts:40:router.get("/usage", async (_req,res)=>{
server/routes/billing/index.ts:44:router.post("/meter", async (req,res)=>{
server/infra/routeRegistry.ts:20:  app.use(basePath, router);
server/routes/perf/vitals.ts:7:router.post("/ingest", async (req:any, res)=>{
server/routes/perf/vitals.ts:19:router.get("/latest", async (_req,res)=>{
server/routes/flags/admin.ts:9:router.get("/flags", async (_req,res)=>{
server/routes/flags/admin.ts:13:router.post("/flags", async (req:any,res)=>{
server/routes/flags/admin.ts:23:router.post("/flags/:key/override", async (req:any,res)=>{
server/routes/flags/admin.ts:32:router.get("/flags/:key/eval", async (req:any,res)=>{
server/routes/flags/admin.ts:38:router.get("/experiments", async (_req,res)=>{
server/routes/flags/admin.ts:45:router.post("/experiments", async (req:any,res)=>{
server/routes/flags/admin.ts:59:router.post("/experiments/:key/status", async (req:any,res)=>{
server/routes/flags/admin.ts:65:router.get("/experiments/:key/assign", async (req:any,res)=>{
server/routes/flags/admin.ts:82:router.post("/experiments/:key/event", async (req:any,res)=>{
server/routes/retention/index.ts:9:router.get("/policies", async (_req, res) => {
server/routes/retention/index.ts:14:router.post("/policies", async (req, res) => {
server/routes/retention/index.ts:31:router.get("/holds", async (_req, res) => {
server/routes/retention/index.ts:39:router.post("/holds", async (req: any, res) => {
server/routes/retention/index.ts:54:router.delete("/holds/:id", async (req, res) => {
server/routes/retention/index.ts:60:router.get("/erasure/queue", async (_req, res) => {
server/routes/retention/index.ts:68:router.post("/erasure", async (req: any, res) => {
server/routes/retention/index.ts:95:router.post("/erasure/:id/decide", async (req: any, res) => {
server/routes/retention/index.ts:113:router.get("/erasure/:id/dry-run", async (req, res) => {
server/routes/retention/index.ts:147:router.get("/erasure/:id/export", async (req, res) => {
server/routes/retention/index.ts:169:router.post("/erasure/:id/purge", async (req: any, res) => {
server/routes/retention/index.ts:209:router.post("/sweep", async (_req, res) => {
server/security/hardening.mjs:5:  app.use(helmet({
server/routes/comms.ts:25:router.post("/sms/send", async (req, res) => {
server/routes/comms.ts:54:router.post("/email/send", async (req, res) => {
server/routes/comms.ts:83:router.get("/voice/mailbox/messages", async (_req, res) => {
server/routes/alerts/test.ts:7:router.post("/test", async (_req, res)=>{
server/security/productionHardening.ts:27:  app.use(helmet({
server/security/productionHardening.ts:49:  app.use('/api/auth', rateLimit({
server/security/productionHardening.ts:58:  app.use((req, _res, next) => {
server/routes/systemKpis.ts:7:router.get("/kpis", async (_req, res) => {
server/routes/systemKpis.ts:77:router.get("/stats", async (_req, res) => {
server/routes/systemKpis.ts:106:router.get("/activity", async (_req, res) => {
server/security/harden.ts:19:  app.use(helmet({ 
server/security/harden.ts:24:  app.use(cors({
server/security/harden.ts:39:  app.use(rateLimit({
server/routes/support.ts:6:router.get("/issues", async (_req, res) => {
server/routes/support.ts:10:router.post("/issues", async (req, res) => {
server/routes/support.ts:16:router.get("/handoff", async (_req, res) => res.json({ ok: true, requests: [] }));
server/routes/support.ts:17:router.post("/handoff", async (req, res) => res.status(201).json({ ok: true, id: "req_1" }));
server/routes/support.ts:20:router.get("/support-requests", async (_req, res) => {
server/routes/security/compliance.ts:13:router.post("/2fa/setup", async (req: any, res) => {
server/routes/security/compliance.ts:41:router.post("/2fa/verify", async (req: any, res) => {
server/routes/security/compliance.ts:78:router.post("/2fa/disable", async (req: any, res) => {
server/routes/security/compliance.ts:117:router.get("/secrets", async (req: any, res) => {
server/routes/security/compliance.ts:126:router.post("/secrets/:name/rotate", async (req: any, res) => {
server/routes/security/compliance.ts:149:router.post("/audit/export", async (req: any, res) => {
server/routes/security/compliance.ts:234:router.post("/documents/:id/av-check", async (req: any, res) => {
server/routes/security/compliance.ts:265:router.get("/compliance/dashboard", async (req: any, res) => {
server/routes/ai-admin.ts:24:router.get('/flags', adminOnly, async (req, res) => {
server/routes/ai-admin.ts:40:router.put('/flags/:flagKey', adminOnly, async (req, res) => {
server/routes/ai-admin.ts:60:router.get('/prompts', adminOnly, async (req, res) => {
server/routes/ai-admin.ts:77:router.put('/prompts/:promptKey', adminOnly, async (req, res) => {
server/routes/ai-admin.ts:125:router.get('/metrics', adminOnly, async (req, res) => {
server/routes/ai-admin.ts:144:router.get('/usage/users', adminOnly, async (req, res) => {
server/routes/ai-admin.ts:185:router.post('/emergency-disable', adminOnly, async (req, res) => {
server/routes/security/controls.ts:10:router.get("/keys", async (_req,res)=>{
server/routes/security/controls.ts:15:router.post("/keys", async (req:any, res)=>{
server/routes/security/controls.ts:26:router.post("/keys/:id/revoke", async (req,res)=>{
server/routes/security/controls.ts:32:router.get("/ping", apiKeyAuth, async (req:any,res)=>{
server/routes/security/controls.ts:37:router.get("/ip-rules", async (_req,res)=>{
server/routes/security/controls.ts:41:router.post("/ip-rules", async (req,res)=>{
server/routes/security/controls.ts:47:router.delete("/ip-rules/:id", async (req,res)=>{
server/routes/security/controls.ts:53:router.get("/maintenance", async (_req,res)=>{
server/routes/security/controls.ts:58:router.post("/maintenance", async (req,res)=>{
server/routes/ai-jobs.ts:7:router.get('/jobs/:requestId', async (req, res) => {
server/routes/ai-jobs.ts:40:router.post('/jobs/:requestId/cancel', async (req, res) => {
server/routes/slf/contacts.ts:7:router.get('/', async (req, res) => {
server/routes/public/applications.ts:56:router.post("/applications", async (req: Request, res: Response) => {
server/routes/dashboard-api.ts:6:router.get('/kpis', (req, res) => {
server/routes/dashboard-api.ts:60:router.get('/activity', (req, res) => {
server/routes/dashboard-api.ts:142:router.get('/stats', (req, res) => {
server/routes/dashboard-api.ts:162:router.get('/quick-stats', (req, res) => {
server/routes/dashboard-api.ts:182:router.get('/summary', (req, res) => {
server/routes/dashboard-api.ts:241:router.get('/metrics', (req, res) => {
server/routes/slf/dialer.ts:11:router.post('/call', requireSLFAuth(['staff', 'admin']), async (req: RBACRequest, res: Response) => {
server/routes/slf/dialer.ts:50:router.get('/history', requireSLFAuth(['staff', 'admin']), async (req: RBACRequest, res: Response) => {
server/routes/lenderEngine/v11.ts:9:router.post("/run/:applicationId", async (req:any, res)=>{
server/routes/lenderEngine/v11.ts:14:router.get("/policies", async (_req,res)=>{
server/routes/lenderEngine/v11.ts:19:router.post("/policies", async (req:any,res)=>{
server/routes/lenderEngine/v11.ts:25:router.delete("/policies/:id", async (req:any,res)=>{
server/routes/lenderEngine/v11.ts:30:router.post("/products/:key/knobs", async (req:any,res)=>{
server/routes/lenderEngine/v11.ts:35:router.get("/trace/:applicationId/latest", async (req:any,res)=>{
server/routes/lenderEngine/v11.ts:44:router.get("/variants", async (_req,res)=>{
server/routes/lenderEngine/v11.ts:49:router.put("/variants/:key", async (req:any,res)=>{
server/routes/public/documents.ts:18:router.post("/documents/presign", async (req: Request, res: Response) => {
server/routes/public/documents.ts:53:router.post("/documents/confirm", async (req: Request, res: Response) => {
server/routes/public/documents.ts:91:router.get("/applications/:id/documents.zip", async (req: Request, res: Response) => {
server/routes/chat.ts:21:router.post('/escalation', async (req, res) => {
server/routes/chat.ts:87:router.post('/submit', async (req, res) => {
server/routes/chat.ts:134:router.get('/escalations', async (req, res) => {
server/routes/chat.ts:165:router.patch('/escalations/:id', async (req, res) => {
server/routes/chat.ts:210:router.get('/transcripts', async (req, res) => {
server/routes/slf/api.ts:14:router.get('/analytics', requireSLFAuth(['staff', 'admin']), async (req: RBACRequest, res: Response) => {
server/routes/slf/api.ts:58:router.get('/dashboard', requireSLFAuth(['staff', 'admin']), async (req: RBACRequest, res: Response) => {
server/routes/slf/api.ts:88:router.get('/health', requireSLFAuth(['staff', 'admin']), async (req: RBACRequest, res: Response) => {
server/routes/public/applications_documents.ts:51:router.post('/:id/documents', uploadMiddleware, async (req, res) => {
server/routes/public/applications_documents.ts:252:router.get('/:id/documents', async (req, res) => {
server/routes/ivr.ts:180:  router.post("/voice/inbound", (req: Request, res: Response) => {
server/routes/ivr.ts:201:  router.post("/voice/ivr", (req: Request, res: Response) => {
server/routes/ivr.ts:228:  router.post("/voice/directory", (req: Request, res: Response) => {
server/routes/ivr.ts:243:  router.post("/voice/voicemail", (req: Request, res: Response) => {
server/routes/ivr.ts:268:  router.post("/voice/voicemail-complete", async (req: Request, res: Response) => {
server/routes/ivr.ts:295:  router.get("/voice/mailboxes", (_req: Request, res: Response) => {
server/routes/ivr.ts:305:  router.get("/voice/mailbox/:mb/messages", (req: Request, res: Response) => {
server/routes/ivr.ts:310:  router.post("/voice/mailbox/:mb/read", (req: Request, res: Response) => {
server/routes/ivr.ts:319:  router.delete("/voice/mailbox/:mb/messages/:id", (req: Request, res: Response) => {
server/routes/ivr.ts:327:  router.post("/voice/provision-user", (req: Request, res: Response) => {
server/routes/ocr/mapping.ts:9:router.get("/", async (req: any, res) => {
server/routes/ocr/mapping.ts:20:router.post("/", async (req: any, res) => {
server/routes/ocr/mapping.ts:32:router.put("/:id", async (req: any, res) => {
server/routes/ocr/mapping.ts:47:router.post("/:id/test/:documentId", async (req: any, res) => {
server/routes/ocr/mapping.ts:83:router.post("/:id/apply/:documentId", async (req: any, res) => {
server/routes/ocr/mapping.ts:150:router.get("/exceptions", async (req: any, res) => {
server/routes/communications/callHistory.ts:12:router.post('/call-action', async (req: any, res: any) => async (req, res) => {
server/routes/communications/callHistory.ts:83:router.get('/call-history', async (req: any, res: any) => async (req, res) => {
server/routes/communications/callHistory.ts:183:router.get('/missed-calls', async (req, res) => {
server/routes/communications/callHistory.ts:228:router.patch('/missed-calls/:id/handle', async (req: any, res: any) => async (req, res) => {
server/routes/communications/callHistory.ts:265:router.get('/call-status', async (req: any, res: any) => async (req, res) => {
server/routes/system.ts:6:router.get('/kpis', (_req, res) => res.json({ apps: 0, value: 0, conversion30d: 0, avgCycleDays: 0 }));
server/routes/system.ts:7:router.get('/stats', (_req, res) => res.json({ contacts: 0, lenders: 0, products: 0 }));
server/routes/system.ts:8:router.get('/activity', (_req, res) => res.json({ items: [] }));
server/routes/communications/index.ts:14:router.get('/status', (req, res) => {
server/routes/public/lenders.ts:7:router.get("/lenders", async (_req: Request, res: Response) => {
server/routes/lender/public.ts:11:router.get("/app", async (req:any, res)=>{
server/routes/lender/public.ts:20:router.post("/upload", async (req:any, res)=>{
server/routes/lender/public.ts:37:router.post("/download", async (req:any, res)=>{
server/routes/lender/public.ts:51:router.get("/messages", async (req:any, res)=>{
server/routes/lender/public.ts:57:router.post("/messages", async (req:any, res)=>{
server/routes/pipeline-board.ts:16:router.get('/board', async (_req, res) => {
server/routes/communications/incomingCall.ts:14:router.post('/incoming-call', async (req, res) => {
server/routes/communications/incomingCall.ts:72:router.get('/incoming-call/test', async (req, res) => {
server/routes/communications/incomingCall.ts:107:router.get('/incoming-call/status', (req, res) => {
server/routes/contacts-db.ts:34:router.get("/", async (req, res) => {
server/routes/contacts-db.ts:58:router.get("/:id", async (req, res) => {
server/routes/contacts-db.ts:89:router.post("/", async (req, res) => {
server/routes/contacts-db.ts:140:router.put("/:id", async (req, res) => {
server/routes/contacts-db.ts:199:router.get("/:id/activities", async (req, res) => {
server/routes/contacts-db.ts:226:router.post("/:id/activities", async (req, res) => {
server/routes/public/getSignatureStatus.ts:8:router.get('/applications/:id/signature-status', async (req, res) => {
server/routes/search/global.ts:9:router.post("/", async (req: any, res) => {
server/routes/search/global.ts:123:router.get("/suggestions", async (req: any, res) => {
server/routes/search/global.ts:180:router.post("/advanced", async (req: any, res) => {
server/routes/contact-details.ts:10:router.get('/:id', async (req, res) => {
server/routes/contact-details.ts:60:router.get('/:id/timeline', async (req, res) => {
server/routes/contact-details.ts:104:router.get('/:id/associations', async (req, res) => {
server/routes/contact-details.ts:157:router.get('/:id/email/threads', async (req, res) => {
server/routes/contact-details.ts:189:router.get('/:id/sms/threads', async (req, res) => {
server/routes/contact-actions.ts:8:router.post('/calls/outbound', async (req, res) => {
server/routes/contact-actions.ts:37:router.post('/sms/send', async (req, res) => {
server/routes/contact-actions.ts:64:router.post('/o365/mail/send', async (req, res) => {
server/routes/contact-actions.ts:91:router.post('/o365/events', async (req, res) => {
server/routes/contact-actions.ts:118:router.post('/o365/tasks', async (req, res) => {
server/routes/contact-actions.ts:145:router.post('/notes', async (req, res) => {
server/routes/contact-actions.ts:172:router.post('/linkedin/messages', async (req, res) => {
server/routes/contact-actions.ts:199:router.get('/integrations/status', async (req, res) => {
server/routes/integrations/bank.ts:13:router.post("/link/token", async (req:any, res)=>{
server/routes/integrations/bank.ts:25:router.post("/link/exchange", async (req:any,res)=>{
server/routes/integrations/bank.ts:44:router.post("/sync/balances", async (req:any,res)=>{
server/routes/integrations/bank.ts:68:router.post("/sync/transactions", async (req:any,res)=>{
server/routes/integrations/credit.ts:10:router.post("/pull/:applicationId", async (req:any, res)=>{
server/routes/integrations/credit.ts:37:router.get("/report/:applicationId", async (req, res)=>{
server/routes/integrations/webhooks.ts:9:router.post("/bank", async (req:any,res)=>{
server/routes/integrations/tasks.ts:9:router.get('/lists', async (req, res) => {
server/routes/integrations/tasks.ts:58:router.get('/tasks', async (req, res) => {
server/routes/integrations/tasks.ts:150:router.get('/lists/:listId/tasks', async (req, res) => {
server/routes/integrations/tasks.ts:193:router.post('/tasks', async (req, res) => {
server/routes/integrations/tasks.ts:237:router.patch('/tasks/:id', async (req, res) => {
server/routes/integrations/tasks.ts:275:router.delete('/tasks/:id', async (req, res) => {
server/routes/integrations/o365.ts:27:router.get('/auth', (req, res) => {
server/routes/integrations/o365.ts:55:router.get('/callback', async (req, res) => {
server/routes/integrations/o365.ts:93:router.get('/status', (req, res) => {
server/routes/integrations/o365.ts:129:router.delete('/disconnect', (req, res) => {
server/routes/integrations/calendar.ts:9:router.get('/events', async (req, res) => {
server/routes/integrations/calendar.ts:86:router.post('/events', async (req, res) => {
server/routes/integrations/calendar.ts:135:router.patch('/events/:id', async (req, res) => {
server/routes/integrations/calendar.ts:173:router.delete('/events/:id', async (req, res) => {
server/routes/internal/documentTypeMappingReference.ts:27:router.get('/map-reference', async (req, res) => {
server/routes/crm/contacts/twilioLogs.ts:24:router.get('/:contactId/twilio-logs', async (req, res) => {
server/routes/crm/contacts/twilioLogs.ts:147:router.get('/:contactId/twilio-logs/stats', async (req, res) => {
server/routes/crm/contacts/twilioLogs.ts:186:router.post('/:contactId/twilio-logs/quick-reply', async (req, res) => {
server/routes/admin/seed_admin.ts:8:router.post("/seed-admin", async (req: any, res) => {
server/routes/admin/user-toggle-endpoints.ts:8:router.post('/admin/users/:userId/2fa', async (req, res) => {
server/routes/admin/user-toggle-endpoints.ts:38:router.post('/admin/users/:userId/role', async (req, res) => {
server/routes/admin/user-toggle-endpoints.ts:69:router.post('/admin/users/:userId/permissions', async (req, res) => {
server/routes/admin/user-toggle-endpoints.ts:100:router.post('/admin/users/:userId/accounts', async (req, res) => {
server/routes/admin/system-settings.ts:28:router.get('/system-settings', async (req, res) => {
server/routes/admin/system-settings.ts:61:router.put('/system-settings', async (req, res) => {
server/routes/admin/users.ts:49:router.get("/api/admin/users", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:93:router.post("/api/admin/users", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:163:router.put("/api/admin/users/:id", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:271:router.delete("/api/admin/users/:id", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:318:router.get("/api/admin/users/audit", requireAdmin, async (req, res) => {
server/routes/admin/users.ts:363:router.get("/api/admin/users/roles", requireAdmin, async (req, res) => {
server/routes/admin/lists.ts:14:router.get("/contacts", async (req,res)=>{
server/routes/admin/lists.ts:24:router.get("/applications", async (req,res)=>{
server/routes/admin/lists.ts:40:router.post("/applications/bulk/status", async (req,res)=>{
server/routes/admin/lists.ts:49:router.get("/search", async (req,res)=>{
server/routes/admin/documentIntegrity.ts:16:router.get('/integrity', async (req: any, res: any) => requireRole(['admin']), async (req: RBACRequest, res) => {
server/routes/admin/documentIntegrity.ts:48:router.post('/cleanup', async (req: any, res: any) => requireRole(['admin']), async (req: RBACRequest, res) => {
server/routes/admin/documentIntegrity.ts:79:router.get('/integrity/:applicationId', async (req: any, res: any) => requireRole(['admin']), async (req: RBACRequest, res) => {
server/routes/admin/documentAudit.ts:10:router.get('/document-audit', async (req: any, res: any) => requireRole(['admin', 'staff']), async (req: RBACRequest, res) => {
server/routes/admin/system-settings.js:28:router.get('/admin/system-settings', async (req, res) => {
server/routes/admin/system-settings.js:61:router.put('/admin/system-settings', async (req, res) => {
server/routes/automations/send.ts:11:router.post("/send-sms", async (req, res) => {
server/routes/automations/send.ts:31:router.post("/send-email", async (req, res) => {
server/routes/analytics/dashboard.ts:8:router.get("/ws-dashboard", (req, res) => {
server/routes/analytics/dashboard.ts:13:router.get("/kpis", async (req: any, res) => {
server/routes/analytics/dashboard.ts:68:router.get("/timeseries", async (req: any, res) => {
server/routes/analytics/dashboard.ts:101:router.get("/performance", async (req: any, res) => {
server/routes/analytics/index.ts:11:router.post("/refresh", async (_req, res) => {
server/routes/analytics/index.ts:25:router.get("/activity", async (req, res) => {
server/routes/analytics/index.ts:47:router.get("/conversion", async (_req, res) => {
server/routes/analytics/index.ts:66:router.get("/documents", async (_req, res) => {
server/routes/analytics/index.ts:85:router.get("/lenders", async (req, res) => {
server/routes/analytics/index.ts:102:router.get("/ga4-overlay", async (req, res) => {
server/routes/analytics/pdf.ts:11:router.get("/monthly-pdf", async (req, res) => {
server/routes/analytics/pdf.ts:90:router.post("/schedule-monthly", async (req, res) => {
server/routes/graph/emailTracking.ts:8:router.get("/open/:id.png", async (req, res) => {
server/routes/graph/emailTracking.ts:20:router.get("/opens/:id", async (req, res) => {
server/routes/graph/tasks.ts:7:router.get("/list", async (req, res) => {
server/routes/graph/tasks.ts:25:router.post("/create", async (req, res) => {
server/routes/graph/tasks.ts:47:router.patch("/:taskId/complete", async (req, res) => {
server/routes/graph/calendar.ts:7:router.get("/list", async (req, res) => {
server/routes/graph/calendar.ts:16:router.post("/create", async (req, res) => {
server/routes/graph/oauth.ts:12:router.get("/connect", async (_req, res) => {
server/routes/graph/oauth.ts:18:router.get("/callback", async (req, res) => {
server/routes/graph/oauth.ts:30:router.get("/status", async (req, res) => {
server/routes/graph/oauth.ts:39:router.post("/disconnect", async (req, res) => {
server/routes/comms/email.ts:9:router.post("/send", async (req, res) => {
server/routes/comms/email.ts:84:router.get("/threads/:contactId", async (req, res) => {
server/routes/comms/sms.ts:12:router.post("/send", async (req, res) => {
server/routes/comms/sms.ts:81:router.post("/webhook/inbound", async (req, res) => {
server/routes/comms/sms.ts:141:router.post("/status", async (req, res) => {
server/routes/comms/templates.ts:10:router.get("/", async (req, res) => {
server/routes/comms/templates.ts:36:router.post("/", async (req, res) => {
server/routes/comms/templates.ts:57:router.patch("/:id", async (req, res) => {
server/routes/comms/templates.ts:104:router.delete("/:id", async (req, res) => {
server/routes/comms/templates.ts:122:router.post("/render", async (req, res) => {
server/routes/comms/outbox.ts:9:router.get("/", async (_req, res) => {
server/routes/comms/outbox.ts:21:router.get("/:id", async (req, res) => {
server/routes/comms/outbox.ts:27:router.post("/:id/approve", async (req, res) => {
server/routes/comms/outbox.ts:55:router.post("/:id/reject", async (req, res) => {
server/routes/comms/outbox.ts:66:router.post("/enqueue-or-send", async (req, res) => {
server/routes/comms/threads.ts:8:router.get("/", async (req, res) => {
server/routes/comms/threads.ts:42:router.post("/:threadId/snooze", async (req, res) => {
server/routes/comms/threads.ts:50:router.post("/:threadId/mute", async (req, res) => {
server/routes/comms/automations.ts:9:router.get("/reminders", async (req, res) => {
server/routes/comms/automations.ts:33:router.post("/reminders", async (req, res) => {
server/routes/comms/automations.ts:54:router.delete("/reminders/:id", async (req, res) => {
server/routes/comms/automations.ts:67:router.post("/contacts/:contactId/sms-optout", async (req, res) => {
server/routes/comms/automations.ts:81:router.post("/triggers/missing-docs", async (req, res) => {
server/routes/comms/sla.ts:9:router.get("/policies", async (_req, res) => {
server/routes/comms/sla.ts:22:router.get("/threads/:threadId", async (req, res) => {
server/routes/comms/sla.ts:41:router.patch("/threads/:threadId", async (req, res) => {
server/routes/comms/sla.ts:60:router.post("/hooks/inbound/:threadId", async (req, res) => {
server/routes/comms/sla.ts:71:router.post("/hooks/outbound/:threadId", async (req, res) => {
server/routes/comms/calls.ts:13:router.post("/start", async (req, res) => {
server/routes/comms/calls.ts:50:router.post("/twiml/basic", (req, res) => {
server/routes/comms/calls.ts:57:router.post("/status", async (req, res) => {
server/routes/bf/applications.ts:9:router.get('/', async (req, res) => {
server/routes/bf/applications.ts:48:router.get('/:id', async (req, res) => {
server/routes/ops/console.ts:21:  router.get("/queues", async (req: any, res) => {
server/routes/ops/console.ts:56:  router.get("/queues/:queueName/jobs", async (req: any, res) => {
server/routes/ops/console.ts:104:  router.post("/queues/:queueName/jobs/:jobId/retry", async (req: any, res) => {
server/routes/ops/console.ts:126:  router.delete("/queues/:queueName/jobs/:jobId", async (req: any, res) => {
server/routes/ops/console.ts:148:  router.post("/queues/:queueName/clean", async (req: any, res) => {
server/routes/ops/console.ts:167:  router.get("/queues", async (req: any, res) => {
server/routes/ops/console.ts:177:router.get("/health", async (req: any, res) => {
server/routes/ops/diag.ts:3:router.get("/diag", (_req,res)=> res.json({
server/routes/ops/errors.ts:4:router.post("/errors/browser", async (req:any,res)=>{
server/routes/ops/overview.ts:7:router.get("/overview", async (_req,res)=>{
server/routes/ops/queues.ts:6:router.get("/queues/status", async (_req,res)=>{
server/routes/ops/queues.ts:17:router.get("/queues/:name/jobs", async (req,res)=>{
server/routes/ops/queues.ts:31:router.post("/queues/:name/:jobId/retry", async (req,res)=>{
server/routes/ops/queues.ts:35:router.post("/queues/:name/:jobId/remove", async (req,res)=>{
server/routes/ops/queues.ts:39:router.post("/queues/:name/:jobId/promote", async (req,res)=>{
server/routes/ops/queues.ts:44:router.post("/queues/:name/retry-failed", async (req,res)=>{
server/routes/ops/queues.ts:48:router.post("/queues/:name/drain", async (req,res)=>{
server/routes/ops/health.ts:9:router.get("/healthz", (_req, res) => res.json({ ok: true, ts: new Date().toISOString() }));
server/routes/ops/health.ts:11:router.get("/readyz", async (_req, res) => {
server/routes/ops/metrics.ts:27:router.get("/metrics", async (_req,res) => {
server/routes/templates/library.ts:8:router.get("/", async (req, res) => {
server/routes/templates/library.ts:18:router.get("/:templateId/versions", async (req, res) => {
server/routes/templates/library.ts:29:router.post("/:templateId/versions", async (req, res) => {
server/routes/templates/library.ts:53:router.post("/:templateId/versions/:versionId/submit", async (req, res) => {
server/routes/templates/library.ts:59:router.post("/:templateId/versions/:versionId/approve", async (req, res) => {
server/routes/templates/library.ts:69:router.post("/:templateId/versions/:versionId/reject", async (req, res) => {
server/routes/templates/governance.ts:9:router.get("/sets", async (req: any, res) => {
server/routes/templates/governance.ts:22:router.post("/sets", async (req: any, res) => {
server/routes/templates/governance.ts:33:router.get("/sets/:setId/versions", async (req: any, res) => {
server/routes/templates/governance.ts:47:router.post("/sets/:setId/versions", async (req: any, res) => {
server/routes/templates/governance.ts:60:router.post("/versions/:versionId/submit", async (req: any, res) => {
server/routes/templates/governance.ts:73:router.post("/versions/:versionId/approve", async (req: any, res) => {
server/routes/templates/governance.ts:94:router.post("/versions/:versionId/reject", async (req: any, res) => {
server/routes/templates/governance.ts:115:router.post("/versions/:versionId/publish", async (req: any, res) => {
server/routes/templates/governance.ts:145:router.get("/published/:setKey/:channel", async (req: any, res) => {
server/routes/docreq/staff.ts:10:router.get("/:applicationId", async (req:any, res)=>{
server/routes/docreq/staff.ts:17:router.post("/create", async (req:any, res)=>{
server/routes/docreq/staff.ts:32:router.post("/:requestId/status", async (req:any, res)=>{
server/routes/docreq/staff.ts:45:router.get("/uploads/:requestId", async (req:any, res)=>{
server/routes/docreq/staff.ts:51:router.post("/uploads/presign", async (req:any, res)=>{
server/routes/docreq/staff.ts:59:router.post("/uploads/finalize", async (req:any, res)=>{
server/routes/client/docreq/index.ts:9:router.get("/", async (req:any, res)=>{
server/routes/client/docreq/index.ts:23:router.post("/presign", async (req:any, res)=>{
server/routes/client/docreq/index.ts:42:router.post("/finalize", async (req:any, res)=>{
server/routes/testing-suite.ts:6:router.get('/testing/coverage', async (req, res) => {
server/routes/testing-suite.ts:99:router.get('/testing/performance', async (req, res) => {
server/routes/testing-suite.ts:140:router.get('/testing/health', async (req, res) => {
server/routes/google-ads.mjs:106:router.get("/api/ads/google/status", async (req,res) => {
server/routes/google-ads.mjs:119:router.get("/api/ads/google/authorize", (req,res) => {
server/routes/google-ads.mjs:138:router.get("/api/ads/google/oauth/callback", async (req,res) => {
server/routes/google-ads.mjs:151:router.get("/api/ads/google/accounts", async (req,res) => {
server/routes/google-ads.mjs:196:router.get("/api/ads/google/campaigns", async (req,res) => {
server/routes/google-ads.mjs:242:router.post("/api/ads/google/ai/copy", express.json(), async (req,res) => {
server/routes/google-ads.mjs:269:router.post("/api/ads/google/ai/audiences", express.json(), async (req,res) => {
server/routes/google-ads.mjs:284:router.post("/api/ads/google/ai/budget", express.json(), async (req,res) => {
server/routes/analytics-advanced.ts:6:router.get('/analytics/dashboard', async (req, res) => {
server/routes/analytics-advanced.ts:68:router.get('/analytics/conversions/realtime', async (req, res) => {
server/routes/analytics-advanced.ts:92:router.get('/analytics/forecast', async (req, res) => {
server/routes/client/index.ts:7:router.get('/lender-products', getLenderProducts);
server/routes/catalog-dump.mjs:5:router.get("/api/catalog/dump", async (req,res)=>{
server/routes/catalog-fields.mjs:43:router.get("/api/catalog/fields", (_req, res) => {
server/routes/catalog-fields.mjs:52:router.get("/api/catalog/sample", optionalAuth, async (_req, res) => {
server/routes/ai-features.ts:6:router.post('/ai/credit-summary/generate', async (req, res) => {
server/routes/ai-features.ts:41:router.post('/ai/risk-score', async (req, res) => {
server/routes/ai-features.ts:68:router.post('/ai/template/generate', async (req, res) => {
server/routes/applications/create.ts:19:router.post('/test-logging', (req, res) => {
server/routes/applications/create.ts:31:router.post('/', async (req, res) => {
server/routes/applications/create.ts:755:router.patch('/:id', async (req, res) => {
server/routes/v1-parity.mjs:7:router.get("/api/v1/products", async (_req, res) => {
server/routes/v1-parity.mjs:31:// router.get("/api/lender-products", async (_req, res) => {
server/routes/catalog.mjs:10:router.get("/api/catalog/categories", async (req, res) => {
server/routes/catalog.mjs:37:router.get("/api/catalog/export-products", async (req, res) => {
server/routes/catalog.mjs:76:router.get("/api/catalog/country-counts", async (_req, res) => {
server/routes/catalog-export.mjs:92:router.get("/api/catalog/export-products", async (req, res) => {
server/routes/catalog-public.mjs:12:catalogPublicRouter.get("/export-products", async (req,res)=>{
server/routes/catalog-public.mjs:53:catalogPublicRouter.get("/country-counts", async (_req,res)=>{
server/routes/catalog-public.mjs:61:catalogPublicRouter.get("/categories", async (req,res)=>{
server/routes/catalog-public.mjs:74:catalogPublicRouter.get("/sanity", async (_req,res)=>{
server/routes/required-docs.mjs:17:requiredDocsRouter.post("/", async (req, res) => {
server/routes/crm-dynamic.mjs:39:router.get("/api/pipeline-cards", async (req, res) => {
server/routes/crm-dynamic.mjs:139:router.get("/api/contact-cards", async (req, res) => {
server/routes/_int/buildGuard.ts:79:router.get('/verify-build', (req, res) => {
server/routes/_int/buildGuard.ts:117:router.post('/emergency-build', async (req, res) => {
server/routes/_int/geo-check.mjs:11:router.get("/api/_int/geo-check", async (req, res) => {
server/routes/_int/raw-products-fallback.mjs:76:router.get("/api/_int/raw-products-fallback", async (req, res) => {
server/routes/voice/voicemail.ts:11:router.post('/voicemail-redirect', async (req, res) => {
server/routes/voice/voicemail.ts:54:router.post('/voicemail-notify', async (req, res) => {
server/routes/voice/voicemail.ts:115:router.post('/recording-status', async (req, res) => {
server/routes/voice/voicemail.ts:140:router.get('/voicemails', async (req, res) => {
server/routes/voice/voicemail.ts:169:router.post('/voicemails/:id/read', async (req, res) => {
server/routes/voice/voicemail.ts:189:router.delete('/voicemails/:id', async (req, res) => {
server/routes/voice/outgoing.ts:19:router.post('/outgoing', async (req, res) => {
server/routes/voice/outgoing.ts:79:router.post('/outgoing-connect', (req, res) => {
server/routes/voice/outgoing.ts:91:router.post('/status-callback', async (req, res) => {
server/routes/voice/incoming.ts:17:router.post('/incoming', async (req, res) => {
server/routes/voice/incoming.ts:86:router.post('/answer', async (req, res) => {
server/routes/voice/incoming.ts:113:router.post('/decline', async (req, res) => {
server/routes/user-management.js:32:router.get('/', async (req, res) => {
server/routes/user-management.js:60:router.post('/', async (req, res) => {
server/routes/user-management.js:121:router.put('/:id', async (req, res) => {
server/routes/user-management.js:157:router.post('/:id/reset-password', async (req, res) => {
server/routes/user-management.js:206:router.post('/force-password-change', async (req, res) => {
server/routes/user-management.js:251:router.delete('/:id', async (req, res) => {
server/routes/support.js:21:router.get('/support-requests', async (req, res) => {
server/routes/support.js:77:router.post('/support-requests', async (req, res) => {
server/routes/support.js:128:router.get('/issues', async (req, res) => {
server/routes/support.js:192:router.post('/issues', async (req, res) => {
server/routes/support.js:256:router.patch('/support-requests/:id/status', async (req, res) => {
server/routes/support.js:296:router.patch('/issues/:id/status', async (req, res) => {
server/routes/api/lenders.ts:10:router.get('/', async (req, res) => {
server/routes/api/lenders.ts:21:router.get('/:id', async (req, res) => {
server/routes/api/lenders.ts:35:router.post('/', async (req, res) => {
server/routes/api/lenders.ts:46:router.put('/:id', async (req, res) => {
server/routes/api/lenders.ts:65:router.delete('/:id', async (req, res) => {
server/routes/api/documents.ts:7:router.post('/', upload.single('file'), async (req, res) => {
server/routes/api/documents.ts:33:router.get('/', async (req, res) => {
server/routes/api/documents.ts:82:router.get('/:id/view', async (req, res) => {
server/routes/api/documents.ts:127:router.post('/:id/accept', async (req, res) => {
server/routes/api/documents.ts:141:router.post('/:id/reject', async (req, res) => {
server/routes/api/documents.ts:182:router.post('/:id/meta', async (req, res) => {
server/routes/api/documents.ts:197:router.get('/:id/versions', async (req, res) => {
server/routes/api/documents.ts:229:router.get('/logs/:appId', async (req, res) => {
server/routes/api/documents.ts:261:router.post('/:id/rebind', upload.single('file'), async (req, res) => {
server/routes/api/documents.ts:279:router.get('/:applicationId/download-zip', async (req, res) => {
server/routes/api/documents.ts:296:router.post('/upload-base64', async (req, res) => {
server/routes/api/documents.ts:316:router.post('/document-verification', async (req, res) => {
server/routes/api/applications.ts:19:router.post('/', async (req, res) => {
server/routes/api/lenders-reports.ts:15:router.get("/lenders/:lenderId/report", allowPublicAccess, async (req, res) => {
server/routes/api/lenders-reports.ts:59:router.get("/lenders/:lenderId/report/download", allowPublicAccess, async (req, res) => {
server/routes/api/lenders-reports.ts:102:router.get("/lenders/matching-summary", allowPublicAccess, async (req, res) => {
server/routes/api/lenders-reports.ts:134:router.get("/lenders/:id/matches", allowPublicAccess, async (req, res) => {
server/routes/api/lenders-settings.ts:14:router.get("/lenders/:id/settings", allowPublicAccess, async (req, res) => {
server/routes/api/lenders-settings.ts:51:router.put("/lenders/:id/settings", allowPublicAccess, async (req, res) => {
server/routes/api/lenders-settings.ts:75:router.get("/lenders/:id/messages", allowPublicAccess, async (req, res) => {
server/routes/api/lenders-settings.ts:102:router.post("/lenders/:id/messages", allowPublicAccess, async (req, res) => {
server/routes/api/lender-product-required-documents.ts:9:router.get('/:productId', async (req, res) => {
server/routes/api/lender-product-required-documents.ts:29:router.post('/:productId', async (req, res) => {
server/routes/marketing/email.ts:8:router.get("/api/marketing/email/templates", async (req, res) => {
server/routes/marketing/email.ts:169:router.post("/api/marketing/email/test-send", async (req, res) => {
server/routes/marketing/email.ts:190:router.post("/api/marketing/email/templates", async (req, res) => {
server/routes/marketing/messaging.ts:8:router.get("/api/marketing/messaging/sequences", async (req, res) => {
server/routes/marketing/messaging.ts:103:router.get("/api/marketing/messaging/sequences/:id/steps", async (req, res) => {
server/routes/marketing/messaging.ts:162:router.post("/api/marketing/messaging/sequences", async (req, res) => {
server/routes/marketing/ads.ts:8:router.get("/api/marketing/ads/campaigns", async (req, res) => {
server/routes/marketing/ads.ts:138:router.post("/api/marketing/ads/campaigns", async (req, res) => {
server/routes/marketing/ads.ts:164:router.patch("/api/marketing/ads/campaigns/:id", async (req, res) => {
server/routes/bootstrap/seed.ts:8:router.post("/seed", async (req:any,res:any)=>{
server/routes/releases/admin.ts:10:router.get("/", async (_req,res)=>{
server/routes/releases/admin.ts:15:router.post("/", async (req:any,res)=>{
server/routes/releases/admin.ts:28:router.post("/:id/stage", async (req,res)=>{
server/routes/releases/admin.ts:32:router.post("/:id/live", async (req,res)=>{
server/routes/releases/admin.ts:46:router.post("/:id/archive", async (req,res)=>{
server/routes/releases/admin.ts:52:router.get("/:id/tasks", async (req,res)=>{
server/routes/releases/admin.ts:56:router.post("/:id/tasks", async (req,res)=>{
server/routes/releases/admin.ts:65:router.post("/tasks/:taskId/run", async (req,res)=>{
server/routes/releases/admin.ts:82:router.get("/whatsnew", async (req:any,res)=>{
server/routes/releases/admin.ts:104:router.post("/dismiss/:releaseId", async (req:any,res)=>{
server/routes/releases/admin.ts:115:router.get("/changelog", async (_req,res)=>{
server/routes/slf-contacts.mjs:6:router.get('/slf-contacts', (req, res) => {
server/routes/lenders.mjs:6:router.get('/lenders', (req, res) => {
server/routes/ai-helpers.mjs:6:router.get('/ai-helpers', (req, res) => {
server/routes/marketing.mjs:6:router.get('/marketing', (req, res) => {
server/routes/dialer.mjs:6:router.get('/dialer', (req, res) => {
server/routes/application-detail.mjs:6:router.get('/application-detail/:id', (req, res) => {
server/routes/analytics.mjs:6:router.get('/analytics', (req, res) => {
server/routes/dashboard.mjs:6:router.get('/dashboard', (req, res) => {
server/routes/staff-contacts.mjs:6:router.get('/staff-contacts', (req, res) => {
server/routes/_admin-catalog.mjs:6:router.post("/api/_admin/normalize-countries", async (_req, res) => {
server/routes/_admin-catalog.mjs:28:router.post("/api/_admin/push-products", async (_req, res) => {
server/routes/_admin/push-products.mjs:5:router.post("/api/_admin/push-products", async (req, res) => {
server/routes/push-products.mjs:5:router.post("/api/_admin/push-products", async (req,res) => {
server/routes/catalog-dedupe.mjs:21:router.get("/api/catalog/dedupe", async (req, res) => {
server/routes/feature-flags.mjs:6:router.get('/feature-flags', (req, res) => {
server/routes/billing.mjs:6:router.get('/billing', (req, res) => {
server/routes/global-search.mjs:6:router.get('/global-search', (req, res) => {
server/routes/hubspot.mjs:6:router.get('/hubspot', (req, res) => {
server/routes/pipeline.mjs:6:router.get('/pipeline', (req, res) => {
server/routes/notifications.mjs:6:router.get('/notifications', (req, res) => {
server/routes/voice.mjs:6:router.get('/voice', (req, res) => {
server/routes/users-api.ts:27:router.get("/users", async (req, res) => {
server/routes/users-api.ts:104:router.get("/users/me", async (req, res) => {
server/routes/users-api.ts:152:router.get("/users/:id", async (req, res) => {
server/routes/users-api.ts:183:router.post("/users", async (req, res) => {
server/routes/users-api.ts:242:router.patch("/users/:id", async (req, res) => {
server/routes/users-api.ts:298:router.put("/users/:id", async (req, res) => {
server/routes/users-api.ts:353:router.delete("/users/:id", async (req, res) => {
server/routes/users-api.ts:377:router.delete("/users/:id/hard-delete", async (req, res) => {
server/routes/v1-products-crud.mjs:50:router.get("/api/v1/products", async (req, res) => {
server/routes/v1-products-crud.mjs:71:router.get("/api/v1/products/:id", async (req, res) => {
server/routes/v1-products-crud.mjs:82:router.post("/api/v1/products", express.json(), async (req, res) => {
server/routes/v1-products-crud.mjs:108:router.put("/api/v1/products/:id", express.json(), async (req, res) => {
server/routes/v1-products-crud.mjs:141:router.delete("/api/v1/products/:id", async (req, res) => {
server/routes/build-guard.mjs:6:router.get('/build-guard', (req, res) => {
server/routes/bulletproofHealthV2.ts:10:router.get('/health', async (req, res) => {
server/routes/bulletproofHealthV2.ts:194:router.get('/preview-logs', async (req, res) => {
server/routes/bulletproofHealth.ts:12:router.get('/health', async (req, res) => {
server/routes/base64Upload.ts:12:router.post("/upload-base64", async (req, res) => {
server/routes/bankingAnalysis.ts:9:router.get('/analysis/:applicationId', async (req, res, next) => {
server/routes/autoDocumentRoutes.ts:17:router.post('/process/:documentId', async (req, res) => {
server/routes/autoDocumentRoutes.ts:67:router.post('/process-application/:applicationId', async (req, res) => {
server/routes/autoDocumentRoutes.ts:101:router.get('/status/:applicationId', async (req, res) => {
server/routes/autoDocumentRoutes.ts:159:router.get('/monitor', async (req, res) => {
server/routes/applications-super-minimal.ts:6:router.get('/', async (req: Request, res: Response) => {
server/routes/applications-board.ts:58:router.get("/board", async (req, res) => {
server/routes/applicationMetadata.ts:15:router.get('/test', (req, res) => {
server/routes/applicationMetadata.ts:25:router.get('/:id', async (req, res) => {
server/routes/analytics-dashboard.ts:15:router.get('/dashboard-summary', developmentAuth, async (req, res) => {
server/routes/analytics-dashboard.ts:107:router.get('/pipeline-activity', developmentAuth, async (req, res) => {
server/routes/analytics-dashboard.ts:199:router.get('/document-status', developmentAuth, async (req, res) => {
server/routes/analytics-dashboard.ts:284:router.get('/conversion', developmentAuth, async (req, res) => {
server/routes/analytics-dashboard.ts:361:router.get('/communication-stats', developmentAuth, async (req, res) => {
server/routes/aiTraining.ts:87:router.post('/upload', upload.single('file'), async (req, res) => {
server/routes/aiTraining.ts:158:router.get('/documents', async (req, res) => {
server/routes/aiTraining.ts:201:router.get('/document/:id', async (req, res) => {
server/routes/aiTraining.ts:235:router.delete('/document/:id', async (req, res) => {
server/routes/aiTraining.ts:281:router.get('/stats', async (req, res) => {
server/routes/ai-reports.disabled.ts:23:router.post('/session/start', authenticateClient, async (req, res) => {
server/routes/ai-reports.disabled.ts:77:router.post('/session/log', authenticateClient, async (req, res) => {
server/routes/ai-reports.disabled.ts:119:router.get('/sessions', authenticateStaff, async (req, res) => {
server/routes/ai-reports.disabled.ts:164:router.get('/sessions/:sessionId', authenticateStaff, async (req, res) => {
server/routes/ai-reports.disabled.ts:203:router.get('/stats/summary', authenticateStaff, async (req, res) => {
server/routes/ai-reports.disabled.ts:249:router.patch('/sessions/:sessionId/complete', authenticateStaff, async (req, res) => {
server/routes/ai-reports.disabled.ts:272:router.get('/', async (req, res) => {
server/routes/adminUploadLogs.ts:11:router.get("/", async (req: any, res: any) => {
server/routes/adminUploadLogs.ts:39:router.get("/stats", async (req: any, res: any) => {
server/routes/adminReassignment.ts:52:router.post('/documents/reassign/:documentId', requireAdmin, async (req: any, res) => {
server/routes/adminReassignment.ts:127:router.get('/documents/history/:applicationId', requireAdmin, async (req: any, res) => {
server/routes/adminReassignment.ts:160:router.post('/documents/reassign/test', async (req: any, res) => {
server/routes/adminLenderUsers.ts:9:router.get('/lenders', async (req, res) => {
server/routes/adminLenderUsers.ts:31:router.post('/lenders', async (req, res) => {
server/routes/adminLenderUsers.ts:74:router.get('/lender-users', async (req, res) => {
server/routes/adminLenderUsers.ts:116:router.post('/lender-users', async (req, res) => {
server/routes/adminLenderUsers.ts:184:router.patch('/lender-users/:id', async (req, res) => {
server/routes/adminLenderUsers.ts:216:router.delete('/lender-users/:id', async (req, res) => {
server/routes/admin.disabled.ts:16:router.get('/users/stats', async (req, res) => {
server/routes/admin.disabled.ts:42:router.get('/users', async (req, res) => {
server/routes/admin.disabled.ts:112:router.get('/users/:userId', async (req, res) => {
server/routes/admin.disabled.ts:149:router.patch('/users/:userId/status', async (req, res) => {
server/routes/admin.disabled.ts:211:router.get('/users/:userId/sessions', async (req, res) => {
server/routes/admin.disabled.ts:229:router.post('/users/:userId/sessions/:sessionId/revoke', async (req, res) => {
server/routes/admin.disabled.ts:260:router.post('/users/:userId/sessions/revoke-all', async (req, res) => {
server/routes/admin.disabled.ts:288:router.get('/users/:userId/login-attempts', async (req, res) => {
server/routes/admin.disabled.ts:314:router.post('/users/:userId/reset-password', async (req, res) => {
server/routes/admin.disabled.ts:362:router.post('/users', async (req, res) => {
server/routes/admin.disabled.ts:453:router.patch('/users/:userId', async (req, res) => {
server/routes/admin.disabled.ts:513:router.delete('/users/:userId', async (req, res) => {
server/routes/admin.disabled.ts:567:router.get('/users/:userId/audit-log', async (req, res) => {
server/routes/admin.disabled.ts:592:router.get('/audit-log', async (req, res) => {
server/routes/standardizedAuth.ts:20:// router.post('/login', async (req, res) => {
server/routes/standardizedAuth.ts:133:router.get('/me', async (req, res) => {
server/routes/standardizedAuth.ts:191:router.post('/logout', (req, res) => {
server/routes/publicApi.ts:26:router.get('/test-new', (req, res) => {
server/routes/publicApi.ts:38:router.get('/application/:id', (req, res) => {
server/routes/publicApi.ts:125:router.get('/upload-test', (req, res) => {
server/routes/publicApi.ts:176:router.post('/s3-upload/:applicationId', 
server/routes/publicApi.ts:271:router.get('/s3-test/:documentId', async (req, res) => {
server/routes/publicApi.ts:308:// router.post('/upload/:id', legacyUpload.single('document'), async (req: any, res) => {
server/routes/publicApi.ts:460:router.post('/documents/:id', diskUpload.any(), async (req: any, res) => {
server/routes/publicApi.ts:586:router.get('/loan-products/required-documents/:category', async (req, res) => {
server/routes/publicApi.ts:687:router.post('/applications/:id/documents', s3Upload.single('document'), async (req: any, res) => {
server/routes/publicApi.ts:805:router.get('/applications/:id/documents', async (req, res) => {
server/routes/publicApi.ts:1016:router.get('/routes', (req, res) => {
server/routes/rbacSimple.ts:17:router.get('/test', (req: Request, res: Response) => {
server/routes/rbacSimple.ts:28:// router.get('/lender-products', requireLenderAuth, async (req: Request, res: Response) => {
server/routes/rbacSimple.ts:65:router.patch('/lender-products/:id', requireLenderAuth, async (req: Request, res: Response) => {
server/routes/rbacSimple.ts:199:router.post('/lender-products', requireLenderAuth, async (req: Request, res: Response) => {
server/routes/rbacSimple.ts:251:router.delete('/lender-products/:id', requireLenderAuth, async (req: Request, res: Response) => {
server/routes/partnerReferral.ts:15:router.get('/contacts', async (req: any, res) => {
server/routes/partnerReferral.ts:57:router.post('/enrich-contact', async (req: any, res: any) => async (req, res) => {
server/routes/partnerReferral.ts:106:router.get('/lead-sources', async (req, res) => {
server/routes/partnerReferral.ts:143:router.get('/pipeline-view', async (req: any, res: any) => async (req, res) => {
server/routes/partnerReferral.ts:264:router.get('/status', (req, res) => {
server/routes/ocrEnhanced.ts:11:router.post('/process-document/:id', async (req: any, res: Response) => {
server/routes/ocrEnhanced.ts:81:router.get('/status/:applicationId', async (req: any, res: Response) => {
server/routes/segments.ts:53:router.get('/', limiter, async (_req, res) => {
server/routes/segments.ts:58:router.post('/', limiter, async (req, res) => {
server/routes/segments.ts:71:router.put('/:id', limiter, async (req, res) => {
server/routes/segments.ts:82:router.delete('/:id', limiter, async (req, res) => {
server/routes/segments.ts:89:router.get('/:id/run', limiter, async (req, res) => {
server/routes/smsTestEndpoint.ts:19:router.get('/triggers', async (req: any, res: any) => {
server/routes/smsTestEndpoint.ts:65:router.post('/:applicationId/:trigger', async (req: any, res: any) => {
server/routes/smsTestEndpoint.ts:142:router.get('/:applicationId/phone', async (req: any, res: any) => {
server/routes/smsTestEndpoint.ts:198:router.post('/bulk/:trigger', async (req: any, res: any) => {
server/routes/loanDecisions.ts:19:router.post('/:applicationId/approve', async (req: any, res: any) => {
server/routes/loanDecisions.ts:79:router.post('/:applicationId/reject', async (req: any, res: any) => {
server/routes/loanDecisions.ts:137:router.post('/:applicationId/funded', async (req: any, res: any) => {
server/routes/loanDecisions.ts:197:router.post('/:applicationId/custom', async (req: any, res: any) => {
server/routes/linkedin.ts:61:router.get('/auth', limiter, async (req, res) => {
server/routes/linkedin.ts:74:router.post('/auth/callback', limiter, async (req, res) => {
server/routes/linkedin.ts:107:router.get('/settings', limiter, async (req, res) => {
server/routes/linkedin.ts:123:router.post('/settings', limiter, async (req, res) => {
server/routes/linkedin.ts:143:router.get('/posts', limiter, async (req, res) => {
server/routes/linkedin.ts:153:router.post('/posts', limiter, async (req, res) => {
server/routes/linkedin.ts:179:router.post('/posts/:id/publish', limiter, async (req, res) => {
server/routes/linkedin.ts:209:router.get('/ads', limiter, async (req, res) => {
server/routes/linkedin.ts:219:router.post('/ads', limiter, async (req, res) => {
server/routes/linkedin.ts:254:router.post('/ads/:id/launch', limiter, async (req, res) => {
server/routes/linkedin.ts:286:router.get('/leads', limiter, async (req, res) => {
server/routes/linkedin.ts:296:router.post('/leads/sync', limiter, async (req, res) => {
server/routes/linkedin.ts:336:router.get('/analytics', limiter, async (req, res) => {
server/routes/linkedin.ts:385:router.post('/disconnect', limiter, async (req, res) => {
server/routes/documentManagement.ts:115:router.post('/staff-upload/:applicationId', async (req: any, res: any) => upload.single('file'), async (req: RBACRequest, res) => {
server/routes/documentManagement.ts:229:router.post('/:id/replace', async (req: any, res: any) => upload.single('file'), async (req: RBACRequest, res) => {
server/routes/documentManagement.ts:301:router.get('/:id/preview', async (req: Request, res) => {
server/routes/documentManagement.ts:516:router.get('/:id/download', async (req: Request, res) => {
server/routes/documentManagement.ts:665:router.get('/audit/report', async (req: Request, res) => {
server/routes/documentManagement.ts:766:router.patch('/:id/accept', async (req: any, res: any) => {
server/routes/documentManagement.ts:924:router.patch('/:id/reject', async (req: any, res: any) => {
server/routes/documentManagement.ts:1005:router.get('/applications/:appId/zip', async (req: any, res: any) => {
server/routes/documentManagement.ts:1066:router.post('/send', async (req: any, res: any) => {
server/routes/documentManagement.ts:1118:router.get('/audit', async (req: any, res: any) => {
server/routes/documentManagement.ts:1144:router.get('/audit/application/:id', async (req: any, res: any) => {
server/routes/documentManagement.ts:1173:router.get('/:applicationId/download-all', async (req: Request, res) => {
server/routes/documentDashboard.ts:10:router.get('/enhanced-status', async (req: any, res: Response) => {
server/routes/documentDashboard.ts:78:router.get('/health-report', async (req: any, res: Response) => {
server/routes/contactsCommunications.ts:7:router.get('/', async (req, res) => {
server/routes/contactsCommunications.ts:54:router.post('/', async (req, res) => {
server/routes/campaigns.ts:102:router.post('/', limiter, async (req, res) => {
server/routes/campaigns.ts:130:router.get('/', limiter, async (req, res) => {
server/routes/campaigns.ts:141:router.get('/:id', limiter, async (req, res) => {
server/routes/campaigns.ts:158:router.post('/:id/prepare', limiter, async (req, res) => {
server/routes/campaigns.ts:210:router.post('/:id/pause', limiter, async (req, res) => {
server/routes/campaigns.ts:223:router.post('/:id/resume', limiter, async (req, res) => {
server/routes/campaigns.ts:236:router.post('/:id/cancel', limiter, async (req, res) => {
server/routes/campaigns.ts:250:router.get('/:id/progress', limiter, async (req, res) => {
server/routes/campaigns.ts:274:router.get('/:id/preview', limiter, async (req, res) => {
server/routes/auditRoutes.ts:8:router.get('/logs', async (req: any, res: Response) => {
server/routes/auditRoutes.ts:25:router.get('/logs/:documentId', async (req: any, res: Response) => {
server/routes/auditRoutes.ts:43:router.get('/report', async (req: any, res: Response) => {
server/routes/lenders-api.ts:12:router.get("/lenders", async (req, res) => {
server/routes/lenders-api.ts:46:router.get("/lender-products", async (req, res) => {
server/routes/lenders-api.ts:90:router.post("/lenders", async (req, res) => {
server/routes/lenders-api.ts:132:router.put("/lenders/:id", async (req, res) => {
server/routes/lenders-api.ts:180:router.delete("/lenders/:id", async (req, res) => {
server/routes/lenders-api.ts:208:router.post("/lender-products", async (req, res) => {
server/routes/lenders-api.ts:280:router.put("/lender-products/:id", async (req, res) => {
server/routes/lenders-api.ts:334:router.delete("/lender-products/:id", async (req, res) => {
server/routes/lenders-api.ts:363:router.post("/lenders/:lenderId/products", async (req, res) => {
server/routes/lenders-api.ts:429:router.put("/lenders/:lenderId/products/:productId", async (req, res) => {
server/routes/lenders-api.ts:484:router.get("/lenders/:lenderId/products/:productId", async (req, res) => {
server/routes/emergencyAccess.ts:18:router.post('/admin-access', async (req: Request, res: Response) => {
server/routes/emergencyAccess.ts:108:router.post('/reset-password', async (req: Request, res: Response) => {
server/routes/documentWorkflow.ts:17:router.post("/api/applications/:id/nudge-documents", bearerAuth, async (req, res) => {
server/routes/documentWorkflow.ts:52:router.get("/api/public/applications/:id/required-docs", async (req, res) => {
server/routes/documentWebhooks.ts:11:router.post("/configure", async (req: any, res: any) => {
server/routes/documentWebhooks.ts:107:router.post("/test", async (req: any, res: any) => {
server/routes/documentWebhooks.ts:131:router.get("/status", async (req: any, res: any) => {
server/routes/documentValidation.ts:20:router.get('/types', (req: Request, res: Response) => {
server/routes/documentValidation.ts:37:router.get('/labels', (req: Request, res: Response) => {
server/routes/documentValidation.ts:54:router.get('/categories', (req: Request, res: Response) => {
server/routes/documentValidation.ts:70:router.post('/validate', (req: Request, res: Response) => {
server/routes/documentValidation.ts:101:router.get('/db-compare', async (req: Request, res: Response) => {
server/routes/documentValidation.ts:163:router.get('/health', (req: Request, res: Response) => {
server/routes/documentReupload.ts:38:router.post('/:id/reupload', upload.single('document'), async (req: Request, res: Response) => {
server/routes/documentReupload.ts:121:router.get('/:id/versions', async (req: Request, res: Response) => {
server/routes/documentResync.ts:19:router.post('/fix-associations', async (req: Request, res: Response) => {
server/routes/documentResync.ts:142:router.get('/status', async (req: Request, res: Response) => {
server/routes/documentRestoration.ts:9:router.post('/restore-actual-documents/:applicationId', async (req, res) => {
server/routes/documentRestoration.ts:177:router.get('/status/:applicationId', async (req, res) => {
server/routes/documentReprocessing.ts:21:router.post("/:id/reprocess", async (req: any, res: any) => {
server/routes/documentReprocessing.ts:53:router.post("/:id/reanalyze-banking", async (req: any, res: any) => {
server/routes/documentRecoveryUI.ts:34:router.get('/application/:applicationId/documents', async (req, res) => {
server/routes/documentRecoveryUI.ts:131:router.post('/document/:documentId/replace', upload.single('file'), async (req, res) => {
server/routes/documentRecoveryUI.ts:223:router.post('/bulk-status', async (req, res) => {
server/routes/documentReassignment.ts:13:router.post('/reassign', async (req, res) => {
server/routes/documentNormalization.ts:19:router.post("/bulk-normalize", async (req, res) => {
server/routes/documentNormalization.ts:45:router.get("/mappings", (req, res) => {
server/routes/documentNormalization.ts:59:router.post("/validate", (req, res) => {
server/routes/documentNormalization.ts:103:router.get("/status", async (req, res) => {
server/routes/documentMetadata.ts:11:router.patch("/:id/tags", async (req: any, res: any) => {
server/routes/documentMetadata.ts:37:router.patch("/:id/description", async (req: any, res: any) => {
server/routes/documentMetadata.ts:59:router.get("/tags", async (req: any, res: any) => {
server/routes/documentMetadata.ts:81:router.get("/search", async (req: any, res: any) => {
server/routes/documentBackupStatus.ts:14:router.get("/status", async (req: any, res: any) => {
server/routes/documentBackupStatus.ts:65:router.post("/:id/backup", async (req: any, res: any) => {
server/routes/documentBackupStatus.ts:106:router.post("/:id/restore", async (req: any, res: any) => {
server/routes/documentAudit.ts:28:router.get('/', async (req: Request, res: Response) => {
server/routes/documentAuditTrail.ts:11:router.get("/:id/audit", async (req: any, res: any) => {
server/routes/documentAuditTrail.ts:149:router.get("/summary", async (req: any, res: any) => {
server/routes/documentAnalytics.ts:11:router.get("/overview", async (req: any, res: any) => {
server/routes/documentAnalytics.ts:137:router.get("/metrics", async (req: any, res: any) => {
server/routes/documentAnalytics.ts:188:router.get("/export", async (req: any, res: any) => {
server/routes/debug.ts:15:router.get("/lenders", async (req, res) => {
server/routes/debug.ts:50:router.get("/lenders/csv", async (req, res) => {
server/routes/debugSMS.ts:14:router.post('/send-test-sms', async (req: Request, res: Response) => {
server/routes/debugSMS.ts:53:router.get('/twilio-config', async (req: Request, res: Response) => {
server/routes/debugHealth.ts:18:router.get('/lender-products-health', async (req: any, res: any) => async (req, res) => {
server/routes/debugHealth.ts:104:router.get('/database-safety-status', async (req: any, res: any) => async (req, res) => {
server/routes/dataIntegrity.ts:10:router.get('/status', async (req, res) => {
server/routes/dataIntegrity.ts:136:router.post('/recover/:type', async (req, res) => {
server/routes/crmPublic.ts:9:crmPublicRouter.post("/contacts/auto-create", async (req, res) => {
server/routes/crmContactCard.ts:26:router.get('/:id', async (req, res) => {
server/routes/crmContactCard.ts:113:router.get('/:id/timeline', async (req, res) => {
server/routes/crmContactCard.ts:247:router.post('/:id/notes', async (req, res) => {
server/routes/crmContactCard.ts:307:router.post('/:id/logs', async (req, res) => {
server/routes/crmContactCard.ts:355:router.get('/:id/applications', async (req, res) => {
server/routes/crmContactCard.ts:387:router.get('/health', (req, res) => {
server/routes/crmContactCard.ts:399:router.get('/', (req, res) => {
server/routes/credentialDiagnostic.ts:6:router.get('/diagnose', async (req, res) => {
server/routes/conflicts.ts:16:router.get(['/demo', '/demo.json'], async (_req, res) => {
server/routes/conflicts.ts:28:router.get('/:applicationId', async (req, res, next) => {
server/routes/conference.ts:20:router.post('/enter', (req, res) => {
server/routes/conference.ts:28:router.post('/role', (req, res) => {
server/routes/conference.ts:56:router.post('/start', (req, res) => {
server/routes/conference.ts:62:router.post('/participants', async (req, res) => {
server/routes/conference.ts:86:router.post('/bridge', (req, res) => {
server/routes/conference.ts:101:router.post('/status', (_req, res) => res.sendStatus(200));
server/routes/conference.ts:102:router.post('/recording-status', (_req, res) => res.sendStatus(200));
server/routes/communication.ts:19:router.get('/sms/contacts', async (req, res) => {
server/routes/communication.ts:67:router.get('/sms/messages/:contactId', async (req, res) => {
server/routes/communication.ts:116:router.get('/calls/contacts', async (req, res) => {
server/routes/communication.ts:161:router.get('/calls/logs/:contactId', async (req, res) => {
server/routes/communication.ts:217:router.get('/email/threads', async (req, res) => {
server/routes/communication.ts:271:router.get('/email/messages/:threadId', async (req, res) => {
server/routes/communication.ts:332:router.get('/templates', async (req, res) => {
server/routes/communicationEmail.ts:15:router.post('/send', async (req, res) => {
server/routes/communicationEmail.ts:82:router.get('/', async (req, res) => {
server/routes/communicationCalls.ts:9:router.post('/start', async (req, res) => {
server/routes/chatSessions.ts:9:router.get('/', async (req, res) => {
server/routes/chatSessions.ts:80:router.get('/:id', async (req, res) => {
server/routes/chatSessions.ts:127:router.patch('/:id', async (req, res) => {
server/routes/chatSessions.ts:177:router.post('/:id/messages', async (req, res) => {
server/routes/categories.ts:17:router.get('/', async (req, res) => {
server/routes/categories.ts:56:router.get('/counts', async (req, res) => {
server/routes/calendar-tasks-real.ts:7:router.get('/calendar/events', async (req: any, res: any) => {
server/routes/calendar-tasks-real.ts:66:router.post('/calendar/events', async (req: any, res: any) => {
server/routes/calendar-tasks-real.ts:103:router.get('/tasks', async (req: any, res: any) => {
server/routes/calendar-tasks-real.ts:166:router.post('/tasks', async (req: any, res: any) => {
server/routes/bulletproofUpload.ts:56:router.post('/upload/:applicationId', upload.single('document'), async (req, res) => {
server/routes/bulletproofUpload.ts:136:router.get('/documents/:id/preview', async (req, res) => {
server/routes/bulletproofUpload.ts:170:router.get('/documents/:id/download', async (req, res) => {
server/routes/bulletproofUpload.ts:204:router.get('/health', async (req, res) => {
server/routes/retryUploadHandler.ts:11:router.post("/upload/:applicationId", upload.single("document"), async (req, res) => {
server/routes/recording.webhooks.ts:9:router.post('/voice/recording-status', async (req, res) => {
server/routes/recording.webhooks.ts:63:router.post('/conference/recording-status', async (req, res) => {
server/routes/rbacUsers.ts:37:router.get('/', async (req: RBACRequest, res) => {
server/routes/rbacUsers.ts:142:router.post('/', async (req: RBACRequest, res) => {
server/routes/rbacUsers.ts:260:router.patch('/:id', async (req: RBACRequest, res) => {
server/routes/rbacUsers.ts:435:router.delete('/:id', async (req: RBACRequest, res) => {
server/routes/rbacUsers.ts:514:router.delete('/:id/hard-delete', async (req: RBACRequest, res) => {
server/routes/rbacUsers.ts:629:router.get('/roles', (req: RBACRequest, res) => {
server/routes/rbac.ts:16:router.get('/test', (req: Request, res: Response) => {
server/routes/rbacLenderProducts.ts:112:router.get('/', async (req: any, res: any) => {
server/routes/rbacLenderProducts.ts:160:router.post('/', async (req: any, res: any) => {
server/routes/rbacLenderProducts.ts:226:router.patch('/:id', async (req: any, res) => {
server/routes/rbacLenderProducts.ts:305:router.delete('/:id', async (req, res) => {
server/routes/rbacLenderProducts.ts:362:router.get('/history', async (req, res) => {
server/routes/rbacLenderProducts.ts:409:router.get('/history/:id', async (req, res) => {
server/routes/quickS3Test.ts:6:router.get('/test-bucket-exists', async (req, res) => {
server/routes/push.ts:17:router.post("/subscribe", async (req, res) => {
server/routes/push.ts:40:router.post("/unsubscribe", async (req, res) => {
server/routes/push.ts:56:router.get("/subscriptions", async (req, res) => {
server/routes/push-multiplatform.ts:36:router.post('/register', async (req, res) => {
server/routes/push-multiplatform.ts:126:router.post('/unregister', async (req, res) => {
server/routes/push-multiplatform.ts:188:router.post('/broadcast', async (req, res) => {
server/routes/push-multiplatform.ts:363:router.get('/devices', async (req, res) => {
server/routes/push-multiplatform.ts:406:router.get('/vapid-key', (req, res) => {
server/routes/publicApplications.ts:55:router.get('/debug/applications/:id', async (req, res) => {
server/routes/publicApplications.ts:92:router.get('/:id', async (req, res) => {
server/routes/pipelineBoard.ts:58:router.get("/board", async (req, res) => {
server/routes/pipelineBoard.ts:88:router.get("/board/summary", async (req, res) => {
server/routes/pipelineAutomation.ts:16:router.post('/evaluate/:applicationId', async (req, res) => {
server/routes/pipelineAutomation.ts:43:router.post('/apply/:applicationId', async (req, res) => {
server/routes/pipelineAutomation.ts:70:router.post('/batch-fix', async (req, res) => {
server/routes/pipelineAutomation.ts:94:router.post('/update/:applicationId', async (req, res) => {
server/routes/pipelineAutomation.ts:120:router.post('/test-sms/:applicationId', async (req, res) => {
server/routes/pipelineAutomation.ts:151:router.post('/simulate-stage-change', async (req, res) => {
server/routes/persistenceValidation.ts:29:router.post('/enhanced-upload', upload.single('file'), async (req, res) => {
server/routes/persistenceValidation.ts:99:router.get('/alert-status', async (req, res) => {
server/routes/persistenceValidation.ts:110:router.get('/recent-alerts', async (req, res) => {
server/routes/persistenceValidation.ts:121:router.post('/clear-alerts', async (req, res) => {
server/routes/pdfGeneration.ts:7:router.post('/:id/generate-pdf', async (req, res) => {
server/routes/passwordRecovery.ts:26:router.post('/request-password-reset', async (req: Request, res: Response) => {
server/routes/passwordRecovery.ts:108:router.post('/reset-password', async (req: Request, res: Response) => {
server/routes/passwordRecovery.ts:218:router.post('/force-password-change', async (req: Request, res: Response) => {
server/routes/ocrManualTrigger.ts:16:router.post('/application/:applicationId', async (req, res) => {
server/routes/ocrManualTrigger.ts:149:router.post('/banking-analysis/:applicationId', async (req, res) => {
server/routes/ocrManualTrigger.ts:203:router.get('/status/:applicationId', async (req, res) => {
server/routes/ocrInsights.ts:10:router.get('/health', (req, res) => {
server/routes/ocrInsights.ts:23:router.get('/:applicationId', async (req, res) => {
server/routes/ocrInsights.ts:52:router.post('/comprehensive-analysis', async (req, res) => {
server/routes/ocrInsights.ts:79:router.post('/reprocess/:applicationId', async (req, res) => {
server/routes/notifications.ts:30:router.post('/subscribe', async (req, res) => {
server/routes/notifications.ts:72:router.post('/test', async (req, res) => {
server/routes/notifications.ts:141:router.post('/send', async (req, res) => {
server/routes/notifications.ts:298:router.get('/vapid-key', (req, res) => {
server/routes/notifications.ts:322:router.post('/schedule', async (req, res) => {
server/routes/notifications.ts:385:router.post('/send', async (req, res) => {
server/routes/notifications.ts:432:router.post('/process-scheduled', async (req, res) => {
server/routes/notifications.ts:516:router.get('/vapid-public-key', (req, res) => {
server/routes/notifications.ts:524:router.get('/scheduled/:userId', async (req, res) => {
server/routes/monitoring.ts:18:router.get('/health/comprehensive', async (req, res) => {
server/routes/monitoring.ts:53:router.get('/health/queue', async (req, res) => {
server/routes/monitoring.ts:68:router.get('/health/storage', async (req, res) => {
server/routes/monitoring.ts:88:router.get('/metrics/auth', async (req, res) => {
server/routes/missingDocsReminderRoutes.ts:15:router.post('/send-reminders', async (req, res) => {
server/routes/missingDocsReminderRoutes.ts:37:router.get('/status', async (req, res) => {
server/routes/microsoftGraphContactCard.ts:30:router.get('/oauth', (req, res) => {
server/routes/microsoftGraphContactCard.ts:75:router.get('/callback', async (req, res) => {
server/routes/microsoftGraphContactCard.ts:167:router.post('/send', async (req, res) => {
server/routes/microsoftGraphContactCard.ts:323:router.get('/inbox', async (req, res) => {
server/routes/microsoftGraphContactCard.ts:416:router.get('/track/email-open/:trackingId', async (req, res) => {
server/routes/microsoftGraphContactCard.ts:456:router.get('/accounts', async (req, res) => {
server/routes/microsoftGraphContactCard.ts:507:router.get('/health', (req, res) => {
server/routes/marketing-reports.ts:9:router.get('/monthly/:date', async (req, res) => {
server/routes/marketing-reports.ts:50:router.get('/monthly/:date/pdf', async (req, res) => {
server/routes/marketing-reports.ts:138:router.get('/monthly', async (req, res) => {
server/routes/marketing-campaigns.ts:9:router.get('/campaigns', async (req, res) => {
server/routes/marketing-campaigns.ts:93:router.get('/analytics/funnel', async (req, res) => {
server/routes/marketing-campaigns.ts:121:router.get('/analytics/attribution', async (req, res) => {
server/routes/marketing-budgets.ts:9:router.get('/budgets', async (req, res) => {
server/routes/marketing-budgets.ts:81:router.get('/audiences', async (req, res) => {
server/routes/marketing-abtests.ts:9:router.get('/ab-tests', async (req, res) => {
server/routes/marketing-abtests.ts:156:router.post('/ab-tests', async (req, res) => {
server/routes/loanProducts.ts:10:router.get('/loan-products/required-documents/:category', async (req, res) => {
server/routes/loan-products.ts:9:router.get('/documents/:category', async (req, res) => {
server/routes/lenderProductsHealth.ts:18:router.get('/health', async (req, res) => {
server/routes/lenderProductsHealth.ts:90:router.post('/rebuild', async (req, res) => {
server/routes/lenderProductsHealth.ts:129:router.get('/sync-status', async (req, res) => {
server/routes/lenderProductsHealth.ts:186:router.post('/sync-external', async (req, res) => {
server/routes/lenderCredentials.ts:10:router.get('/lenders/:lenderName/credentials', async (req, res) => {
server/routes/lenderCredentials.ts:50:router.post('/lenders/:lenderName/credentials', async (req, res) => {
server/routes/lenderCredentials.ts:109:router.delete('/lenders/:lenderName/credentials', async (req, res) => {
server/routes/lenderCredentials.ts:138:router.delete('/lenders/:lenderName/delete', async (req, res) => {
server/routes/internalDocumentTypes.ts:20:router.get('/', (req: Request, res: Response) => {
server/routes/internalDocumentTypes.ts:56:router.get('/dropdown', (req: Request, res: Response) => {
server/routes/industry-benchmarking.ts:43:router.post('/analyze/:applicationId', simpleAuth, async (req, res) => {
server/routes/industry-benchmarking.ts:189:router.get('/results/:applicationId', simpleAuth, async (req, res) => {
server/routes/industry-benchmarking.ts:290:router.get('/industry/:industry', simpleAuth, async (req, res) => {
server/routes/industry-benchmarking.ts:366:router.get('/industries', simpleAuth, async (req, res) => {
server/routes/industry-benchmarking.ts:392:router.get('/stats', simpleAuth, async (req, res) => {
server/routes/industry-benchmarking.ts:471:router.post('/bulk-analyze', simpleAuth, async (req, res) => {
server/routes/industry-benchmarking.ts:553:router.post('/generate-report/:applicationId', simpleAuth, async (req, res) => {
server/routes/healthCheck.ts:12:router.get('/health', async (req, res) => {
server/routes/fraud-detection.ts:25:router.post('/analyze/:documentId', simpleAuth, async (req, res) => {
server/routes/fraud-detection.ts:79:router.post('/cross-application/:applicationId', simpleAuth, async (req, res) => {
server/routes/fraud-detection.ts:125:router.get('/results/:documentId', simpleAuth, async (req, res) => {
server/routes/fraud-detection.ts:162:router.get('/stats', simpleAuth, async (req, res) => {
server/routes/fraud-detection.ts:192:router.get('/flagged', simpleAuth, async (req, res) => {
server/routes/twilio.disabled.ts:24:router.get('/health', async (req, res) => {
server/routes/twilio.disabled.ts:41:router.get('/config', async (req, res) => {
server/routes/twilio.disabled.ts:67:router.post('/verify/request-otp', async (req, res) => {
server/routes/twilio.disabled.ts:106:router.post('/verify/check-otp', async (req, res) => {
server/routes/twilio.disabled.ts:148:router.post('/sms/send', async (req, res) => {
server/routes/twilio.disabled.ts:188:router.get('/sms/status/:messageSid', async (req, res) => {
server/routes/twilio.disabled.ts:220:router.post('/voice/call', async (req, res) => {
server/routes/twilio.disabled.ts:271:router.post('/voice/twiml', (req, res) => {
server/routes/twilio.disabled.ts:285:router.post('/voice/handle-input', (req, res) => {
server/routes/twilio.disabled.ts:312:router.get('/voice/recordings/:callSid', async (req, res) => {
server/routes/twilio.disabled.ts:344:router.post('/email/send', async (req, res) => {
server/routes/twilio.disabled.ts:393:router.post('/notify/send', async (req, res) => {
server/routes/twilio.disabled.ts:438:router.post('/notify/create-binding', async (req, res) => {
server/routes/twilio.disabled.ts:480:router.get('/lookup/:phoneNumber', async (req, res) => {
server/routes/twilio.disabled.ts:517:router.get('/lookup/:phoneNumber/line-type', async (req, res) => {
server/routes/twilio.disabled.ts:558:router.post('/webhooks/sms-status', (req, res) => {
server/routes/twilio.disabled.ts:579:router.post('/webhooks/call-status', (req, res) => {
server/routes/twilio.disabled.ts:599:router.post('/webhooks/recording-status', (req, res) => {
server/routes/twilio.disabled.ts:620:router.get('/phone/:silo', async (req, res) => {
server/routes/twilio.disabled.ts:648:router.post('/webhook/incoming-call', async (req, res) => {
server/routes/twilioDebug.ts:12:router.get('/twilio', async (req, res) => {
server/routes/twilioDebug.ts:139:router.post('/reset-rate-limits', (req, res) => {
server/routes/twilioDebug.ts:162:router.post('/twilio/test-otp', async (req, res) => {
server/routes/adminUploadDashboard.ts:13:router.get('/metrics', async (req, res) => {
server/routes/adminUploadDashboard.ts:110:router.get('/health', async (req, res) => {
server/routes/adminUploadDashboard.ts:184:router.post('/retry-upload/:documentId', async (req, res) => {
server/routes/adminUploadDashboard.ts:234:router.post('/retry-all-fallbacks', async (req, res) => {
server/routes/adminUploadDashboard.ts:267:router.get('/audit-report', async (req, res) => {
server/routes/twilioContactCard.ts:27:router.post('/call', async (req, res) => {
server/routes/twilioContactCard.ts:111:router.post('/twiml', (req, res) => {
server/routes/twilioContactCard.ts:136:router.post('/call-status', async (req, res) => {
server/routes/twilioContactCard.ts:195:router.post('/sms/send', async (req, res) => {
server/routes/twilioContactCard.ts:284:router.post('/sms-status', async (req, res) => {
server/routes/twilioContactCard.ts:313:router.post('/sms-inbound', async (req, res) => {
server/routes/twilioContactCard.ts:395:router.get('/sms/conversations/:contactId', async (req, res) => {
server/routes/twilioContactCard.ts:430:router.get('/health', (req, res) => {
server/routes/twilioCalls.ts:12:router.post('/calls', (req, res) => {
server/routes/twilioCalls.ts:31:router.post('/status', async (req, res) => {
server/routes/twilioCalls.ts:70:router.post('/make-call', async (req, res) => {
server/routes/twilioCalls.ts:129:router.get('/history', async (req, res) => {
server/routes/testWebhook.ts:6:router.post('/webhook', (req, res) => {
server/routes/testS3DocumentAccess.ts:7:router.get('/test-document-access', async (req, res) => {
server/routes/testRouter.ts:6:router.delete('/simple-delete', (req, res) => {
server/routes/testRouter.ts:17:router.get('/simple-get', (req, res) => {
server/routes/testCorrectBucket.ts:6:router.get('/test-correct-bucket', async (req, res) => {
server/routes/test-applications.ts:6:router.get('/', (req: Request, res: Response) => {
server/routes/testAcceptDocuments.ts:8:router.post('/accept-all/:applicationId', async (req, res) => {
server/routes/templateSend.ts:61:router.post("/send-template", async (req, res) => {
server/routes/templateSend.ts:98:router.post("/send-text", async (req, res) => {
server/routes/systemValidation.ts:9:router.get('/status', async (req, res) => {
server/routes/systemValidation.ts:30:router.post('/backfill', async (req, res) => {
server/routes/systemMaintenance.ts:12:router.post('/backfill-checksums', async (req, res) => {
server/routes/systemMaintenance.ts:33:router.get('/orphaned-files', async (req, res) => {
server/routes/systemMaintenance.ts:54:router.post('/fix-missing-file/:documentId', async (req, res) => {
server/routes/systemDiagnostics.ts:24:router.get('/test-s3-basic', async (req: Request, res: Response) => {
server/routes/systemDiagnostics.ts:54:router.get('/test-s3-upload', async (req: Request, res: Response) => {
server/routes/systemDiagnostics.ts:84:router.get('/test-s3-presigned', async (req: Request, res: Response) => {
server/routes/systemDiagnostics.ts:116:router.get('/test-s3-comprehensive', async (req: Request, res: Response) => {
server/routes/systemDiagnostics.ts:162:router.get('/environment-info', async (req: Request, res: Response) => {
server/routes/smsStageNotifications.ts:119:router.post('/stage-transition', async (req, res) => {
server/routes/smsStageNotifications.ts:157:router.post('/test', async (req, res) => {
server/routes/silos.ts:9:router.get('/', async (req, res) => {
server/routes/settingsUsers.ts:47:router.get('/', async (req, res) => {
server/routes/settingsUsers.ts:86:router.post('/', async (req, res) => {
server/routes/settingsUsers.ts:167:router.patch('/:id', async (req, res) => {
server/routes/settingsUsers.ts:233:router.delete('/:id', async (req, res) => {
server/routes/securityStatus.ts:12:router.get('/security-status', async (req, res) => {
server/routes/securityHistory.ts:30:router.post('/security/log', async (req, res) => {
server/routes/securityHistory.ts:77:router.get('/security/history', async (req, res) => {
server/routes/securityHistory.ts:108:router.get('/security/dashboard', async (req, res) => {
server/routes/securityHistory.ts:172:router.get('/security/test/:testId', async (req, res) => {
server/routes/s3UploadRoutes.ts:47:router.post('/s3-upload/:applicationId', upload.single('document'), async (req: Request, res: Response) => {
server/routes/s3Test.ts:15:router.get('/', async (req: Request, res: Response) => {
server/routes/s3TestRouter.ts:7:router.get('/test', async (req, res) => {
server/routes/s3TestRouter.ts:48:router.get('/status', async (req, res) => {
server/routes/s3ProductionTest.ts:23:router.get('/test-config', async (req, res) => {
server/routes/s3ProductionTest.ts:51:router.post('/test-upload', upload.single('document'), async (req, res) => {
server/routes/s3Management.ts:14:router.post('/create-bucket', async (req, res) => {
server/routes/s3Management.ts:87:router.get('/list-buckets', async (req, res) => {
server/routes/s3Integration.ts:16:router.get('/test-connection', async (req, res) => {
server/routes/s3Integration.ts:103:router.get('/test-presigned-url/:storageKey', async (req, res) => {
server/routes/s3Integration.ts:133:router.get('/list-documents/:prefix?', async (req, res) => {
server/routes/s3Integration.ts:162:router.get('/config-status', (req, res) => {
server/routes/s3DocumentRoutes.ts:20:router.get('/:documentId/s3-preview', async (req, res) => {
server/routes/s3DocumentRoutes.ts:82:router.get('/:documentId/s3-download', async (req, res) => {
server/routes/s3DocumentRoutes.ts:143:router.get('/s3-health', async (req, res) => {
server/routes/s3Diagnostics.ts:20:router.get('/s3-status/:applicationId', async (req, res) => {
server/routes/s3Diagnostics.ts:134:router.get('/s3-test-single/:documentId', async (req, res) => {
server/routes/s3Debug.ts:15:router.get('/test', async (req, res) => {
server/routes/s3Debug.ts:52:router.get('/test-document/:documentId', async (req, res) => {
server/routes/s3Debug.ts:139:router.get('/test-bucket-url', async (req, res) => {
server/routes/s3BucketTest.ts:15:router.get('/test-buckets', async (req, res) => {
server/routes/risk.ts:26:router.post("/analyze/:applicationId", simpleAuth, async (req, res) => {
server/routes/risk.ts:151:router.get("/summary", simpleAuth, async (req, res) => {
server/routes/risk.ts:181:router.get("/history", simpleAuth, async (req, res) => {
server/routes/risk.ts:214:router.get("/metrics", simpleAuth, async (req, res) => {
server/routes/risk.ts:252:router.get("/assessment/:applicationId", simpleAuth, async (req, res) => {
server/routes/risk.ts:283:router.post("/stress-test", simpleAuth, async (req, res) => {
server/routes/risk.ts:356:router.get("/compliance-check/:applicationId", simpleAuth, async (req, res) => {
server/routes/risk.ts:460:router.post("/industry-benchmark", simpleAuth, async (req, res) => {
server/routes/risk.ts:518:router.get("/assessments", simpleAuth, async (req, res) => {
server/routes/dbdebug.ts:7:router.get('/debug', async (req, res) => {
server/routes/tenantSwitch.ts:8:router.get("/current", requireAnyRole(["admin","manager","agent","marketing","lender","referrer"]), (req: any, res) => {
server/routes/tenantSwitch.ts:15:router.post("/switch", requireAnyRole(["admin","manager"]), (req: any, res) => {
server/routes/tenantSwitch.ts:36:router.get("/config", requireAnyRole(["admin","manager","agent","marketing","lender","referrer"]), (req: any, res) => {
server/routes/contactImport.ts:8:router.post("/clone", requireAnyRole(["admin","manager"]), async (req: any, res) => {
server/routes/contactImport.ts:73:router.post("/bulk-import", requireAnyRole(["admin","manager"]), async (req: any, res) => {
server/routes/contactImport.ts:116:router.post("/preview", requireAnyRole(["admin","manager"]), async (req: any, res) => {
server/routes/unifiedComms.ts:8:router.get("/", requireAnyRole(["admin","manager","agent","marketing"]), async (req: any, res) => {
server/routes/unifiedComms.ts:55:router.get("/contacts/search", requireAnyRole(["admin","manager","agent","marketing"]), async (req: any, res) => {
server/routes/lenderApps.ts:8:router.get("/", requireRole(["lender","manager","admin"]), async (req:any, res) => {
server/routes/lenderApps.ts:16:router.post("/:appId/accept", requireRole(["lender","manager","admin"]), async (req:any, res) => {
server/routes/lenderApps.ts:44:router.post("/:appId/decline", requireRole(["lender","manager","admin"]), async (req:any, res) => {
server/routes/adminImpersonate.ts:9:router.post("/impersonate", requireRole(["admin"]), (req: any, res) => {
server/routes/adminImpersonate.ts:18:router.post("/impersonate/clear", requireRole(["admin"]), (req: any, res) => {
server/routes/audit.ts:6:router.get("/", requireRole(["manager","admin"]), (_req,res)=> res.json({ items: audit.recent() }));
server/routes/adminLenderReports.ts:6:router.get("/:lenderId", requireRole(["manager","admin"]), (req:any,res)=>{
server/routes/adminLenderReports.ts:10:router.post("/", requireRole(["manager","admin"]), (req:any,res)=>{
server/routes/adminLenderReports.ts:18:router.delete("/:id", requireRole(["manager","admin"]), (req:any,res)=>{
server/routes/lenderReports.ts:6:router.get("/", requireAnyRole(["lender","manager","admin"]), (req:any, res) => {
server/routes/lenderReports.ts:17:router.get("/export.csv", requireAnyRole(["lender","manager","admin"]), (req:any, res)=>{
server/routes/adminReportsPrefs.ts:5:router.get("/:lenderId", requireRole(["manager","admin"]), (req:any, res)=>{
server/routes/adminReportsPrefs.ts:10:router.post("/:lenderId", requireRole(["manager","admin"]), (req:any, res)=>{
server/routes/openapi.ts:4:router.get("/openapi.json", (_req,res)=>{
server/routes/dev.ts:5:router.post("/impersonate", (req, res) => {
server/routes/dev.ts:21:router.post("/impersonate/clear", (req, res) => {
server/routes/lender.ts:6:router.get("/me/products", requireRole(["lender","admin","manager"]), (_req,res)=>{
server/routes/lender.ts:16:router.post("/me/products", requireRole(["lender","admin","manager"]), (req,res)=>{
server/routes/lender.ts:22:router.get("/me/apps", requireRole(["lender","admin","manager"]), async (req,res)=>{
server/routes/exports.ts:4:router.get("/tasks", async (req, res) => {
server/routes/exports.ts:32:router.get("/analytics", async (req, res) => {
server/routes/analytics.ts:5:router.get("/comms", async (req,res)=>{
server/routes/transcripts.ts:7:router.post("/voice/transcript", async (req, res) => {
server/routes/transcripts.ts:26:router.post("/search", async (req, res)=>{
server/routes/routing.ts:6:router.get("/agents", (req,res)=> res.json({ items: routerStore.listAgents() }));
server/routes/routing.ts:7:router.post("/agents", requireRole(["manager","admin"]), (req,res)=>{
server/routes/routing.ts:12:router.post("/agents/:id/online", (req,res)=>{ routerStore.setOnline(req.params.id, !!req.body.online); res.json({ ok:true }); });
server/routes/routing.ts:14:router.get("/queues", (req,res)=> res.json({ items: routerStore.listQueues() }));
server/routes/routing.ts:15:router.post("/queues", requireRole(["manager","admin"]), (req,res)=>{
server/routes/routing.ts:21:router.get("/assign", (req,res)=>{
server/routes/ocr.ts:6:router.get("/insights", async (req, res) => {
server/routes/banking.ts:6:router.get("/metrics", async (req, res) => {
server/routes/communications.ts:13:router.get("/threads", async (req: Request, res: Response) => {
server/routes/communications.ts:48:router.get("/", async (req: Request, res: Response) => {
server/routes/communications.ts:82:router.get("/templates", async (req: Request, res: Response) => {
server/routes/communications.ts:109:router.post("/sms", async (req: Request, res: Response) => {
server/routes/communications.ts:134:router.post("/email", async (req: Request, res: Response) => {
server/routes/communications.ts:158:router.post("/call", async (req: Request, res: Response) => {
server/routes/communications.ts:186:router.get("/contact-by-phone", async (req: Request, res: Response) => {
server/routes/contactsDedup.ts:20:router.get('/duplicates', limiter, async (req, res) => {
server/routes/contactsDedup.ts:67:router.post('/merge', limiter, async (req, res) => {
server/routes/contactsTaxonomy.ts:211:router.get('/contacts', async (req, res) => {
server/routes/contactsTaxonomy.ts:239:router.patch('/contacts/:id', async (req, res) => {
server/routes/contactsTaxonomy.ts:264:router.post('/contacts/bulk', async (req, res) => {
server/routes/emailTemplates.ts:8:router.get("/templates", (req, res) => {
server/routes/emailTemplates.ts:19:router.post("/templates", (req, res) => {
server/routes/emailTemplates.ts:43:router.delete("/templates/:id", (req, res) => {
server/routes/emailTemplates.ts:55:router.get("/settings", (req, res) => {
server/routes/emailTemplates.ts:66:router.post("/settings", (req, res) => {
server/routes/emailTemplates.ts:77:router.post("/test-send", async (req, res) => {
server/routes/emailTracking.ts:13:router.get("/open/:commId.gif", (req, res) => {
server/routes/emailTracking.ts:41:router.get("/click/:commId", (req, res) => {
server/routes/appDetail.ts:20:appDetailRouter.get("/:appId/overview", async (req, res) => {
server/routes/appDetail.ts:41:appDetailRouter.get("/:appId/timeline", async (req, res) => {
server/routes/appDetail.ts:77:appDetailRouter.post("/:appId/actions/email", async (req, res) => {
server/routes/appDetail.ts:109:appDetailRouter.post("/:appId/actions/task", async (req, res) => {
server/routes/appDetail.ts:139:appDetailRouter.post("/:appId/actions/call", async (req, res) => {
server/routes/appDetail.ts:163:appDetailRouter.post("/:appId/actions/sms", async (req, res) => {
server/routes/appDetail.ts:188:appDetailRouter.get("/:appId/deal", async (req, res) => {
server/routes/appDetail.ts:207:appDetailRouter.get("/:appId/email-attachments", async (req, res) => {
server/routes/canonicalAuth.ts:14:router.post("/login", async (req: Request, res: Response) => {
server/routes/canonicalAuth.ts:95:router.get("/user", async (req: Request, res: Response) => {
server/routes/webhooks-twilio-status.ts:4:router.post('/sms-status', (req, res) => {
server/routes/webhooks-twilio-status.ts:21:router.post('/voice-status', (req, res) => {
server/routes/userManagement.ts:22:router.post('/', developmentAuth, requireRoles('admin', 'staff'), async (req: Request, res: Response) => {
server/routes/userManagement.ts:118:router.patch('/:id', developmentAuth, requireOwnershipOrAdmin(), async (req: Request, res: Response) => {
server/routes/userManagement.ts:207:router.get('/', developmentAuth, requireRoles('admin', 'staff'), async (req: Request, res: Response) => {
server/routes/userManagement.ts:265:router.delete('/:id', developmentAuth, requireRoles('admin'), async (req: Request, res: Response) => {
server/routes/userManagement.ts:323:router.post('/password-reset', async (req: Request, res: Response) => {
server/routes/userManagement.ts:395:router.post('/password-reset/verify', async (req: Request, res: Response) => {
server/routes/upload.ts:129:router.post("/:applicationId", 
server/routes/twilio-health.ts:6:router.get("/health", async (req,res)=>{
server/routes/verify-only.ts:41:router.post("/request", async (req,res)=>{
server/routes/verify-only.ts:55:router.post("/check", async (req,res)=>{
server/routes/integrations.ts:6:router.get("/status", async (req, res) => {
server/routes/integrations.ts:42:router.post("/test/:service", async (req, res) => {
server/routes/applications-basic.ts:13:router.get("/applications", async (req, res) => {
server/routes/applications-basic.ts:44:router.get("/applications/:id", async (req, res) => {
server/routes/applications-basic.ts:79:router.patch("/applications/:id", async (req, res) => {
server/routes/deployment-health.ts:8:router.get("/health", async (req, res) => {
server/routes/deployment-health.ts:35:router.get("/system", async (req, res) => {
server/routes/deployment-health.ts:71:router.post("/bootstrap", async (req, res) => {
server/routes/pipeline-move.ts:15:router.post("/move", async (req,res)=>{
server/routes/uploadFreeze.ts:40:router.get('/freeze-status', async (req, res) => {
server/routes/uploadFreeze.ts:51:router.post('/freeze', async (req, res) => {
server/routes/uploadFreeze.ts:78:router.post('/unfreeze', async (req, res) => {
server/routes/twilioTesting.disabled.ts:22:router.get('/health-check', async (req, res) => {
server/routes/twilioTesting.disabled.ts:81:router.get('/test-verify', async (req, res) => {
server/routes/twilioTesting.disabled.ts:114:router.get('/test-messaging', async (req, res) => {
server/routes/twilioTesting.disabled.ts:148:router.get('/test-voice', async (req, res) => {
server/routes/twilioTesting.disabled.ts:183:router.get('/test-email', async (req, res) => {
server/routes/twilioTesting.disabled.ts:216:router.get('/test-notify', async (req, res) => {
server/routes/twilioTesting.disabled.ts:250:router.get('/test-lookup', async (req, res) => {
server/routes/twilioTesting.disabled.ts:277:router.post('/integration-test', async (req, res) => {
server/routes/twilioTesting.disabled.ts:378:router.get('/sample-requests', (req, res) => {
server/routes/applications/overrideSigning.ts:32:router.patch('/:id/override-signing', async (req, res) => {
server/routes/lender2FA.ts:13:router.post('/send-2fa/:lenderId', async (req: any, res: any) => {
server/routes/lender2FA.ts:48:router.post('/verify-2fa/:lenderId', async (req: any, res: any) => {
server/routes/lender2FA.ts:84:router.get('/status/:lenderId', async (req: any, res: any) => {
server/routes/lender2FA.ts:112:router.patch('/mobile-phone/:lenderId', async (req: any, res: any) => {
server/routes/twilioStatus.ts:16:router.post("/status-callback", async (req, res) => {
server/routes/marketing.ts:6:router.get('/campaigns', async (req, res) => {
server/routes/marketing.ts:41:router.get('/connected-accounts', async (req, res) => {
server/routes/marketing.ts:60:router.get('/google-ads/campaigns', async (req, res) => {
server/routes/marketing.ts:73:router.post('/google-ads/campaigns', async (req, res) => {
server/routes/marketing.ts:92:router.patch('/google-ads/campaigns/:id/status', async (req, res) => {
server/routes/applications/submit.ts:9:router.post('/:id/submit', async (req, res) => {
server/routes/documentRepair.ts:8:router.post('/run', async (req: any, res: any) => {
server/routes/documentRepair.ts:39:router.get('/status', async (req: any, res: any) => {
server/routes/voice-events.ts:9:router.post("/voicemail", async (req: Request, res: Response) => {
server/routes/voice-events.ts:76:router.post("/events", async (req: Request, res: Response) => {
server/routes/documentRecovery.ts:8:router.get('/preview', async (req: any, res: any) => {
server/routes/documentRecovery.ts:34:router.post('/execute', async (req: any, res: any) => {
server/routes/applications/upload.ts:63:router.post('/:applicationId', upload.array('files', 10), async (req: any, res) => {
server/routes/voice-actions.ts:14:router.post("/transfer", async (req: Request, res: Response) => {
server/routes/voice-actions.ts:35:router.post("/conference", async (req, res) => {
server/routes/voice-actions.ts:57:router.post("/recording", async (req, res) => {
server/routes/lenderProducts.ts:18:router.get("/", async (req, res) => {
server/routes/lenderProducts.ts:108:router.post("/", async (req, res) => {
server/routes/lenderProducts.ts:172:router.put("/:id", async (req, res) => {
server/routes/voice-speak-code.ts:10:router.post('/speak-code', (req, res) => {
server/routes/matchingEngine.ts:32:router.get('/:applicationId', async (req: any, res: any) => {
server/routes/matchingEngine.ts:234:router.post('/transmit/:applicationId/:productId', async (req: any, res: any) => {
server/routes/applications/signatureStatus.ts:9:signatureStatusRouter.get("/:id/signature-status", async (req, res) => {
server/routes/schemaRoutes.ts:6:router.get("/api/schema/lender-products", (req, res) => {
server/routes/documentVersioning.ts:13:router.get("/:id/versions", async (req: any, res: any) => {
server/routes/documentVersioning.ts:29:router.post("/:id/rollback/:versionNumber", async (req: any, res: any) => {
server/routes/applications/complete.ts:9:router.post('/:id/complete', async (req, res) => {
server/routes/ai-train.ts:92:router.post('/upload', upload.single('file'), async (req, res) => {
server/routes/ai-train.ts:150:router.get('/docs', async (req, res) => {
server/routes/ai-train.ts:194:router.get('/docs/:id', async (req, res) => {
server/routes/ai-train.ts:222:router.delete('/docs/:id', async (req, res) => {
server/routes/ai-train.ts:259:router.get('/file/:filename', (req, res) => {
server/routes/ai-train.ts:272:router.get('/stats', async (req, res) => {
server/routes/automationDemo.ts:8:router.post('/demo/trigger-automation/:applicationId', async (req: any, res: any) => {
server/routes/automationDemo.ts:35:router.post('/demo/test-sms/:applicationId', async (req: any, res: any) => {
server/routes/client-api.ts:12:router.get("/lender-products", clientApiAuth, getLenderProducts);
server/routes/client-api.ts:43:router.post("/applications", async (req: Request, res: Response) => {
server/routes/client-api.ts:117:router.get("/applications/:id", async (req: Request, res: Response) => {
server/routes/client-api.ts:161:router.post("/documents/upload", async (req: Request, res: Response) => {
server/routes/client-api.ts:223:router.post("/chat/start", async (req: Request, res: Response) => {
server/routes/client-api.ts:279:router.post("/issues/report", async (req: Request, res: Response) => {
server/routes/client-api.ts:324:router.get("/health", (req: Request, res: Response) => {
server/routes/feedback.ts:48:router.post('/', upload.single('screenshot'), async (req, res) => {
server/routes/feedback.ts:86:router.get('/', async (req, res) => {
server/routes/feedback.ts:129:router.get('/:id', async (req, res) => {
server/routes/feedback.ts:174:router.get('/screenshot/:filename', (req, res) => {
server/routes/feedback.ts:187:router.patch('/:id', async (req, res) => {
server/routes/publicLenderProducts.ts:12:router.get("/public-lender-products", clientApiAuth, async (_req, res) => {
server/routes/test-client.ts:6:router.get("/test", (req, res) => {
server/routes/lenderOutcomes.ts:21:router.post('/outcome', async (req: any, res) => {
server/routes/lenderOutcomes.ts:100:router.post('/webhook', async (req: any, res) => {
server/routes/lenderOutcomes.ts:182:router.get('/outcomes/health', (req, res) => {
server/routes/wsStatus.ts:14:router.get("/", (_req, res) => {
server/routes/twilio-lite.ts:5:router.post("/verify/request", (req, res) => {
server/routes/twilio-lite.ts:13:router.post("/verify/check", (req, res) => {
server/routes/twilio-lite.ts:20:router.get("/lookup/:e164", (req, res) => {
server/routes/twilio-lite.ts:27:router.post("/notify/send", (req, res) => {
server/routes/twilio/voice.ts:24:router.get('/token', async (req: any, res: any) => {
server/routes/twilio/voice.ts:124:router.post('/inbound', handleIncomingCall);
server/routes/twilio/voice.ts:130:router.post('/menu', (req: Request, res: Response) => {
server/routes/twilio/voice.ts:195:router.post('/recording', (req: Request, res: Response) => {
server/routes/twilio/voice.ts:235:router.get('/test', (req: Request, res: Response) => {
server/routes/twilio/voice.ts:257:router.get('/health', (req: Request, res: Response) => {
server/routes/twilio/voice.ts:281:router.get('/status', (req: Request, res: Response) => {
server/routes/twilio/voice.ts:290:router.post('/bf', async (req: Request, res: Response) => {
server/routes/twilio/voice.ts:344:router.post('/slf', async (req: Request, res: Response) => {
server/routes/wsTestEmit.ts:10:router.post("/", (req, res) => {
server/routes/testNotification.ts:8:router.post('/trigger-chat-request', async (req: any, res) => {
server/routes/production-health.ts:9:router.get("/health", async (req, res) => {
server/routes/users-db.ts:9:router.get("/", async (req, res) => {
server/routes/users-db.ts:58:router.get("/:id", async (req, res) => {
server/routes/users-db.ts:102:router.post("/", async (req, res) => {
server/routes/users-db.ts:144:router.patch("/:id", async (req, res) => {
server/routes/users-db.ts:186:router.delete("/:id", async (req, res) => {
server/routes/applications.normalized.ts:32:router.get('/normalized', requireAuth, async (req, res) => {
server/routes/applications.normalized.ts:71:router.get('/normalized/:id', requireAuth, async (req, res) => {
server/routes/applications.normalized.ts:92:router.get('/board/normalized', requireAuth, async (req, res) => {
server/routes/twilio/status.ts:11:router.post('/', async (req, res) => {
server/routes/twilio/status.ts:95:router.get('/history', async (req, res) => {
server/routes/twilio/status.ts:154:router.get('/stats', async (req, res) => {
server/routes/twilio/sms.ts:19:router.get('/send', async (req, res) => {
server/routes/twilio/sms.ts:65:router.post('/incoming', async (req, res) => {
server/routes/crm.ts:14:router.get('/contacts', requireAuth, async (req, res) => {
server/routes/crm.ts:72:router.post('/contacts', requireAuth, async (req, res) => {
server/routes/crm.ts:97:router.post('/contacts/auto-create', async (req, res) => {
server/routes/crm.ts:135:router.get('/companies', requireAuth, async (req, res) => {
server/routes/crm.ts:187:router.get('/activity', requireAuth, async (req, res) => {
server/routes/pipeline-db.ts:27:router.get("/board", async (req, res) => {
server/routes/pipeline-db.ts:77:router.get("/cards/:id", async (req, res) => {
server/routes/pipeline-db.ts:110:router.patch("/cards/:id/move", async (req, res) => {
server/routes/twilio/reminders.ts:22:router.post('/schedule', async (req, res) => {
server/routes/twilio/reminders.ts:127:router.get('/list', (req, res) => {
server/routes/twilio/reminders.ts:150:router.delete('/:reminderId', (req, res) => {
server/routes/contacts-timeline.ts:8:router.get("/:id/timeline", async (req, res) => {
server/routes/contacts-timeline.ts:36:router.post("/:id/timeline", async (req, res) => {
server/routes/publicApplicationDocuments.ts:97:router.post('/:id/documents', upload.single('document'), async (req: Request, res: Response) => {
server/routes/comms-sms.ts:7:router.post("/", async (req, res) => {
server/routes/comms-sms.ts:34:router.get("/opt-out/:phone", async (req, res) => {
server/routes/twilio/logs.ts:77:router.get('/', async (req, res) => {
server/routes/twilio/logs.ts:141:router.get('/:type', async (req, res) => {
server/routes/twilio/logs.ts:177:router.post('/add', async (req, res) => {
server/routes/users-admin.ts:12:router.post('/create-admin', async (req, res) => {
server/routes/users-admin.ts:56:router.post('/verify-admin', async (req, res) => {
server/routes/comms-voice.ts:8:router.get("/token", async (req, res) => {
server/routes/comms-voice.ts:38:router.post("/call", async (req, res) => {
server/routes/lender-matches.ts:94:router.get('/matches', async (req, res) => {
server/routes/lender-matches.ts:229:router.get('/matches/stats', async (req, res) => {
server/routes/lender-matches.ts:261:router.post('/matches/:matchId/express-interest', async (req, res) => {
server/routes/o365.ts:18:router.get("/connect", (req, res) => {
server/routes/o365.ts:31:router.get("/callback", async (req, res) => {
server/routes/o365.ts:77:router.post("/sendMail", async (req, res) => {
server/routes/o365.ts:120:router.post("/meeting", async (req, res) => {
server/routes/lenders-management.ts:16:router.get('/', async (req, res) => {
server/routes/lenders-management.ts:78:router.get('/:id', async (req, res) => {
server/routes/lenders-management.ts:106:router.post('/', async (req, res) => {
server/routes/lenders-management.ts:150:router.patch('/:id', async (req, res) => {
server/routes/lenders-management.ts:217:router.delete('/:id', async (req, res) => {
server/routes/lenders-management.ts:256:router.post('/:id/activate', async (req, res) => {
server/routes/lenders-management.ts:295:router.get('/stats', async (req, res) => {
server/routes/client.bridge.ts:8:router.post("/chat/send", async (req, res) => {
server/routes/client.bridge.ts:25:router.post("/chat/reply", async (req, res) => {
server/routes/client.bridge.ts:42:router.post("/issues", async (req, res) => {
server/routes/oauth-connect.ts:38:router.get('/connect/:provider', async (req, res) => {
server/routes/oauth-connect.ts:96:router.get('/callback/:provider', async (req, res) => {
server/routes/twilio/compliance.ts:11:router.get('/check', async (req, res) => {
server/routes/twilio/compliance.ts:82:router.post('/opt-out', async (req, res) => {
server/routes/twilio/compliance.ts:121:router.get('/opt-out-status/:phoneNumber', async (req, res) => {
server/routes/connected-accounts.ts:9:router.get('/', async (req, res) => {
server/routes/connected-accounts.ts:57:router.delete('/:provider', async (req, res) => {
server/routes/connected-accounts.ts:100:router.get('/status', async (req, res) => {
server/routes/user-settings.ts:9:router.get('/', async (req, res) => {
server/routes/user-settings.ts:94:router.put('/', async (req, res) => {
server/routes/emergency-call-stop.ts:14:router.post('/stop-all-calls', async (req, res) => {
server/routes/emergency-call-stop.ts:69:router.get('/call-status', async (req, res) => {
server/routes/voice-outgoing.ts:11:router.post('/outgoing', async (req: Request, res: Response) => {
server/routes/voice-outgoing.ts:94:router.post('/status', (req: Request, res: Response) => {
server/routes/marketing-integration.ts:14:router.post('/api/marketing/track-attribution', async (req, res) => {
server/routes/marketing-integration.ts:77:router.get('/api/marketing/google-ads/campaigns', async (req, res) => {
server/routes/marketing-integration.ts:128:router.get('/api/marketing/linkedin/campaigns', async (req, res) => {
server/routes/marketing-integration.ts:168:router.get('/api/marketing/youtube-ads/campaigns', async (req, res) => {
server/routes/marketing-integration.ts:191:router.get('/api/marketing/attribution/:contactId', async (req, res) => {
server/routes/marketing-integration.ts:233:router.post('/api/marketing/audiences/sync', async (req, res) => {
server/routes/marketing-integration.ts:312:router.post('/api/marketing/retargeting/rules', async (req, res) => {
server/routes/marketing-integration.ts:346:router.get('/api/marketing/attribution/report', async (req, res) => {
server/routes/marketing-api.ts:62:router.get("/marketing/google-ads/campaigns", async (req, res) => {
server/routes/marketing-api.ts:77:router.post("/marketing/google-ads/campaigns", async (req, res) => {
server/routes/marketing-api.ts:107:router.get("/marketing/linkedin/campaigns", async (req, res) => {
server/routes/marketing-api.ts:122:router.post("/marketing/linkedin/campaigns", async (req, res) => {
server/routes/calls.ts:15:router.post('/accept', async (req, res) => {
server/routes/calls.ts:46:router.post('/hangup', async (req, res) => {
server/routes/calls.ts:78:router.post('/conference', async (req, res) => {
server/routes/calls.ts:116:router.post('/generate-notes', async (req, res) => {
server/routes/calls.ts:171:router.post('/mute', async (req, res) => {
server/routes/calls.ts:201:router.post('/hold', async (req, res) => {
server/routes/oauth.ts:40:router.get('/status', async (req, res) => {
server/routes/oauth.ts:70:router.get('/o365/start', async (req, res) => {
server/routes/oauth.ts:98:router.get('/o365/callback', async (req, res) => {
server/routes/oauth.ts:151:router.get('/googleads/start', async (req, res) => {
server/routes/oauth.ts:180:router.get('/googleads/callback', async (req, res) => {
server/routes/oauth.ts:232:router.get('/linkedin/start', async (req, res) => {
server/routes/oauth.ts:260:router.get('/linkedin/callback', async (req, res) => {
server/routes/oauth.ts:312:router.post('/:provider/disconnect', async (req, res) => {
server/routes/oauth.ts:350:router.post('/sync/calendar', async (req, res) => {
server/routes/ai-control-dashboard.ts:97:router.get('/dashboard', async (req, res) => {
server/routes/ai-control-dashboard.ts:145:router.get('/settings', async (req, res) => {
server/routes/ai-control-dashboard.ts:166:router.put('/settings', async (req, res) => {
server/routes/ai-control-dashboard.ts:204:router.post('/playground', async (req, res) => {
server/routes/ai-control-dashboard.ts:252:router.get('/analytics', async (req, res) => {
server/routes/ai-control-dashboard.ts:297:router.get('/training', async (req, res) => {
server/routes/ai-control-dashboard.ts:360:router.post('/feedback', async (req, res) => {
server/routes/ai-control-dashboard.ts:404:router.post('/emergency-disable', async (req, res) => {
server/routes/ai-control-dashboard.ts:435:router.get('/health', async (req, res) => {
server/routes/ai-features-extended.ts:18:router.post('/explain-document', async (req, res) => {
server/routes/ai-features-extended.ts:75:router.post('/draft-lender-email', async (req, res) => {
server/routes/ai-features-extended.ts:133:router.get('/summary-history/:applicationId', async (req, res) => {
server/routes/ai-features-extended.ts:174:router.post('/suggest-reply', async (req, res) => {
server/routes/ai-features-extended.ts:223:router.post('/summarize-call', async (req, res) => {
server/routes/ai-features-extended.ts:269:router.post('/extract-escalation', async (req, res) => {
server/routes/ai-features-extended.ts:314:router.post('/sentiment', async (req, res) => {
server/routes/ai-features-extended.ts:361:router.post('/contact-tags', async (req, res) => {
server/routes/ai-features-extended.ts:414:router.post('/deal-score', async (req, res) => {
server/routes/ai-features-extended.ts:469:router.post('/fraud-check', async (req, res) => {
server/routes/ai-features-extended.ts:527:router.get('/status', async (req, res) => {
server/routes/ai-summary.ts:21:router.get('/:applicationId', async (req, res) => {
server/routes/ai-summary.ts:55:router.post('/generate', async (req, res) => {
server/routes/ai-summary.ts:98:router.post('/:summaryId/draft', async (req, res) => {
server/routes/ai-summary.ts:138:router.post('/:summaryId/submit', async (req, res) => {
server/routes/ai-summary.ts:182:router.get('/stats/overview', async (req, res) => {
server/routes/twilio-lookup.ts:20:router.post('/lookup', async (req, res) => {
server/routes/twilio-lookup.ts:52:router.post('/lookup/batch', async (req, res) => {
server/routes/twilio-lookup.ts:91:router.post('/format', async (req, res) => {
server/routes/twilio-lookup.ts:124:router.get('/status', async (req, res) => {
server/routes/twilio-lookup.ts:145:router.post('/incoming-call-lookup', async (req, res) => {
server/routes/pdf-generation.ts:19:router.post('/test', async (req, res) => {
server/routes/pdf-generation.ts:57:router.post('/generate/:applicationId', async (req, res) => {
server/routes/pdf-generation.ts:99:router.post('/generate-all', async (req, res) => {
server/routes/pdf-generation.ts:123:router.get('/status', async (req, res) => {
server/routes/o365-integration.ts:35:router.get('/api/o365/calendar', async (req, res) => {
server/routes/o365-integration.ts:69:router.post('/api/o365/calendar', async (req, res) => {
server/routes/o365-integration.ts:102:router.get('/api/o365/emails', async (req, res) => {
server/routes/o365-integration.ts:149:router.post('/api/o365/contacts/sync', async (req, res) => {
server/routes/o365-integration.ts:218:router.get('/api/o365/availability', async (req, res) => {
server/routes/o365-integration.ts:283:router.post('/api/o365/book-meeting', async (req, res) => {
server/routes/o365-integration.ts:350:router.post('/api/o365/refresh-token', async (req, res) => {
server/routes/o365-integration.ts:361:router.get('/api/o365/status', async (req, res) => {
server/routes/twilio-diagnostics.ts:23:router.post('/run-twilio-diagnostics', async (req, res) => {
server/routes/twilio-diagnostics.ts:252:router.post('/twiml/test-call', (req, res) => {
server/routes/twilio-diagnostics.ts:264:router.post('/test-sms', async (req, res) => {
server/routes/twilio-diagnostics.ts:292:router.post('/test-call', async (req, res) => {
server/routes/integrations-api.ts:6:router.get('/status', (req, res) => {
server/routes/integrations-api.ts:97:router.get('/ms/start', (req, res) => {
server/routes/integrations-api.ts:112:router.get('/ms/callback', (req, res) => {
server/routes/integrations-api.ts:135:router.delete('/ms/disconnect', (req, res) => {
server/routes/integrations-api.ts:143:router.get('/li/start', (req, res) => {
server/routes/integrations-api.ts:158:router.get('/li/callback', (req, res) => {
server/routes/integrations-api.ts:181:router.get('/tw/start', (req, res) => {
server/routes/integrations-api.ts:196:router.get('/tw/callback', (req, res) => {
server/routes/integrations-api.ts:219:router.get('/ga/start', (req, res) => {
server/routes/integrations-api.ts:234:router.get('/ga/callback', (req, res) => {
server/routes/integrations-api.ts:257:router.post('/sg/connect', (req, res) => {
server/routes/integrations-api.ts:280:router.delete('/sg/disconnect', (req, res) => {
server/routes/integrations-api.ts:288:router.post('/tw/connect', (req, res) => {
server/routes/integrations-api.ts:311:router.delete('/tw/disconnect', (req, res) => {
server/routes/integrations-api.ts:319:router.post('/sync/:integration_id', (req, res) => {
server/routes/integrations-api.ts:331:router.get('/:integration_id/analytics', (req, res) => {
server/routes/tasks-api.ts:6:router.get('/', (req, res) => {
server/routes/tasks-api.ts:125:router.get('/:id', (req, res) => {
server/routes/tasks-api.ts:162:router.post('/', (req, res) => {
server/routes/tasks-api.ts:206:router.put('/:id', (req, res) => {
server/routes/tasks-api.ts:222:router.patch('/:id/status', (req, res) => {
server/routes/tasks-api.ts:245:router.post('/:id/comments', (req, res) => {
server/routes/tasks-api.ts:271:router.delete('/:id', (req, res) => {
server/routes/tasks-api.ts:281:router.patch('/bulk', (req, res) => {
server/routes/tasks-api.ts:299:router.post('/o365/sync', (req, res) => {
server/routes/tasks-api.ts:309:router.get('/o365/status', (req, res) => {
server/routes/calendar-events.ts:6:router.get('/events', (req, res) => {
server/routes/calendar-events.ts:81:router.post('/events', (req, res) => {
server/routes/calendar-events.ts:107:router.put('/events/:id', (req, res) => {
server/routes/calendar-events.ts:119:router.delete('/events/:id', (req, res) => {
server/routes/calendar-events.ts:129:router.post('/o365/sync', (req, res) => {
server/routes/calendar-events.ts:139:router.get('/o365/status', (req, res) => {
server/routes/contacts-seed.ts:6:router.post('/seed', (req, res) => {
server/routes/contacts-seed.ts:54:router.get('/', (req, res) => {
server/routes/contacts-seed.ts:109:router.get('/:id', (req, res) => {
server/routes/comm.ts:6:router.get('/sms', (req, res) => {
server/routes/comm.ts:46:router.post('/sms', (req, res) => {
server/routes/comm.ts:76:router.get('/email', (req, res) => {
server/routes/comm.ts:130:router.post('/email', (req, res) => {
server/routes/comm.ts:169:router.get('/calls', (req, res) => {
server/routes/comm.ts:199:router.post('/calls', (req, res) => {
server/routes/comm.ts:221:router.get('/templates', (req, res) => {
server/routes/ocr-conflicts.ts:8:router.get("/api/pipeline/cards/:id/ocr-conflicts", async (req, res) => {
server/routes/financials.ts:8:router.get("/api/pipeline/cards/:id/financials", async (req, res) => {
server/routes/financials-demo.ts:6:router.get("/api/pipeline/cards/:id/financials-demo", async (req, res) => {
server/routes/sms-notifications.ts:8:router.post("/stage-notification", async (req: Request, res: Response) => {
server/routes/contacts.adapter.ts:5:router.get("/contacts", async (req, res) => {
server/routes/approvals.ts:17:router.post('/request', async (req: TenantRequest, res) => {
server/routes/approvals.ts:90:router.post('/sms-inbound', async (req, res) => {
server/routes/approvals.ts:210:router.get('/', async (req: TenantRequest, res) => {
server/routes/approvals.ts:242:router.get('/:id', async (req: TenantRequest, res) => {
server/routes/slf-contacts-new.ts:66:router.get("/contacts/schema", async (req: Request, res: Response) => {
server/routes/slf-contacts-new.ts:79:router.get("/contacts", async (req: Request, res: Response) => {
server/routes/slf-contacts-new.ts:121:router.get("/contacts/:id", async (req: Request, res: Response) => {
server/routes/slf-contacts-new.ts:136:router.patch("/contacts/:id", express.json(), async (req: Request, res: Response) => {
server/routes/approvals_request.ts:9:router.post('/approvals/request', async (req: TenantRequest, res) => {
server/routes/approvals_list.ts:10:router.get('/approvals', async (req: TenantRequest, res) => {
server/routes/approvals_list.ts:42:router.get('/approvals/:id', async (req: TenantRequest, res) => {
server/routes/slf-contacts.ts:71:router.get("/contacts/schema", async (req: Request, res: Response) => {
server/routes/slf-contacts.ts:84:router.get("/contacts", async (req: Request, res: Response) => {
server/routes/slf-contacts.ts:139:router.get("/contacts/:id", async (req: Request, res: Response) => {
server/routes/slf-contacts.ts:158:router.patch("/contacts/:id", express.json(), async (req: Request, res: Response) => {
server/routes/slf-contacts.ts:175:router.get("/contacts/all-fields", async (req: Request, res: Response) => {
server/routes/approvals_sms_inbound.ts:28:router.post('/approvals/sms-inbound', async (req, res) => {
server/routes/ops.health.ts:5:router.get('/feature-health', async (_req, res) => {
server/routes/contacts.diag.ts:11:router.get("/dupes", async (_req, res) => {
server/routes/lenders-inspect.ts:14:LenderInspectRouter.get("/api/lenders/fields", async (req, res) => {
