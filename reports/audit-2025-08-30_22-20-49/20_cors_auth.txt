server/communications-service.ts:110:    // Initialize Twilio client if credentials are available
server/communications-service.ts:114:      console.log('ℹ️ Twilio credentials not configured - SMS/Voice features will be limited');
server/index.ts:3:import cors from "cors";
server/index.ts:13:import { corsOptions } from "./middleware/cors-ssot";
server/index.ts:24:app.options("*", cors(corsOptions));
server/index.ts:27:app.use(cors(corsOptions));
server/twilioService.ts:8:  throw new Error('Missing Twilio credentials in environment variables');
server/ocrService.ts:520:      credentials: {
server/websocket.ts:16:    cors: {
server/websocket.ts:19:      credentials: true
server/websocket.ts:28:    const allowDev = process.env.WS_ALLOW_DEV_NO_TOKEN === "1";
server/websocket.ts:32:      WS_ALLOW_DEV_NO_TOKEN: process.env.WS_ALLOW_DEV_NO_TOKEN,
server/o365/graphClient.ts:94:    throw new Error("Microsoft Graph credentials not configured");
server/replitAuth.ts:48:      // Development credentials
server/replitAuth.ts:66:        console.log("❌ [LOGIN] Invalid credentials provided");
server/replitAuth.ts:67:        res.status(401).json({ success: false, error: "Invalid credentials" });
server/auth/routes.ts:44:// Security: No hardcoded override credentials
server/auth/routes.ts:55:    if (!email || !password) return res.status(400).json({ error: "missing_credentials" });
server/auth/routes.ts:69:      if (!ok) return res.status(401).json({ error: "invalid_credentials" });
server/auth/routes.ts:88:      return res.status(401).json({ error: "invalid_credentials" });
server/auth/bootstrap.ts:13:  // The login will work via the hardcoded credentials in auth/routes.ts
server/auth/bootstrap.ts:14:  console.log("✅ [BOOTSTRAP] Skipping database operations - using hardcoded admin credentials");
server/twilio/sender.ts:7:// Only initialize Twilio if we have valid credentials
server/boot.js.DISABLED:8:const cors_1 = __importDefault(require("cors"));
server/boot.js.DISABLED:24:app.use((0, cors_1.default)({ origin: true, credentials: true }));
server/mw/security.ts:35:      // Use SAMEORIGIN unless you intentionally iframe the app elsewhere.
server/twilio/twilioClient.ts:10:  throw new Error("Twilio LIVE credentials required");
server/mw/devPreview.ts:24:    res.setHeader("X-Frame-Options", "SAMEORIGIN");
server/user-service.ts:99:    credentials: LoginCredentials, 
server/user-service.ts:111:        await this.recordLoginAttempt(credentials.email, ipAddress, false, 'rate_limited', userAgent);
server/user-service.ts:117:        .where(eq(users.email, credentials.email))
server/user-service.ts:121:        await this.recordLoginAttempt(credentials.email, ipAddress, false, 'user_not_found', userAgent);
server/user-service.ts:127:        await this.recordLoginAttempt(credentials.email, ipAddress, false, 'account_disabled', userAgent);
server/user-service.ts:132:      const isPasswordValid = await AuthUtils.comparePassword(credentials.password, user.passwordHash);
server/user-service.ts:134:        await this.recordLoginAttempt(credentials.email, ipAddress, false, 'invalid_password', userAgent);
server/user-service.ts:150:      await this.recordLoginAttempt(credentials.email, ipAddress, true, null, userAgent);
server/app.ts:3:import cors from "cors";
server/app.ts:9:app.use(cors());
server/lib/googleAds.ts:6:  credentials: process.env.GOOGLE_ADS_CREDENTIALS ? JSON.parse(process.env.GOOGLE_ADS_CREDENTIALS) : undefined
server/objectStorage.ts:16:  credentials: {
server/objectStorage.ts:21:    credential_source: {
server/objectStorage.ts:22:      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,
server/lib/graph.ts:12:// get app token (client credentials) for application permissions fallback
server/lib/aiSecurity.ts:91:const ALLOWED_DOMAINS = [
server/lib/aiSecurity.ts:101:    return ALLOWED_DOMAINS.includes(parsed.hostname);
server/config/flags.ts:3:  VERIFY_ALLOW_ADMIN_BYPASS: true,
server/test-sms.js:20:    console.error('❌ Missing Twilio credentials');
server/config/s3Config.ts:19:  credentials: {
server/config/s3Environment.ts:26:  // Required credentials
server/config/s3Environment.ts:54:      credentialsPresent: !!(this.AWS_ACCESS_KEY_ID && this.AWS_SECRET_ACCESS_KEY),
server/config/security.ts:98:      warnings.push('Twilio credentials recommended for production SMS delivery');
server/utils/security-validation.ts:75:    ALLOWED_TAGS: [],
server/utils/security-validation.ts:76:    ALLOWED_ATTR: [],
server/utils/security-validation.ts:77:    ALLOW_DATA_ATTR: false
server/utils/security-validation.ts:103:    ALLOWED_TAGS: [],
server/utils/security-validation.ts:104:    ALLOWED_ATTR: [],
server/utils/security-validation.ts:105:    ALLOW_DATA_ATTR: false
server/utils/security-validation.ts:240:    ALLOWED_TAGS: [],
server/utils/security-validation.ts:241:    ALLOWED_ATTR: [],
server/utils/security-validation.ts:242:    ALLOW_DATA_ATTR: false
server/tenancy/context.ts:11:    iframeAllow: (tenant === "slf" ? process.env.SLF_IFRAME_ALLOW : process.env.BF_IFRAME_ALLOW)?.split(",").filter(Boolean) || []
server/utils/hardenedDocumentStorage.ts:183:    // Step 5: DIRECTLY use S3 system - NO FALLBACK ALLOWED
server/security/harden.ts:3:import cors from "cors";
server/security/harden.ts:7:  const origins = (process.env.ALLOWED_ORIGINS || "").split(",").filter(Boolean);
server/security/harden.ts:24:  app.use(cors({
server/security/harden.ts:36:    credentials: true
server/utils/fileRecoveryService.ts:62:          // Update database with recovered file path - KEEP ORIGINAL FILENAME
server/utils/standardAuth.ts:122:  const ui = process.env.UI_ORIGIN || '';
server/utils/standardAuth.ts:123:  const api = process.env.API_ORIGIN || '';
server/utils/s3.ts:29:  credentials: {
server/utils/s3Upload.ts:9:  credentials: {
server/utils/s3PreSignedUrls.ts:17:  credentials: {
server/utils/awsCredentialValidator.ts:32:    // Check if credentials are set
server/utils/awsCredentialValidator.ts:42:      result.error = 'Missing AWS credentials';
server/utils/awsCredentialValidator.ts:73:    // Test 1: Verify credentials work with STS
server/utils/awsCredentialValidator.ts:168:    result.guidance = 'Please verify your AWS credentials and try again';
server/utils/environmentValidator.ts:65:      // Check for insecure values (skip admin credentials from Replit Secrets)
server/utils/pureS3Upload.ts:22:  credentials: {
server/utils/pureS3Upload.ts:127:  credentials: boolean;
server/utils/pureS3Upload.ts:135:    credentials: !!(process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY)
server/utils/s3Test.ts:5:  console.log(`🧪 [S3 TEST] Testing AWS credentials...`);
server/utils/s3Test.ts:9:  // First, check if credentials are even provided
server/utils/s3Test.ts:16:    // Test 1: Verify credentials by listing bucket
server/utils/s3Test.ts:70:      message: 'All S3 credentials and permissions verified successfully',
server/utils/s3Test.ts:98:      guidance = 'General S3 error. Please verify all credentials and permissions.';
server/utils/s3Diagnostic.ts:15:  credentials: {
server/utils/s3DebugService.ts:15:  credentialsPresent: boolean;
server/utils/s3DebugService.ts:48:      credentials: {
server/utils/s3DebugService.ts:182:      credentialsPresent: !!(process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY),
server/utils/secureS3Client.ts:12:  credentials: {
server/routes/awsCredentialCheck.ts:6:// Comprehensive AWS credential validation endpoint
server/routes/awsCredentialCheck.ts:7:router.get('/validate-credentials', async (req, res) => {
server/routes/awsCredentialCheck.ts:9:    console.log(`🔐 [AWS VALIDATION] Starting comprehensive credential validation...`);
server/routes/awsCredentialCheck.ts:14:      console.log(`✅ [AWS VALIDATION] All credentials and permissions verified`);
server/routes/awsCredentialCheck.ts:17:        message: 'AWS credentials fully validated',
server/db/schema/documentLock.ts:7:if (process.env.ALLOW_ENUM_EDITS !== "true") {
server/db/schema/documentLock.ts:9:    "[LOCKED] document_type enum is frozen. Set ALLOW_ENUM_EDITS=true to modify."
server/db/schema/documentLock.ts:28:  if (process.env.ALLOW_ENUM_EDITS !== "true") {
server/db/schema/documentLock.ts:43:    console.log(`[ENUM-LOCK] ${enumName} modification explicitly allowed by ALLOW_ENUM_EDITS flag`);
server/db/schema/documentLock.ts:51:  if (process.env.ALLOW_ENUM_EDITS !== "true") {
server/db/schema/documentLock.ts:53:    console.warn("🔒 [ENUM-LOCK] Set ALLOW_ENUM_EDITS=true to enable modifications");
server/db/schema/documentLock.ts:63:    console.log("🔓 [ENUM-LOCK] Document type enum modifications ALLOWED by environment flag");
server/db/schema/documentLock.js:10:if (process.env.ALLOW_ENUM_EDITS !== "true") {
server/db/schema/documentLock.js:11:    console.warn("[LOCKED] document_type enum is frozen. Set ALLOW_ENUM_EDITS=true to modify.");
server/db/schema/documentLock.js:26:    if (process.env.ALLOW_ENUM_EDITS !== "true") {
server/db/schema/documentLock.js:39:        console.log(`[ENUM-LOCK] ${enumName} modification explicitly allowed by ALLOW_ENUM_EDITS flag`);
server/db/schema/documentLock.js:46:    if (process.env.ALLOW_ENUM_EDITS !== "true") {
server/db/schema/documentLock.js:48:        console.warn("🔒 [ENUM-LOCK] Set ALLOW_ENUM_EDITS=true to enable modifications");
server/db/schema/documentLock.js:57:        console.log("🔓 [ENUM-LOCK] Document type enum modifications ALLOWED by environment flag");
server/routes/voice.token.ts:19:      error: 'Missing Twilio credentials',
server/middleware/cors-ssot.ts:1:import cors from "cors";
server/middleware/cors-ssot.ts:3:const ALLOWLIST: (string | RegExp)[] = [
server/middleware/cors-ssot.ts:19:export const corsOptions: cors.CorsOptions = {
server/middleware/cors-ssot.ts:22:    const ok = ALLOWLIST.some(rule =>
server/middleware/cors-ssot.ts:30:  credentials: true,
server/middleware/cors-ssot.ts:34:export const corsSsot = cors(corsOptions);
server/middleware/requireSharedToken.ts:5:  if (process.env.ALLOW_CLIENT_SHARED_TOKEN !== "1") return next();
server/routes/v1-applications-docs.ts:14:  credentials: {
server/middleware/shared-token-auth.ts:5: * Only active when ALLOW_CLIENT_SHARED_TOKEN=1
server/middleware/shared-token-auth.ts:8:  const allowSharedToken = process.env.ALLOW_CLIENT_SHARED_TOKEN === '1';
server/middleware/shared-token-auth.ts:16:    console.warn('🚨 [SHARED-TOKEN] ALLOW_CLIENT_SHARED_TOKEN=1 but CLIENT_SHARED_BEARER not set');
server/routes/auth.ts:62:        error: 'Invalid credentials'
server/routes/auth.ts:74:        error: 'Invalid credentials'
server/routes/auth.ts:276:      credentials: {
server/routes/otp_diag.ts:13:  ALLOW_OTP_DIAG,
server/routes/otp_diag.ts:26:const allow = ALLOW_OTP_DIAG === "true";
server/jobs/auditS3Documents.ts:35:        credentials: {
server/routes/slf/contacts.ts:107:        console.log('🔐 [SLF-API] Authentication required - need API credentials from SLF team');
server/routes/voice.ts:49: * Supports silo-aware token generation with separate Twilio credentials per silo.
server/routes/voice.ts:136:    console.log('🧪 [VOICE] Test mode - Twilio credentials not configured');
server/routes/voice.actions.ts:13:    if (!process.env.VOICE_ALLOW_RECORDING) return res.status(403).json({ error: "recording_disabled" });
server/middleware/fileUploadSecurity.ts:13:const ALLOWED_FILE_TYPES = {
server/middleware/fileUploadSecurity.ts:43:  if (!Object.keys(ALLOWED_FILE_TYPES).includes(file.mimetype) && !isPdfVariation) {
server/middleware/fileUploadSecurity.ts:52:  const allowedExtensions = ALLOWED_FILE_TYPES[file.mimetype as keyof typeof ALLOWED_FILE_TYPES];
server/routes/googleAdsUpload.ts:32:    const { credentials } = await oauth2.refreshAccessToken();
server/routes/googleAdsUpload.ts:33:    return credentials.access_token!;
server/routes/integrations/o365.ts:30:  // Use real Azure App Registration credentials
server/routes/integrations/o365.ts:32:    console.log('🔐 [O365] MSAL instance not initialized - credentials missing');
server/routes/integrations/o365.ts:102:  console.log('📊 [O365] Using real Azure credentials');
server/routes/integrations/o365.ts:104:  // Use real Azure App Registration credentials
server/routes/googleAds.ts:56:    const { credentials } = await oauth2.refreshAccessToken();
server/routes/googleAds.ts:57:    await saveTokens(credentials);
server/routes/googleAds.ts:58:    return credentials.access_token!;
server/middleware/deletionProtection.ts:149:      console.log(`✅ [DELETE ALLOWED] Protection disabled, allowing: ${req.originalUrl}`);
server/routes/users-admin.ts:71:      return res.status(401).json({ error: 'Invalid credentials' });
server/routes/emergency-call-stop.ts:21:        error: 'Twilio credentials not configured'
server/routes/applications/create.ts:386:    console.log(`✅ MULTIPLE APPLICATIONS ALLOWED: Processing application for email: ${step4.email}`);
server/routes/applications/create.ts:726:    // DUPLICATE EMAIL ALLOWED: Check for unique constraint but handle gracefully
server/routes/applications/create.ts:729:      console.log("✅ DUPLICATE EMAIL ALLOWED: Constraint violation handled gracefully for:", userEmail);
server/routes/applications/submit.ts:49:        rejectionReason: 'RE_SUBMISSION_NOT_ALLOWED'
server/middleware/securityControls.ts:22:  const allowEnv = parseIps(process.env.IP_ALLOWLIST||"");
server/routes/integrations-api.ts:298:  // In real implementation, validate the credentials
server/services/twilioVerify.ts:12:// Initialize Twilio client only if all credentials are available
server/services/twilioVerify.ts:39:  console.error('❌ PRODUCTION OTP WILL FAIL - Missing Twilio credentials');
server/services/twilioVerify.ts:66:        console.error('[Twilio SMS Error] Missing credentials or configuration');
server/routes/lender.portal.ts:54:  // Demo credentials - bypass database issues temporarily
server/routes/lender.portal.ts:64:    return res.status(401).json({ error: 'Invalid credentials - use demo@capitalfinance.com' });
server/routes/lender.portal.ts:95:    demo_credentials: [
server/routes/lender.portal.ts:257:// COMMENT OUT TO ALLOW SPA TO LOAD FOR LOGIN PAGE
server/services/smsNotificationService.ts:168:    // Check if Twilio credentials are available
server/services/smsNotificationService.ts:174:      console.error('❌ [SMS-NOTIFICATION] Missing Twilio credentials');
server/services/smsNotificationService.ts:175:      return { success: false, error: 'Twilio credentials not configured' };
server/services/twilioLookupService.ts:11:// Initialize Twilio client only if credentials are available
server/services/twilioLookupService.ts:24:  console.warn('⚠️ Twilio Lookup service disabled: Missing credentials');
server/services/o365Service.ts:27:  console.warn('⚠️ Office 365 integration disabled: Missing Azure credentials');
server/services/s3.ts:10:  throw new Error("AWS credentials missing: set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY");
server/services/s3.ts:20:  credentials: {
server/routes/voice-real.ts:28:      return res.json({ ok: false, error: "Twilio credentials not configured" });
server/services/backup/runner.ts:108:  if (String(process.env.ALLOW_DB_RESTORE||"false").toLowerCase()!=="true") throw new Error("restore disabled");
server/routes/pipeline.docs.ts:4:const ALLOWED = new Set(["approve","reject","delete","replace"]);
server/routes/pipeline.docs.ts:8:  if (!ALLOWED.has(action)) return res.status(400).json({ ok:false, error:"bad_action" });
server/routes/comm-email.js:40:  // TODO: call Microsoft Graph sendMail with tenant credentials
server/routes/public.ts:23:    // S3 presign with real credentials
server/routes/campaigns.ts:76:  const base = process.env.PUBLIC_PORTAL_ORIGIN || 'https://example.com';
server/routes/documentManagement.ts:40:  credentials: {
server/routes/standardizedAuth.ts:33://       console.log('❌ [STANDARDIZED-AUTH] Missing credentials');
server/routes/credentialDiagnostic.ts:5:// Simple credential diagnostic endpoint
server/routes/adminUploadDashboard.ts:124:        credentials: {
server/routes/quickS3Test.ts:13:    credentials: {
server/routes/quickS3Test.ts:52:      suggestion = 'Access denied. Check IAM permissions for your AWS credentials.';
server/routes/quickS3Test.ts:54:      suggestion = 'Invalid AWS Access Key ID. Check your AWS credentials.';
server/routes/marketing-campaigns.ts:79:    // Implementation would require Google Ads API credentials
server/routes/testS3DocumentAccess.ts:14:    credentials: {
server/routes/lenderCredentials.ts:9:// GET current credentials for a lender (no password returned)
server/routes/lenderCredentials.ts:10:router.get('/lenders/:lenderName/credentials', async (req, res) => {
server/routes/lenderCredentials.ts:21:    // Lender credentials temporarily disabled during schema migration
server/routes/lenderCredentials.ts:23:    console.log('Lender credentials fetch disabled during schema migration');
server/routes/lenderCredentials.ts:25:    const credential = credResult[0] || null;
server/routes/lenderCredentials.ts:29:      data: credential ? {
server/routes/lenderCredentials.ts:30:        username: credential.username,
server/routes/lenderCredentials.ts:32:        createdAt: credential.createdAt,
server/routes/lenderCredentials.ts:33:        updatedAt: credential.updatedAt
server/routes/lenderCredentials.ts:41:    console.error('Error fetching lender credentials:', error);
server/routes/lenderCredentials.ts:44:      error: 'Failed to fetch credentials'
server/routes/lenderCredentials.ts:49:// POST/PATCH credentials for a lender (upsert)
server/routes/lenderCredentials.ts:50:router.post('/lenders/:lenderName/credentials', async (req, res) => {
server/routes/lenderCredentials.ts:79:    // Lender credentials temporarily disabled during schema migration
server/routes/lenderCredentials.ts:80:    console.log('Lender credentials update disabled during schema migration');
server/routes/lenderCredentials.ts:82:    // TODO: Re-enable when lender_credentials table is restored
server/routes/lenderCredentials.ts:91:    console.error('Error updating lender credentials:', error);
server/routes/lenderCredentials.ts:103:      error: 'Failed to update credentials'
server/routes/lenderCredentials.ts:108:// DELETE credentials for a lender
server/routes/lenderCredentials.ts:109:router.delete('/lenders/:lenderName/credentials', async (req, res) => {
server/routes/lenderCredentials.ts:120:    // Lender credentials deletion temporarily disabled during schema migration
server/routes/lenderCredentials.ts:121:    console.log('Lender credentials deletion disabled during schema migration');
server/routes/lenderCredentials.ts:129:    console.error('Error deleting lender credentials:', error);
server/routes/lenderCredentials.ts:132:      error: 'Failed to delete credentials'
server/routes/lenderCredentials.ts:164:      // 2. Delete the lender credentials (raw SQL)
server/routes/lenderCredentials.ts:166:        DELETE FROM lender_credentials 
server/routes/lenderCredentials.ts:171:      console.log(`🔐 Deleted credentials for ${lenderName}: ${deletedCredentials.rowCount || 0 > 0 ? 'Success' : 'No credentials found'}`);
server/routes/monitoring.ts:164:      corsEnabled: true,
server/routes/testCorrectBucket.ts:25:    credentials: {
server/routes/s3Test.ts:43:        error: 'AWS credentials not configured',
server/routes/s3Test.ts:52:      credentials: {
server/routes/s3Test.ts:73:      credentials: 'configured'
server/routes/s3Test.ts:88:      errorMessage = 'Access denied - check AWS credentials and permissions';
server/routes/s3TestRouter.ts:6:// GET /api/s3/test - Test S3 credentials and permissions
server/routes/s3TestRouter.ts:9:    console.log(`🧪 [S3 TEST API] Testing S3 credentials...`);
server/routes/s3ProductionTest.ts:30:    console.log(`[S3-TEST] Credentials present: ${config.credentials}`);
server/routes/s3ProductionTest.ts:98:      details: 'S3 test upload failed - ensure bucket exists and credentials are correct'
server/routes/s3Management.ts:74:        ? 'AWS Access Key ID is invalid. Please verify your credentials.' 
server/routes/s3Management.ts:76:        ? 'AWS Secret Access Key is invalid. Please verify your credentials.'
server/routes/s3Management.ts:79:        : 'General S3 error. Please verify all credentials and permissions.'
server/routes/s3Management.ts:113:        ? 'AWS Access Key ID is invalid. Please verify your credentials.' 
server/routes/s3Management.ts:115:        ? 'AWS Secret Access Key is invalid. Please verify your credentials.'
server/routes/s3Management.ts:116:        : 'General S3 error. Please verify all credentials and permissions.'
server/routes/s3Debug.ts:27:        credentialsPresent: diagnostic.credentialsPresent
server/routes/s3Integration.ts:91:        'Verify AWS credentials in Replit Secrets',
server/routes/s3Integration.ts:169:      credentialsPresent: !!(S3_CONFIG.accessKeyId && S3_CONFIG.secretAccessKey)
server/routes/s3BucketTest.ts:22:    credentials: {
server/routes/systemDiagnostics.ts:137:        "🔧 Check AWS credentials and bucket permissions",
server/routes/standardLoginHandler.ts:9:  const ui = process.env.UI_ORIGIN || '';
server/routes/standardLoginHandler.ts:10:  const api = process.env.API_ORIGIN || '';
server/routes/documents-versioning.ts:13:  credentials: {
server/routes/canonicalAuth.ts:23:        reason: 'missing_credentials' 
server/routes/canonicalAuth.ts:32:        reason: 'invalid_credentials' 
server/routes/twilioTesting.disabled.ts:59:      credentials: health,
server/_diag.db.ts:51:          headers: req.headers.authorization ? { 'Authorization': req.headers.authorization } : {}
server/_diag.db.ts:66:          headers: req.headers.authorization ? { 'Authorization': req.headers.authorization } : {}
server/o365/router.auth.ts:29:      return res.status(400).send("Authorization code missing");
server/workers/transcripts.worker.mjs:21:    headers: { Authorization: auth }
server/lib/googleAds.ts:22:        'Authorization': `Bearer ${accessToken.token}`,
server/ads/google_write.ts:44:      "Authorization": `Bearer ${tk}`,
server/ads/google_write.ts:96:      "Authorization": `Bearer ${tk}`, 
server/ads/linkedin_write.ts:16:      "Authorization": `Bearer ${token}`, 
server/ads/linkedin_write.ts:31:      "Authorization": `Bearer ${token}`, 
server/lib/graph.ts:21:  const headers = { "Content-Type":"application/json", "Authorization":`Bearer ${token}`, ...(init?.headers||{}) };
server/auth/verifyOnly.ts:176:    return res.status(401).json({ ok:false, error:"Missing bearer" });
server/auth/require-auth.mjs:3:/** Reads token from Authorization: Bearer, or cookies: token/jwt/access_token */
server/auth/require-auth.mjs:28:    "Ensure the browser sends Authorization: Bearer <token> or a 'token' cookie.",
server/auth/require-auth.mjs:40:      if (!token) return res.status(401).json({ error:"missing_token", asks:["Send Authorization: Bearer <token> or set 'token' cookie"]});
server/mw/auth.ts:38:    return res.status(401).json({ error: 'missing_bearer' });
server/mw/jwt-auth.ts:28:  const h = req.headers.authorization || req.headers.Authorization;
server/mw/jwt-auth.ts:70:  if (!token) return res.status(401).json({ error: "missing_bearer" });
server/security/jwtOrSession.ts:19:  const bearer = authz.startsWith("Bearer ") ? authz.slice(7) : null;
server/security/jwtOrSession.ts:27:  const token = bearer || cookieToken;
server/ms/graph.ts:36:      "Authorization":"Bearer "+accessToken, 
server/middleware/cors-ssot.ts:28:  allowedHeaders: ["Authorization","Content-Type","X-Admin-Token","X-Lender-Id"],
server/middleware/requireSharedToken.ts:7:  const expected = process.env.CLIENT_SHARED_BEARER;
server/middleware/requireSharedToken.ts:12:  if (!m) return res.status(401).json({ ok: false, error: "missing_bearer" });
server/middleware/requireSharedToken.ts:15:  if (token !== expected) return res.status(401).json({ ok: false, error: "invalid_bearer" });
server/middleware/shared-token-auth.ts:9:  const sharedToken = process.env.CLIENT_SHARED_BEARER;
server/middleware/shared-token-auth.ts:16:    console.warn('🚨 [SHARED-TOKEN] ALLOW_CLIENT_SHARED_TOKEN=1 but CLIENT_SHARED_BEARER not set');
server/middleware/auth.ts:49:    return res.status(401).json({ ok: false, error: "Missing bearer" });
server/middleware/hybridAuth.ts:123:    error: 'Authorization required. Provide Bearer token or valid authentication cookie.'
server/emailAuth.ts:66:    // Fallback to Authorization header (legacy flow)
server/middleware/optionalAuth.ts:42:  // Extract JWT token from cookie or Authorization header
server/middleware/clientAuth.ts:20:      return res.status(401).json({ ok: false, error: "Missing bearer" });
server/middleware/clientAuth.ts:25:      return res.status(401).json({ ok: false, error: "Invalid bearer format" });
server/middleware/requireAuth.ts:11:  // 1) Authorization: Bearer <token>
server/middleware/devAuth.ts:17:  // Accept bearer/jwt if present (helps local API tests)
server/middleware/devAuth.ts:18:  const bearer = req.get("authorization")?.replace(/^Bearer\s+/i, "");
server/middleware/devAuth.ts:20:  const token = bearer || cookieTok;
server/scripts/generate-api-token.ts:70:2. Use it in Authorization headers: Authorization: Bearer ${token}
server/middleware/bearerAuth.ts:5:export function bearerAuth(req: Request, res: Response, next: NextFunction) {
server/middleware/bearerAuth.ts:11:      error: 'Authorization header with Bearer token required'
server/routes/_int.state.ts:16:      const token = process.env.CLIENT_SHARED_BEARER || "";
server/routes/slf/contacts.ts:33:          'Authorization': `Token c6b32011b346f3cf2df798ceb20757aec835d74b`
server/routes/voice.token.ts:8:// Support both session auth (cookies) and bearer tokens
server/routes/otp_diag.ts:31:  // Check for JWT token in cookie or bearer header (same logic as auth router)
server/routes/otp_diag.ts:38:  const auth = req.header('authorization') || req.header('Authorization');
server/routes/integrations/o365.ts:61:    return res.status(400).json({ error: 'Authorization code not provided' });
server/routes/drawerAPI.ts:3:import { bearerAuth } from '../middleware/bearerAuth';
server/routes/drawerAPI.ts:8:router.get('/pipeline/cards/:id/application', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:3:import { bearerAuth } from '../middleware/bearerAuth';
server/routes/documentAPI.ts:8:router.get('/applications/:id/documents', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:33:router.post('/applications/:id/documents', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:55:router.get('/documents/:docId/view', bearerAuth, async (req, res) => {
server/routes/documentAPI.ts:81:router.put('/documents/:docId/status', bearerAuth, async (req, res) => {
server/utils/standardAuth.ts:35:  bearer: string;
server/utils/standardAuth.ts:106:    bearer: token,
server/routes/admin/users.ts:44:    res.status(500).json({ error: "Authorization check failed" });
server/routes/applications/create.ts:7:import { bearerAuth } from '../../middleware/bearerAuth';
server/routes/applications/upload.ts:10:// import { bearerAuth } from '../../middleware/bearerAuth'; // REMOVED for Staff App Patch - public access
server/routes/google-ads.mjs:154:    const bearer = await authHeader();
server/routes/google-ads.mjs:155:    if (!bearer) return res.status(409).json({ ok:false, error:"not_connected" });
server/routes/google-ads.mjs:167:        "Authorization": bearer,
server/routes/google-ads.mjs:201:    const bearer = await authHeader();
server/routes/google-ads.mjs:202:    if (!bearer) return res.status(409).json({ ok:false, error:"not_connected" });
server/routes/google-ads.mjs:211:        "Authorization": bearer,
server/routes/google-ads.mjs:253:      headers:{ "Content-Type":"application/json", "Authorization":`Bearer ${OPENAI_API_KEY}` },
server/routes/google-ads.mjs:275:    headers:{ "Content-Type":"application/json", "Authorization":`Bearer ${OPENAI_API_KEY}` },
server/routes/google-ads.mjs:290:    headers:{ "Content-Type":"application/json", "Authorization":`Bearer ${OPENAI_API_KEY}` },
server/services/microsoftGraphService.ts:117:        'Authorization': `Bearer ${accessToken}`,
server/routes/googleAdsUpload.ts:131:        Authorization: `Bearer ${accessToken}`, 
server/routes/googleAds.ts:130:          Authorization: `Bearer ${accessToken}`, 
server/routes/googleAds.ts:173:        Authorization: `Bearer ${accessToken}`, 
server/routes/linkedin/oauth.ts:68:      headers: { 'Authorization': `Bearer ${tokenData.access_token}` }
server/routes/linkedin/oauth.ts:115:        'Authorization': `Bearer ${accessToken}`,
server/services/ai.ts:210:    headers: { "Authorization": `Bearer ${KEY}`, "Content-Type": "application/json" },
server/services/ai.ts:227:    headers: { "Authorization": `Bearer ${KEY}`, "Content-Type": "application/json" },
server/routes/oauth-connect.ts:151:          headers: { 'Authorization': `Bearer ${tokens.access_token}` }
server/routes/oauth-connect.ts:158:          headers: { 'Authorization': `Bearer ${tokens.access_token}` }
server/routes/oauth-connect.ts:165:          headers: { 'Authorization': `Bearer ${tokens.access_token}` }
server/services/embed.ts:7:      headers: { "Content-Type":"application/json", "Authorization":`Bearer ${key}` },
server/routes/_admin-catalog.mjs:39:      headers: { "Content-Type":"application/json", "Authorization": `Bearer ${token}` },
server/routes/integrations-api.ts:118:      error: 'Authorization code is required'
server/routes/integrations-api.ts:164:      error: 'Authorization code is required'
server/routes/integrations-api.ts:202:      error: 'Authorization code is required'
server/routes/integrations-api.ts:240:      error: 'Authorization code is required'
server/routes/adminReassignment.ts:13:    // Get token from Authorization header or cookies
server/routes/linkedin.ts:79:      return res.status(400).json({ ok: false, error: 'Authorization code required' });
server/routes/lender.portal.ts:17:    return res.status(401).json({ error: 'Missing bearer token' });
server/routes/documentWorkflow.ts:9:import { bearerAuth } from "../middleware/bearerAuth";
server/routes/documentWorkflow.ts:17:router.post("/api/applications/:id/nudge-documents", bearerAuth, async (req, res) => {
server/routes/voice_proxy.ts:13:      "Authorization": "Basic " + Buffer.from(
server/routes/transcribe.ts:13:      "Authorization": "Basic " + Buffer.from(
server/routes/transcribe.ts:31:      "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
server/routes/transcribe.ts:50:      "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`, 
server/routes/conference.ts:73:      headers: { Authorization: auth, 'Content-Type':'application/x-www-form-urlencoded' },
server/routes/ads_negatives.ts:59:      "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`, 
server/routes/slf-contacts-new.ts:12:  const h: Record<string, string> = { Authorization: SLF_TOKEN, ...extra };
server/routes/slf-contacts.ts:11:  return { Authorization: SLF_TOKEN, ...extra };
server/routes/slf-ext.ts:12:  headers: { Authorization: token, Accept: "application/json" },
server/routes/microsoftGraphContactCard.ts:123:        'Authorization': `Bearer ${tokens.access_token}`
server/routes/microsoftGraphContactCard.ts:255:        'Authorization': `Bearer ${emailAccount.accessToken}`,
server/routes/microsoftGraphContactCard.ts:360:              'Authorization': `Bearer ${account.accessToken}`
server/routes/dialer.ts:40:  const r = await fetch(url, { headers: { "Authorization": `Bearer ${key}` } });
server/routes/dialer.ts:49:    headers: token ? { Authorization: `Bearer ${token}` } : {}
server/routes/monitoring.ts:163:      bearerTokenConfigured: tokenValid,
server/routes/contacts.adapter.ts:10:        'Authorization': req.get('Authorization') || '',
server/routes/industry-benchmarking.ts:33:    return res.status(401).json({ success: false, error: 'Authorization required' });
server/routes/industry-benchmarking.ts:499:            'Authorization': req.headers.authorization || ''
server/routes/industry-benchmarking.ts:560:        'Authorization': req.headers.authorization || ''
server/routes/contacts.fallback.ts:9:      headers: { 'Authorization': req.get('Authorization') || '' }
server/services/graphMail.ts:9:      Authorization: `Bearer ${accessToken}`, 
server/services/graphMail.ts:29:    headers: { Authorization: `Bearer ${accessToken}` } 
server/services/graphMail.ts:38:      Authorization: `Bearer ${accessToken}`, 
server/routes/standardLoginHandler.ts:30:  // Return standardized response with bearer token
server/routes/standardLoginHandler.ts:33:    bearer: token, 
server/routes/ops.healthFull.ts:53:      headers: { Authorization: "Basic " + Buffer.from(`${sid}:${token}`).toString("base64") }
server/routes/o365.todo.ts:8:  const rsp = await fetch(`https://graph.microsoft.com/v1.0${path}`, { ...init, headers: { Authorization:`Bearer ${token}`, "Content-Type":"application/json" }});
server/routes/openapi.ts:12:          security: [{ bearerAuth: [] }, { hmacHeader: [] }],
server/routes/openapi.ts:30:        bearerAuth: { type:"http", scheme:"bearer" },
server/routes/o365.mailbox.ts:9:  const headers: any = { Authorization: `Bearer ${token}` };
server/routes/settingsMem.ts:36:  // - Authorization: dev  OR Bearer dev  -> admin,manager,ops
server/routes/settingsMem.ts:39:  if (auth === "dev" || auth === "bearer dev") return ["admin","manager","ops"] as Role[];
server/routes/schedule.ts:34:    method:"POST", headers:{ Authorization:`Bearer ${token}`, "Content-Type":"application/json" },
server/routes/schedule.ts:92:    method:"POST", headers:{ Authorization:`Bearer ${token}`, "Content-Type":"application/json" },
server/routes/ops.status.ts:35:        headers:{ "Authorization":"Basic "+Buffer.from(`${sid}:${tok}`).toString("base64") }
server/routes/marketing.linkedin.ts:50:  const me = await (await fetch(`${apiBase()}/me`, { headers: { Authorization: `Bearer ${tk}` } })).json();
server/routes/marketing.linkedin.ts:51:  const orgs: any = await (await fetch(`${apiBase()}/organizationalEntityAcls?q=roleAssignee&role=ADMINISTRATOR&state=APPROVED&count=50&start=0&projection=(elements*(organizationalTarget~(id,localizedName)))`, { headers: { Authorization: `Bearer ${tk}` } })).json();
server/routes/marketing.linkedin.ts:68:    headers: { Authorization: `Bearer ${tk}`, "Content-Type": "application/json" }, 
server/routes/marketing.linkedin.ts:83:  const j = await (await fetch(url, { headers: { Authorization: `Bearer ${tk}` } })).json();
server/routes/o365.meeting.ts:15:    headers:{ Authorization:`Bearer ${token}`, "Content-Type":"application/json" },
server/routes/tasks.todo.ts:13:    const listRsp = await fetch("https://graph.microsoft.com/v1.0/me/todo/lists", { headers:{ Authorization:`Bearer ${token}` }});
server/routes/tasks.todo.ts:16:    const rsp = await fetch(`https://graph.microsoft.com/v1.0/me/todo/lists/${def}/tasks?$top=50`, { headers:{ Authorization:`Bearer ${token}` }});
server/routes/tasks.todo.ts:38:    const listRsp = await fetch("https://graph.microsoft.com/v1.0/me/todo/lists", { headers:{ Authorization:`Bearer ${token}` }});
server/routes/tasks.todo.ts:42:      method:"POST", headers:{ Authorization:`Bearer ${token}`, "Content-Type":"application/json" },
server/routes/inbox.ts:40:        const inRsp = await fetch(`https://graph.microsoft.com/v1.0/me/messages?$top=25&$orderby=receivedDateTime DESC&$filter=from/emailAddress/address eq '${c.email}'`,{ headers:{ Authorization:`Bearer ${token}` }});
server/routes/inbox.ts:43:        const outRsp = await fetch(`https://graph.microsoft.com/v1.0/me/messages?$top=25&$orderby=sentDateTime DESC&$filter=toRecipients/any(t: t/emailAddress/address eq '${c.email}')`,{ headers:{ Authorization:`Bearer ${token}` }});
server/test-crm-twilio-integration.js:35:          'Authorization': `Bearer ${testConfig.authToken}`,
server/test-crm-twilio-integration.js:59:          'Authorization': `Bearer ${testConfig.authToken}`,
server/test-crm-twilio-integration.js:86:          'Authorization': `Bearer ${testConfig.authToken}`,
server/test-crm-twilio-integration.js:110:          'Authorization': `Bearer ${testConfig.authToken}`,
server/test-crm-twilio-integration.js:134:          'Authorization': `Bearer ${testConfig.authToken}`,
