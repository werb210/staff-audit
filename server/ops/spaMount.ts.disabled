import type { Express, Request, Response } from "express";
import path from "path";
import fs from "fs";
import crypto from "crypto";
import express from "express";

function sha256(p: string) { 
  return crypto.createHash("sha256").update(fs.readFileSync(p)).digest("hex"); 
}

export async function mountSpa(app: Express, clientDir: string) {
  const indexPath = path.join(clientDir, "index.html");
  if (!fs.existsSync(indexPath)) throw new Error(`index.html missing in ${clientDir}`);
  
  const raw = fs.readFileSync(indexPath, "utf8");
  const indexHash = crypto.createHash("sha256").update(raw).digest("hex").slice(0, 8);
  const buildHash = process.env.BUILD_HASH || indexHash;

  // 410 anything from legacy mounts
  const deny = (p:string) => app.use(p, (_req,res)=>res.status(410).send('Gone'));
  ['/public', '/dist_old', '/client/build', '/static', '/legacy'].forEach(deny);

  // Make index.html uncacheable; assets cacheable
  app.get('*', (req,res,next)=>{
    if (req.accepts('html')) {
      res.setHeader('Cache-Control','no-store, no-cache, must-revalidate, max-age=0');
    }
    next();
  });

  // Bundle attestation - hash verification  
  const expectedHash = process.env.EXPECT_INDEX_HASH;
  if (expectedHash && expectedHash !== indexHash && process.env.SKIP_BUNDLE_CHECK !== "1") {
    console.warn(`⚠️ Bundle hash mismatch - expected ${expectedHash}, got ${indexHash} (SKIP_BUNDLE_CHECK=1 to bypass)`);
  }
  console.log(`✅ Serving bundle with hash: ${indexHash} (new build)`);

  // Add provenance headers on every response served by this process
  app.use((req, res, next) => {
    res.setHeader("X-Served-From", clientDir);
    res.setHeader("X-Index-Hash", indexHash);
    res.setHeader("X-Build-Hash", buildHash);
    res.setHeader("X-Base-Inferred", "/staff");
    res.setHeader("X-Bundle-Attested", "true");
    next();
  });

  // Serve static assets normally
  app.use("/assets", express.static(path.join(clientDir, "assets"), { maxAge: "1y", etag: true }));

  // SPA fallback (last) with forced banner when needed
  app.get("*", (req: Request, res: Response) => {
    const wantBanner = process.env.SHOW_DEBUG_BANNER === "1" || req.query.debug === "1";
    let html = raw;

    // Generate cryptographic canary for this exact request
    const CANARY = `CANARY-${indexHash.slice(0, 8)}`;
    const timestamp = Date.now();

    // Inject meta tags and window globals for cryptographic verification
    const metaInjection = `
    <meta name="app-build" content="${buildHash}">
    <meta name="app-index-hash" content="${indexHash}">
    <meta name="app-served-from" content="${clientDir}">
    <meta name="app-canary" content="${CANARY}">
    <script>
      window.__APP_BUILD__ = "${buildHash}";
      window.__BUILD_HASH__ = "${indexHash}";
      window.__SERVED_FROM__ = "${clientDir}";
      window.__CANARY__ = "${CANARY}";
      window.__SERVED_AT__ = ${timestamp};
      
      // Poison pill for wrong bundles
      (function(){
        var must='${buildHash}';
        if (window.__APP_BUILD__ && window.__APP_BUILD__!==must) {
          document.body.innerHTML = '<h1>Stale client blocked - forcing reload</h1>';
          setTimeout(() => window.location.reload(true), 1000);
          throw new Error('Wrong bundle detected: ' + window.__APP_BUILD__ + ' !== ' + must);
        }
      })();
      
      // Kill service workers
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.getRegistrations().then(rs => rs.forEach(r=>r.unregister()));
      }
    </script>
    </head>`;
    
    html = html.replace('</head>', metaInjection);

    if (wantBanner) {
      const banner = `
<div id="debug-banner" 
     data-debug-banner 
     data-build-hash="${buildHash}"
     data-app-base="/staff"
     style="position:fixed;inset:0 auto auto 0;height:34px;display:flex;gap:12px;align-items:center;padding:0 12px;background:#c1121f;color:#fff;font:600 12px system-ui;z-index:2147483647;box-shadow:0 1px 0 rgba(0,0,0,.2)">
  🔴 DEBUG BANNER — build:<b>${buildHash}</b> — served:<code>${clientDir}</code> — path:<code>${req.originalUrl}</code> — canary:<code>${CANARY}</code>
</div>
<style>html{scroll-padding-top:34px}body{margin-top:34px !important}</style>
<!-- ${CANARY} -->`;
      html = html.replace(/<body[^>]*>/i, m => `${m}\n${banner}\n`);
    }

    // Cache prevention for debug mode
    if (wantBanner) {
      res.setHeader("Cache-Control", "no-store, must-revalidate");
      res.setHeader("Pragma", "no-cache");
      res.setHeader("Expires", "0");
    }

    res.setHeader("X-Spa-Fallback", "1");
    res.setHeader("X-Canary", CANARY);
    res.type("html").status(200).send(html);
  });
}