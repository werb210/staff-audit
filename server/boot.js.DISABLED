"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const cors_1 = __importDefault(require("cors"));
const path_1 = __importDefault(require("path"));
const routeRegistry_1 = require("./ops/routeRegistry");
const ops_routes_1 = __importDefault(require("./routes/ops.routes"));
const spaMount_1 = require("./ops/spaMount");
// ðŸ”’ only import the canonical routers you actually use
const lenders_1 = __importDefault(require("./routes/lenders")); // your fixed lenders router
const lenderProducts_1 = __importDefault(require("./routes/lender-products")); // lender products router
const auth_dev_1 = __importDefault(require("./routes/auth.dev")); // or your Verify routes in prod
const composerRouter_1 = __importDefault(require("./routes/composerRouter")); // O365/LinkedIn/AI composer
const googleAdsRouter_1 = __importDefault(require("./routes/googleAdsRouter")); // Google Ads AI system
const adsRouter_1 = __importDefault(require("./routes/adsRouter")); // Ads Analytics & AI
const buildRouter_1 = __importDefault(require("./routes/_int/buildRouter")); // Build verification
const app = (0, express_1.default)();
app.use((0, cookie_parser_1.default)());
app.use(express_1.default.json());
app.use((0, cors_1.default)({ origin: true, credentials: true }));
console.log("ðŸš€ [CLEAN BOOT] Starting with route registry protection...");
// ---- OPS (list mounts)
(0, routeRegistry_1.registerUse)(app, "/api/ops", ops_routes_1.default, "ops.routes");
// ---- AUTH (dev or verify)
if (process.env.AUTH_MODE === "dev") {
    (0, routeRegistry_1.registerUse)(app, "/api/auth", auth_dev_1.default, "auth.dev");
}
else {
    // registerUse(app, "/api/auth", verifyRoutes as any, "auth.verify");
}
// ---- BUSINESS APIS (ONE MOUNT EACH)
(0, routeRegistry_1.registerUse)(app, "/api/lenders", lenders_1.default, "routes/lenders");
(0, routeRegistry_1.registerUse)(app, "/api/lender-products", lenderProducts_1.default, "routes/lender-products");
(0, routeRegistry_1.registerUse)(app, "/api/composer", composerRouter_1.default, "routes/composerRouter");
(0, routeRegistry_1.registerUse)(app, "/api/ads", googleAdsRouter_1.default, "routes/googleAdsRouter");
(0, routeRegistry_1.registerUse)(app, "/api/ads-analytics", adsRouter_1.default, "routes/adsRouter");
(0, routeRegistry_1.registerUse)(app, "/api/_int", buildRouter_1.default, "routes/_int/buildRouter");
// â€¦repeat for contacts, applications, docs, etc, ONCEâ€¦
console.log("âœ… [CLEAN BOOT] All routes mounted with duplicate protection");
// ---- SPA (LAST) â€” pin to one build dir
const clientDir = process.env.FORCE_CLIENT_DIR || path_1.default.resolve(__dirname, "../client/dist");
(0, spaMount_1.mountSpa)(app, clientDir);
console.log(`ðŸŽ¯ [CLEAN BOOT] SPA mounted from: ${clientDir}`);
// ---- listen
const PORT = Number(process.env.PORT || 3000);
app.listen(PORT, () => console.log(`âœ… [CLEAN BOOT] Server running on :${PORT}, client=${clientDir}`));
