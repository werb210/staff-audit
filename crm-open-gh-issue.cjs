#!/usr/bin/env node
/**
 * CRM GitHub Issue Creator
 * Automatically creates GitHub issues for unimplemented CRM features
 */

const fs = require('fs');
const path = require('path');

// ANSI color codes for terminal output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m', 
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function loadFeatureContracts() {
  try {
    const contractsPath = path.join(process.cwd(), 'docs/FEATURE_CONTRACTS.ts');
    const content = fs.readFileSync(contractsPath, 'utf8');
    
    // Parse the FEATURE_CONTRACTS_PHASE_1 array
    const arrayMatch = content.match(/FEATURE_CONTRACTS_PHASE_1:\s*FeatureContract\[\]\s*=\s*\[([\s\S]*?)\];/);
    if (!arrayMatch) {
      throw new Error('Could not parse FEATURE_CONTRACTS_PHASE_1 array');
    }
    
    // Extract individual feature objects
    const featuresText = arrayMatch[1];
    const features = [];
    
    // Simple regex to extract feature objects
    const featureMatches = featuresText.match(/\{[\s\S]*?\}/g);
    
    if (featureMatches) {
      featureMatches.forEach(match => {
        try {
          // Extract properties using regex
          const feature = match.match(/feature:\s*["']([^"']+)["']/)?.[1];
          const apiEndpoint = match.match(/apiEndpoint:\s*["']([^"']+)["']/)?.[1];
          const hook = match.match(/hook:\s*["']([^"']+)["']/)?.[1];
          const component = match.match(/component:\s*["']([^"']+)["']/)?.[1];
          const buttonOrUI = match.match(/buttonOrUI:\s*["']([^"']+)["']/)?.[1];
          const implemented = match.match(/implemented:\s*(true|false)/)?.[1] === 'true';
          const issueUrl = match.match(/issueUrl:\s*["']([^"']+)["']/)?.[1];
          
          if (feature && apiEndpoint && hook && component && buttonOrUI) {
            features.push({
              feature,
              apiEndpoint,
              hook,
              component,
              buttonOrUI,
              implemented,
              issueUrl: issueUrl || null
            });
          }
        } catch (error) {
          log(`Warning: Could not parse feature object: ${match.substring(0, 50)}...`, 'yellow');
        }
      });
    }
    
    return features;
  } catch (error) {
    log(`Error loading feature contracts: ${error.message}`, 'red');
    return [];
  }
}

async function createGitHubIssue(feature) {
  // Mock GitHub issue creation for demonstration
  // In real implementation, use @octokit/rest
  
  if (!process.env.GH_TOKEN) {
    log('‚ö†Ô∏è  GH_TOKEN environment variable not set - skipping GitHub API calls', 'yellow');
    return null;
  }
  
  // Simulate issue creation
  const mockIssueUrl = `https://github.com/boreal-financial/staff-portal/issues/${Math.floor(Math.random() * 1000)}`;
  
  const issueBody = `## üöß CRM Feature Implementation Required

**Automatically generated issue from Feature Contract System**

### Feature Details
- **Name**: ${feature.feature}
- **API Endpoint**: \`${feature.apiEndpoint}\`
- **React Hook**: \`${feature.hook}\`
- **UI Component**: \`${feature.component}\`
- **User Interface**: ${feature.buttonOrUI}

### Implementation Checklist
- [ ] **Backend API**: Implement ${feature.apiEndpoint} with proper authentication
- [ ] **React Hook**: Create ${feature.hook} with TanStack Query integration
- [ ] **UI Component**: Build ${feature.component} with form validation
- [ ] **Navigation**: Add ${feature.buttonOrUI} to appropriate dashboard section
- [ ] **Testing**: Verify all functionality works end-to-end
- [ ] **Documentation**: Update feature contract to \`implemented: true\`

### Contract Definition
\`\`\`json
${JSON.stringify(feature, null, 2)}
\`\`\`

### Acceptance Criteria
1. All API endpoints respond correctly with proper error handling
2. React hooks handle loading and error states appropriately  
3. UI components render without errors and include proper validation
4. User can access feature through intuitive navigation
5. Feature contract validation passes: \`node crm-validate-contracts.cjs\`

### Priority
**High** - Required for CRM Phase 1 completion

---
*This issue was automatically generated by the CRM Feature Contract Enforcement System*`;

  log(`üìù Mock GitHub Issue Created:`, 'blue');
  log(`   Title: üöß ${feature.feature} needs implementation`, 'blue');
  log(`   URL: ${mockIssueUrl}`, 'blue');
  log(`   Body: ${issueBody.length} characters`, 'blue');
  
  return mockIssueUrl;
}

function updateContractsWithIssueUrls(features, updatedFeatures) {
  try {
    const contractsPath = path.join(process.cwd(), 'docs/FEATURE_CONTRACTS.ts');
    let content = fs.readFileSync(contractsPath, 'utf8');
    
    // Update the issueUrl for features that got new issues
    updatedFeatures.forEach(feature => {
      if (feature.issueUrl) {
        const featureRegex = new RegExp(
          `(\\{[^}]*feature:\\s*["']${feature.feature.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}["'][^}]*)(\\})`,
          'g'
        );
        
        content = content.replace(featureRegex, (match, beforeClosing, closing) => {
          // Add issueUrl if it doesn't exist
          if (!beforeClosing.includes('issueUrl')) {
            return beforeClosing + ',\n    issueUrl: "' + feature.issueUrl + '"' + closing;
          } else {
            // Update existing issueUrl
            return beforeClosing.replace(/issueUrl:\s*["'][^"']*["']/, `issueUrl: "${feature.issueUrl}"`) + closing;
          }
        });
      }
    });
    
    fs.writeFileSync(contractsPath, content);
    log(`‚úÖ Updated FEATURE_CONTRACTS.ts with issue URLs`, 'green');
  } catch (error) {
    log(`‚ùå Failed to update FEATURE_CONTRACTS.ts: ${error.message}`, 'red');
  }
}

async function main() {
  log('üé´ CRM GitHub Issue Creator', 'bold');
  log('============================', 'blue');
  
  const features = loadFeatureContracts();
  
  if (features.length === 0) {
    log('‚ùå No feature contracts found', 'red');
    process.exit(1);
  }
  
  // Find features that need GitHub issues
  const needsIssues = features.filter(f => !f.implemented && !f.issueUrl);
  
  if (needsIssues.length === 0) {
    log('üéâ All unimplemented features already have GitHub issues!', 'green');
    log('No new issues need to be created.', 'green');
    process.exit(0);
  }
  
  log(`üìã Found ${needsIssues.length} features needing GitHub issues`, 'blue');
  
  const updatedFeatures = [];
  
  for (const feature of needsIssues) {
    try {
      const issueUrl = await createGitHubIssue(feature);
      if (issueUrl) {
        feature.issueUrl = issueUrl;
        updatedFeatures.push(feature);
        log(`  ‚úÖ Created issue for: ${feature.feature}`, 'green');
      } else {
        log(`  ‚ö†Ô∏è  Skipped issue creation for: ${feature.feature}`, 'yellow');
      }
    } catch (error) {
      log(`  ‚ùå Failed to create issue for ${feature.feature}: ${error.message}`, 'red');
    }
  }
  
  // Update contracts with new issue URLs
  if (updatedFeatures.length > 0) {
    updateContractsWithIssueUrls(features, updatedFeatures);
  }
  
  log('\nüìä Summary:', 'bold');
  log(`‚úÖ Created ${updatedFeatures.length} GitHub issues`, 'green');
  log(`üîß Updated: FEATURE_CONTRACTS.ts`, 'blue');
  
  if (process.env.GH_TOKEN) {
    log('\nüîó Issue URLs:', 'blue');
    updatedFeatures.forEach(feature => {
      log(`  ‚Ä¢ ${feature.feature}: ${feature.issueUrl}`, 'blue');
    });
  } else {
    log('\n‚ö†Ô∏è  To create real GitHub issues:', 'yellow');
    log('  1. Set GH_TOKEN environment variable', 'yellow');
    log('  2. Install @octokit/rest package', 'yellow');
    log('  3. Configure repository owner/name', 'yellow');
    log('  4. Re-run this script', 'yellow');
  }
  
  log('\nüìù Next Steps:', 'yellow');
  log('  1. Review created GitHub issues', 'yellow');
  log('  2. Assign issues to developers', 'yellow');
  log('  3. Track progress via GitHub project boards', 'yellow');
  log('  4. Update feature contracts when issues are resolved', 'yellow');
}

// Run issue creator if called directly
if (require.main === module) {
  main();
}

module.exports = { loadFeatureContracts, createGitHubIssue };